
USB_to_serial_test_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004028  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000006a8  20070000  00084028  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000ff4  200706a8  000846d0  000206a8  2**2
                  ALLOC
  3 .stack        00002004  2007169c  000856c4  000206a8  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000206a8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000206d1  2**0
                  CONTENTS, READONLY
  6 .debug_info   00011d96  00000000  00000000  0002072a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000329f  00000000  00000000  000324c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007b27  00000000  00000000  0003575f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d50  00000000  00000000  0003d286  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cc8  00000000  00000000  0003dfd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b89a  00000000  00000000  0003ec9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000146e9  00000000  00000000  0005a538  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006dab3  00000000  00000000  0006ec21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002090  00000000  00000000  000dc6d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200736a0 	.word	0x200736a0
   80004:	000838e9 	.word	0x000838e9
   80008:	000838e5 	.word	0x000838e5
   8000c:	000838e5 	.word	0x000838e5
   80010:	000838e5 	.word	0x000838e5
   80014:	000838e5 	.word	0x000838e5
   80018:	000838e5 	.word	0x000838e5
	...
   8002c:	000838e5 	.word	0x000838e5
   80030:	000838e5 	.word	0x000838e5
   80034:	00000000 	.word	0x00000000
   80038:	000838e5 	.word	0x000838e5
   8003c:	00080a7d 	.word	0x00080a7d
   80040:	000838e5 	.word	0x000838e5
   80044:	000838e5 	.word	0x000838e5
   80048:	000838e5 	.word	0x000838e5
   8004c:	000838e5 	.word	0x000838e5
   80050:	000838e5 	.word	0x000838e5
   80054:	000838e5 	.word	0x000838e5
   80058:	000838e5 	.word	0x000838e5
   8005c:	000838e5 	.word	0x000838e5
   80060:	000838e5 	.word	0x000838e5
   80064:	000838e5 	.word	0x000838e5
   80068:	00000000 	.word	0x00000000
   8006c:	00081eb1 	.word	0x00081eb1
   80070:	00081ec5 	.word	0x00081ec5
   80074:	00081ed9 	.word	0x00081ed9
   80078:	00081eed 	.word	0x00081eed
	...
   80084:	00080b1d 	.word	0x00080b1d
   80088:	000838e5 	.word	0x000838e5
   8008c:	000838e5 	.word	0x000838e5
   80090:	000838e5 	.word	0x000838e5
   80094:	000838e5 	.word	0x000838e5
   80098:	000838e5 	.word	0x000838e5
   8009c:	000838e5 	.word	0x000838e5
   800a0:	000806d1 	.word	0x000806d1
   800a4:	00000000 	.word	0x00000000
   800a8:	000838e5 	.word	0x000838e5
   800ac:	000838e5 	.word	0x000838e5
   800b0:	000838e5 	.word	0x000838e5
   800b4:	000838e5 	.word	0x000838e5
   800b8:	000838e5 	.word	0x000838e5
   800bc:	000838e5 	.word	0x000838e5
   800c0:	000838e5 	.word	0x000838e5
   800c4:	000838e5 	.word	0x000838e5
   800c8:	000838e5 	.word	0x000838e5
   800cc:	000838e5 	.word	0x000838e5
   800d0:	000838e5 	.word	0x000838e5
   800d4:	000838e5 	.word	0x000838e5
   800d8:	000838e5 	.word	0x000838e5
   800dc:	000838e5 	.word	0x000838e5
   800e0:	0008262d 	.word	0x0008262d
   800e4:	000838e5 	.word	0x000838e5
   800e8:	000838e5 	.word	0x000838e5
   800ec:	000838e5 	.word	0x000838e5
   800f0:	000838e5 	.word	0x000838e5

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200706a8 	.word	0x200706a8
   80110:	00000000 	.word	0x00000000
   80114:	00084028 	.word	0x00084028

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200706ac 	.word	0x200706ac
   80144:	00084028 	.word	0x00084028
   80148:	00084028 	.word	0x00084028
   8014c:	00000000 	.word	0x00000000

00080150 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   80150:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
   80152:	4b03      	ldr	r3, [pc, #12]	; (80160 <spi_enable_clock+0x10>)
   80154:	4298      	cmp	r0, r3
   80156:	d102      	bne.n	8015e <spi_enable_clock+0xe>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80158:	2018      	movs	r0, #24
   8015a:	4b02      	ldr	r3, [pc, #8]	; (80164 <spi_enable_clock+0x14>)
   8015c:	4798      	blx	r3
   8015e:	bd08      	pop	{r3, pc}
   80160:	40008000 	.word	0x40008000
   80164:	000837ad 	.word	0x000837ad

00080168 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   80168:	6843      	ldr	r3, [r0, #4]
   8016a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   8016e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   80170:	6843      	ldr	r3, [r0, #4]
   80172:	0409      	lsls	r1, r1, #16
   80174:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   80178:	430b      	orrs	r3, r1
   8017a:	6043      	str	r3, [r0, #4]
   8017c:	4770      	bx	lr
   8017e:	bf00      	nop

00080180 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   80180:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80182:	f643 2399 	movw	r3, #15001	; 0x3a99
   80186:	e001      	b.n	8018c <spi_read+0xc>
		if (!timeout--) {
   80188:	3b01      	subs	r3, #1
   8018a:	d00e      	beq.n	801aa <spi_read+0x2a>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   8018c:	6904      	ldr	r4, [r0, #16]
   8018e:	f014 0f01 	tst.w	r4, #1
   80192:	d0f9      	beq.n	80188 <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   80194:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80196:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80198:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   8019c:	bf1c      	itt	ne
   8019e:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   801a2:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   801a4:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   801a6:	2000      	movs	r0, #0
   801a8:	e000      	b.n	801ac <spi_read+0x2c>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
   801aa:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
   801ac:	bc10      	pop	{r4}
   801ae:	4770      	bx	lr

000801b0 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   801b0:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   801b2:	f643 2499 	movw	r4, #15001	; 0x3a99
   801b6:	e001      	b.n	801bc <spi_write+0xc>
		if (!timeout--) {
   801b8:	3c01      	subs	r4, #1
   801ba:	d011      	beq.n	801e0 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   801bc:	6905      	ldr	r5, [r0, #16]
   801be:	f015 0f02 	tst.w	r5, #2
   801c2:	d0f9      	beq.n	801b8 <spi_write+0x8>
   801c4:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   801c6:	f014 0f02 	tst.w	r4, #2
   801ca:	d006      	beq.n	801da <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   801cc:	0412      	lsls	r2, r2, #16
   801ce:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   801d2:	4311      	orrs	r1, r2
		if (uc_last) {
   801d4:	b10b      	cbz	r3, 801da <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
   801d6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   801da:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   801dc:	2000      	movs	r0, #0
   801de:	e000      	b.n	801e2 <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
   801e0:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
   801e2:	bc30      	pop	{r4, r5}
   801e4:	4770      	bx	lr
   801e6:	bf00      	nop

000801e8 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   801e8:	b132      	cbz	r2, 801f8 <spi_set_clock_polarity+0x10>
   801ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   801ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
   801f0:	f043 0301 	orr.w	r3, r3, #1
   801f4:	6303      	str	r3, [r0, #48]	; 0x30
   801f6:	4770      	bx	lr
   801f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   801fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
   801fe:	f023 0301 	bic.w	r3, r3, #1
   80202:	6303      	str	r3, [r0, #48]	; 0x30
   80204:	4770      	bx	lr
   80206:	bf00      	nop

00080208 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   80208:	b132      	cbz	r2, 80218 <spi_set_clock_phase+0x10>
   8020a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   8020e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80210:	f043 0302 	orr.w	r3, r3, #2
   80214:	6303      	str	r3, [r0, #48]	; 0x30
   80216:	4770      	bx	lr
   80218:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8021c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8021e:	f023 0302 	bic.w	r3, r3, #2
   80222:	6303      	str	r3, [r0, #48]	; 0x30
   80224:	4770      	bx	lr
   80226:	bf00      	nop

00080228 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80228:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   8022c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8022e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   80232:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80234:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80236:	431a      	orrs	r2, r3
   80238:	630a      	str	r2, [r1, #48]	; 0x30
   8023a:	4770      	bx	lr

0008023c <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
   8023c:	b16a      	cbz	r2, 8025a <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   8023e:	b410      	push	{r4}
   80240:	4614      	mov	r4, r2
   80242:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   80246:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80248:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   8024c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   8024e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80250:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   80254:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
   80256:	2000      	movs	r0, #0
   80258:	e002      	b.n	80260 <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
   8025a:	f04f 30ff 	mov.w	r0, #4294967295
   8025e:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
   80260:	bc10      	pop	{r4}
   80262:	4770      	bx	lr

00080264 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   80264:	b410      	push	{r4}
   80266:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   8026a:	6b08      	ldr	r0, [r1, #48]	; 0x30
   8026c:	b280      	uxth	r0, r0
   8026e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80270:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   80272:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
   80276:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8027a:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   8027c:	bc10      	pop	{r4}
   8027e:	4770      	bx	lr

00080280 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80280:	4b0f      	ldr	r3, [pc, #60]	; (802c0 <twi_set_speed+0x40>)
   80282:	4299      	cmp	r1, r3
   80284:	d819      	bhi.n	802ba <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80286:	0049      	lsls	r1, r1, #1
   80288:	fbb2 f2f1 	udiv	r2, r2, r1
   8028c:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8028e:	2aff      	cmp	r2, #255	; 0xff
   80290:	d907      	bls.n	802a2 <twi_set_speed+0x22>
   80292:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
   80294:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   80296:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80298:	2aff      	cmp	r2, #255	; 0xff
   8029a:	d903      	bls.n	802a4 <twi_set_speed+0x24>
   8029c:	2b07      	cmp	r3, #7
   8029e:	d1f9      	bne.n	80294 <twi_set_speed+0x14>
   802a0:	e000      	b.n	802a4 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   802a2:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   802a4:	0211      	lsls	r1, r2, #8
   802a6:	b289      	uxth	r1, r1
   802a8:	041b      	lsls	r3, r3, #16
   802aa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
   802ae:	430b      	orrs	r3, r1
   802b0:	b2d2      	uxtb	r2, r2
   802b2:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   802b4:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   802b6:	2000      	movs	r0, #0
   802b8:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   802ba:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   802bc:	4770      	bx	lr
   802be:	bf00      	nop
   802c0:	00061a80 	.word	0x00061a80

000802c4 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   802c4:	b538      	push	{r3, r4, r5, lr}
   802c6:	4604      	mov	r4, r0
   802c8:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   802ca:	f04f 33ff 	mov.w	r3, #4294967295
   802ce:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   802d0:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   802d2:	2380      	movs	r3, #128	; 0x80
   802d4:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   802d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   802d8:	2308      	movs	r3, #8
   802da:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   802dc:	2320      	movs	r3, #32
   802de:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   802e0:	2304      	movs	r3, #4
   802e2:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   802e4:	680a      	ldr	r2, [r1, #0]
   802e6:	6849      	ldr	r1, [r1, #4]
   802e8:	4b05      	ldr	r3, [pc, #20]	; (80300 <twi_master_init+0x3c>)
   802ea:	4798      	blx	r3
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
   802ec:	2801      	cmp	r0, #1
   802ee:	bf14      	ite	ne
   802f0:	2000      	movne	r0, #0
   802f2:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   802f4:	7a6b      	ldrb	r3, [r5, #9]
   802f6:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   802f8:	bf04      	itt	eq
   802fa:	2340      	moveq	r3, #64	; 0x40
   802fc:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   802fe:	bd38      	pop	{r3, r4, r5, pc}
   80300:	00080281 	.word	0x00080281

00080304 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   80304:	460a      	mov	r2, r1
   80306:	b159      	cbz	r1, 80320 <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
   80308:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
   8030a:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
   8030c:	bfc4      	itt	gt
   8030e:	7841      	ldrbgt	r1, [r0, #1]
   80310:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
   80314:	2a02      	cmp	r2, #2
   80316:	dd05      	ble.n	80324 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
   80318:	7880      	ldrb	r0, [r0, #2]
   8031a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   8031e:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80320:	2000      	movs	r0, #0
   80322:	4770      	bx	lr
   80324:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
   80326:	4770      	bx	lr

00080328 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
   8032c:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   8032e:	2c00      	cmp	r4, #0
   80330:	d045      	beq.n	803be <twi_master_read+0x96>
   80332:	460b      	mov	r3, r1
   80334:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
   80336:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   80338:	2000      	movs	r0, #0
   8033a:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8033c:	684a      	ldr	r2, [r1, #4]
   8033e:	0212      	lsls	r2, r2, #8
   80340:	f402 7240 	and.w	r2, r2, #768	; 0x300
   80344:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
   80348:	7c1a      	ldrb	r2, [r3, #16]
   8034a:	0412      	lsls	r2, r2, #16
   8034c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
   80350:	430a      	orrs	r2, r1
   80352:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   80354:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80356:	6859      	ldr	r1, [r3, #4]
   80358:	4618      	mov	r0, r3
   8035a:	4b27      	ldr	r3, [pc, #156]	; (803f8 <twi_master_read+0xd0>)
   8035c:	4798      	blx	r3
   8035e:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
   80360:	2c01      	cmp	r4, #1
   80362:	d104      	bne.n	8036e <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   80364:	2303      	movs	r3, #3
   80366:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
   80368:	f04f 0e01 	mov.w	lr, #1
   8036c:	e033      	b.n	803d6 <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   8036e:	2301      	movs	r3, #1
   80370:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
   80372:	f04f 0e00 	mov.w	lr, #0
   80376:	e02e      	b.n	803d6 <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
   80378:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   8037a:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   8037c:	f413 7f80 	tst.w	r3, #256	; 0x100
   80380:	d120      	bne.n	803c4 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   80382:	1e51      	subs	r1, r2, #1
   80384:	b30a      	cbz	r2, 803ca <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   80386:	2c01      	cmp	r4, #1
   80388:	d106      	bne.n	80398 <twi_master_read+0x70>
   8038a:	f1be 0f00 	cmp.w	lr, #0
   8038e:	d12f      	bne.n	803f0 <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
   80390:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
   80394:	46e6      	mov	lr, ip
   80396:	e02b      	b.n	803f0 <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
   80398:	f013 0f02 	tst.w	r3, #2
   8039c:	d005      	beq.n	803aa <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   8039e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   803a0:	7033      	strb	r3, [r6, #0]

		cnt--;
   803a2:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   803a4:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   803a6:	463a      	mov	r2, r7
   803a8:	e000      	b.n	803ac <twi_master_read+0x84>
   803aa:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   803ac:	2c00      	cmp	r4, #0
   803ae:	d1e4      	bne.n	8037a <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   803b0:	6a2b      	ldr	r3, [r5, #32]
   803b2:	f013 0f01 	tst.w	r3, #1
   803b6:	d0fb      	beq.n	803b0 <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
   803b8:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
   803ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   803be:	2001      	movs	r0, #1
   803c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   803c4:	2005      	movs	r0, #5
   803c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   803ca:	2009      	movs	r0, #9
   803cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   803d0:	2005      	movs	r0, #5
   803d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   803d6:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   803d8:	f413 7080 	ands.w	r0, r3, #256	; 0x100
   803dc:	d1f8      	bne.n	803d0 <twi_master_read+0xa8>
   803de:	f643 2197 	movw	r1, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   803e2:	f643 2798 	movw	r7, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   803e6:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
   803ea:	f04f 0c01 	mov.w	ip, #1
   803ee:	e7ca      	b.n	80386 <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
   803f0:	f013 0f02 	tst.w	r3, #2
   803f4:	d0c0      	beq.n	80378 <twi_master_read+0x50>
   803f6:	e7d2      	b.n	8039e <twi_master_read+0x76>
   803f8:	00080305 	.word	0x00080305

000803fc <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   803fc:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
   803fe:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
   80400:	2d00      	cmp	r5, #0
   80402:	d034      	beq.n	8046e <twi_master_write+0x72>
   80404:	460b      	mov	r3, r1
   80406:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
   80408:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   8040a:	2000      	movs	r0, #0
   8040c:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   8040e:	7c0a      	ldrb	r2, [r1, #16]
   80410:	0412      	lsls	r2, r2, #16
   80412:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
   80416:	685a      	ldr	r2, [r3, #4]
   80418:	0212      	lsls	r2, r2, #8
   8041a:	f402 7240 	and.w	r2, r2, #768	; 0x300
   8041e:	430a      	orrs	r2, r1
   80420:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   80422:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80424:	6859      	ldr	r1, [r3, #4]
   80426:	4618      	mov	r0, r3
   80428:	4b15      	ldr	r3, [pc, #84]	; (80480 <twi_master_write+0x84>)
   8042a:	4798      	blx	r3
   8042c:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   8042e:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
   80430:	f413 7f80 	tst.w	r3, #256	; 0x100
   80434:	d004      	beq.n	80440 <twi_master_write+0x44>
   80436:	e01c      	b.n	80472 <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80438:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
   8043a:	f413 7f80 	tst.w	r3, #256	; 0x100
   8043e:	d11a      	bne.n	80476 <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80440:	f013 0f04 	tst.w	r3, #4
   80444:	d003      	beq.n	8044e <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   80446:	7833      	ldrb	r3, [r6, #0]
   80448:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
   8044a:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   8044c:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   8044e:	2d00      	cmp	r5, #0
   80450:	d1f2      	bne.n	80438 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   80452:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
   80454:	f413 7080 	ands.w	r0, r3, #256	; 0x100
   80458:	d10f      	bne.n	8047a <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   8045a:	f013 0f04 	tst.w	r3, #4
   8045e:	d0f8      	beq.n	80452 <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   80460:	2302      	movs	r3, #2
   80462:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80464:	6a23      	ldr	r3, [r4, #32]
   80466:	f013 0f01 	tst.w	r3, #1
   8046a:	d0fb      	beq.n	80464 <twi_master_write+0x68>
   8046c:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   8046e:	2001      	movs	r0, #1
   80470:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80472:	2005      	movs	r0, #5
   80474:	bd70      	pop	{r4, r5, r6, pc}
   80476:	2005      	movs	r0, #5
   80478:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8047a:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   8047c:	bd70      	pop	{r4, r5, r6, pc}
   8047e:	bf00      	nop
   80480:	00080305 	.word	0x00080305

00080484 <iic_init>:
uint8_t  iic_read_buf[512];
uint8_t  iic_read_cnt;
uint32_t iic_read_flag;

void iic_init(void)
{
   80484:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_TWI1);
   80486:	2017      	movs	r0, #23
   80488:	4b09      	ldr	r3, [pc, #36]	; (804b0 <iic_init+0x2c>)
   8048a:	4798      	blx	r3
	
	opt.master_clk = sysclk_get_cpu_hz();
   8048c:	4909      	ldr	r1, [pc, #36]	; (804b4 <iic_init+0x30>)
   8048e:	4b0a      	ldr	r3, [pc, #40]	; (804b8 <iic_init+0x34>)
   80490:	600b      	str	r3, [r1, #0]
	opt.speed      = TWI_CLK;
   80492:	4b0a      	ldr	r3, [pc, #40]	; (804bc <iic_init+0x38>)
   80494:	604b      	str	r3, [r1, #4]
	opt.smbus      = 0;
   80496:	2200      	movs	r2, #0
   80498:	724a      	strb	r2, [r1, #9]
	
	packet_tx.chip        = 0;
   8049a:	4b09      	ldr	r3, [pc, #36]	; (804c0 <iic_init+0x3c>)
   8049c:	741a      	strb	r2, [r3, #16]
	packet_tx.addr_length = 0;
   8049e:	605a      	str	r2, [r3, #4]
	packet_tx.buffer      = NULL;
   804a0:	609a      	str	r2, [r3, #8]
	packet_tx.length      = 1;
   804a2:	2201      	movs	r2, #1
   804a4:	60da      	str	r2, [r3, #12]
	
	twi_master_init(TWI1, &opt);
   804a6:	4807      	ldr	r0, [pc, #28]	; (804c4 <iic_init+0x40>)
   804a8:	4b07      	ldr	r3, [pc, #28]	; (804c8 <iic_init+0x44>)
   804aa:	4798      	blx	r3
   804ac:	bd08      	pop	{r3, pc}
   804ae:	bf00      	nop
   804b0:	000837ad 	.word	0x000837ad
   804b4:	2007143c 	.word	0x2007143c
   804b8:	0501bd00 	.word	0x0501bd00
   804bc:	00061a80 	.word	0x00061a80
   804c0:	20071448 	.word	0x20071448
   804c4:	40090000 	.word	0x40090000
   804c8:	000802c5 	.word	0x000802c5

000804cc <Dec_to_addr>:
}

uint8_t Dec_to_addr(uint8_t *buf)
{
   804cc:	b410      	push	{r4}
   804ce:	b083      	sub	sp, #12
   804d0:	1e44      	subs	r4, r0, #1
   804d2:	a901      	add	r1, sp, #4
   804d4:	3001      	adds	r0, #1
	uint8_t data[2];
	uint8_t addr=0;
	
	for(uint32_t i=0;i<2;i++)
	{
		data[i] = *buf;
   804d6:	f814 2f01 	ldrb.w	r2, [r4, #1]!
		if(data[i] >= '0' && data[i] <= '9')
   804da:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   804de:	b2db      	uxtb	r3, r3
   804e0:	2b09      	cmp	r3, #9
   804e2:	d801      	bhi.n	804e8 <Dec_to_addr+0x1c>
		{
			data[i] = data[i] - '0';
   804e4:	700b      	strb	r3, [r1, #0]
   804e6:	e00e      	b.n	80506 <Dec_to_addr+0x3a>
		}
		else if(data[i] >= 'A' && data[i] <= 'F')
   804e8:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   804ec:	b2db      	uxtb	r3, r3
   804ee:	2b05      	cmp	r3, #5
   804f0:	d802      	bhi.n	804f8 <Dec_to_addr+0x2c>
		{
			data[i] = 10 + (data[i] - 'A');
   804f2:	3a37      	subs	r2, #55	; 0x37
   804f4:	700a      	strb	r2, [r1, #0]
   804f6:	e006      	b.n	80506 <Dec_to_addr+0x3a>
		}
		else if(data[i] >= 'a' && data[i] <= 'f')
   804f8:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   804fc:	b2db      	uxtb	r3, r3
   804fe:	2b05      	cmp	r3, #5
		{
			data[i] = 10 + (data[i] - 'a');
   80500:	bf98      	it	ls
   80502:	3a57      	subls	r2, #87	; 0x57
   80504:	700a      	strb	r2, [r1, #0]
   80506:	3101      	adds	r1, #1
uint8_t Dec_to_addr(uint8_t *buf)
{
	uint8_t data[2];
	uint8_t addr=0;
	
	for(uint32_t i=0;i<2;i++)
   80508:	4284      	cmp	r4, r0
   8050a:	d1e4      	bne.n	804d6 <Dec_to_addr+0xa>
			data[i] = 10 + (data[i] - 'a');
		}
		buf++;
	}
	
	addr = addr | (data[0]<<4);
   8050c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80510:	011b      	lsls	r3, r3, #4
   80512:	b2db      	uxtb	r3, r3
	addr = addr | (data[1]);
   80514:	f89d 0005 	ldrb.w	r0, [sp, #5]
	
	return addr;
}
   80518:	4318      	orrs	r0, r3
   8051a:	b003      	add	sp, #12
   8051c:	bc10      	pop	{r4}
   8051e:	4770      	bx	lr

00080520 <iic_write_oper>:

void iic_write_oper(void)
{
   80520:	b510      	push	{r4, lr}
   80522:	b082      	sub	sp, #8
	uint8_t buf;
	
	buf = udi_cdc_getc();
   80524:	4b08      	ldr	r3, [pc, #32]	; (80548 <iic_write_oper+0x28>)
   80526:	4798      	blx	r3
   80528:	ac02      	add	r4, sp, #8
   8052a:	f804 0d01 	strb.w	r0, [r4, #-1]!
	packet_tx.chip = Dec_to_addr(iic_address);
   8052e:	4807      	ldr	r0, [pc, #28]	; (8054c <iic_write_oper+0x2c>)
   80530:	4b07      	ldr	r3, [pc, #28]	; (80550 <iic_write_oper+0x30>)
   80532:	4798      	blx	r3
   80534:	4907      	ldr	r1, [pc, #28]	; (80554 <iic_write_oper+0x34>)
   80536:	7408      	strb	r0, [r1, #16]
	packet_tx.buffer = &buf;
   80538:	608c      	str	r4, [r1, #8]
	packet_tx.length = 1;
   8053a:	2301      	movs	r3, #1
   8053c:	60cb      	str	r3, [r1, #12]
	twi_master_write(TWI1, &packet_tx);
   8053e:	4806      	ldr	r0, [pc, #24]	; (80558 <iic_write_oper+0x38>)
   80540:	4b06      	ldr	r3, [pc, #24]	; (8055c <iic_write_oper+0x3c>)
   80542:	4798      	blx	r3
}
   80544:	b002      	add	sp, #8
   80546:	bd10      	pop	{r4, pc}
   80548:	00081485 	.word	0x00081485
   8054c:	20071464 	.word	0x20071464
   80550:	000804cd 	.word	0x000804cd
   80554:	20071448 	.word	0x20071448
   80558:	40090000 	.word	0x40090000
   8055c:	000803fd 	.word	0x000803fd

00080560 <iic_read_count>:
	buf_clear_data(iic_read_buf);
	iic_read_cnt = 0;
}

void iic_read_count(void)
{
   80560:	b510      	push	{r4, lr}
	int str;
	
	if(iic_read_cnt >= 3)
   80562:	4b08      	ldr	r3, [pc, #32]	; (80584 <iic_read_count+0x24>)
   80564:	781c      	ldrb	r4, [r3, #0]
   80566:	2c02      	cmp	r4, #2
   80568:	d902      	bls.n	80570 <iic_read_count+0x10>
	{
		str = udi_cdc_getc();
   8056a:	4b07      	ldr	r3, [pc, #28]	; (80588 <iic_read_count+0x28>)
   8056c:	4798      	blx	r3
		return;
   8056e:	bd10      	pop	{r4, pc}
	}
	else
	{
		iic_read_buf[iic_read_cnt] = udi_cdc_getc();
   80570:	4b05      	ldr	r3, [pc, #20]	; (80588 <iic_read_count+0x28>)
   80572:	4798      	blx	r3
   80574:	4b05      	ldr	r3, [pc, #20]	; (8058c <iic_read_count+0x2c>)
   80576:	5518      	strb	r0, [r3, r4]
		iic_read_cnt++;
   80578:	4a02      	ldr	r2, [pc, #8]	; (80584 <iic_read_count+0x24>)
   8057a:	7813      	ldrb	r3, [r2, #0]
   8057c:	3301      	adds	r3, #1
   8057e:	7013      	strb	r3, [r2, #0]
   80580:	bd10      	pop	{r4, pc}
   80582:	bf00      	nop
   80584:	20071460 	.word	0x20071460
   80588:	00081485 	.word	0x00081485
   8058c:	20071468 	.word	0x20071468

00080590 <str_to_dec>:
	}
}

uint32_t str_to_dec(uint8_t *buf)
{
   80590:	b510      	push	{r4, lr}
   80592:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   80596:	4604      	mov	r4, r0
	uint8_t i=0,j=0;
	uint8_t iic_buf[512]={0};
   80598:	f44f 7200 	mov.w	r2, #512	; 0x200
   8059c:	2100      	movs	r1, #0
   8059e:	4668      	mov	r0, sp
   805a0:	4b22      	ldr	r3, [pc, #136]	; (8062c <str_to_dec+0x9c>)
   805a2:	4798      	blx	r3
	uint32_t data=0;
	
	while(*buf != '\0')
   805a4:	7822      	ldrb	r2, [r4, #0]
   805a6:	2a00      	cmp	r2, #0
   805a8:	d03b      	beq.n	80622 <str_to_dec+0x92>
	{
		if(*buf >= '0' && *buf <= '9')
   805aa:	3a30      	subs	r2, #48	; 0x30
   805ac:	b2d2      	uxtb	r2, r2
   805ae:	2a09      	cmp	r2, #9
   805b0:	bf88      	it	hi
   805b2:	2000      	movhi	r0, #0
   805b4:	d836      	bhi.n	80624 <str_to_dec+0x94>
   805b6:	e004      	b.n	805c2 <str_to_dec+0x32>
   805b8:	3a30      	subs	r2, #48	; 0x30
   805ba:	b2d2      	uxtb	r2, r2
   805bc:	2a09      	cmp	r2, #9
   805be:	d901      	bls.n	805c4 <str_to_dec+0x34>
   805c0:	e008      	b.n	805d4 <str_to_dec+0x44>
   805c2:	2300      	movs	r3, #0
		{
			iic_buf[i] = *buf - '0';
   805c4:	f80d 2003 	strb.w	r2, [sp, r3]
			i++;
   805c8:	3301      	adds	r3, #1
   805ca:	b2db      	uxtb	r3, r3
{
	uint8_t i=0,j=0;
	uint8_t iic_buf[512]={0};
	uint32_t data=0;
	
	while(*buf != '\0')
   805cc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   805d0:	2a00      	cmp	r2, #0
   805d2:	d1f1      	bne.n	805b8 <str_to_dec+0x28>
		{
			break;
		}	
	}
	
	while(i > 0)
   805d4:	2000      	movs	r0, #0
   805d6:	b32b      	cbz	r3, 80624 <str_to_dec+0x94>
   805d8:	2200      	movs	r2, #0
   805da:	4610      	mov	r0, r2
	{
		if(i==3)
		{
			data += (iic_buf[j] * 100);
   805dc:	2164      	movs	r1, #100	; 0x64
		}	
	}
	
	while(i > 0)
	{
		if(i==3)
   805de:	2b03      	cmp	r3, #3
   805e0:	d105      	bne.n	805ee <str_to_dec+0x5e>
		{
			data += (iic_buf[j] * 100);
   805e2:	b2d4      	uxtb	r4, r2
   805e4:	f81d 4004 	ldrb.w	r4, [sp, r4]
   805e8:	fb01 0004 	mla	r0, r1, r4, r0
   805ec:	e013      	b.n	80616 <str_to_dec+0x86>
		}
		if(i==2)
   805ee:	2b02      	cmp	r3, #2
   805f0:	d10a      	bne.n	80608 <str_to_dec+0x78>
		{
			data += (iic_buf[j] * 10);
   805f2:	b2d4      	uxtb	r4, r2
   805f4:	f81d 4004 	ldrb.w	r4, [sp, r4]
   805f8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   805fc:	eb00 0044 	add.w	r0, r0, r4, lsl #1
		if(i==1)
		{
			data += iic_buf[j];
		}
		j++;
		i--;
   80600:	3b01      	subs	r3, #1
   80602:	b2db      	uxtb	r3, r3
   80604:	3201      	adds	r2, #1
   80606:	e7ea      	b.n	805de <str_to_dec+0x4e>
		}
		if(i==2)
		{
			data += (iic_buf[j] * 10);
		}
		if(i==1)
   80608:	2b01      	cmp	r3, #1
   8060a:	d104      	bne.n	80616 <str_to_dec+0x86>
		{
			data += iic_buf[j];
   8060c:	b2d2      	uxtb	r2, r2
   8060e:	f81d 3002 	ldrb.w	r3, [sp, r2]
   80612:	4418      	add	r0, r3
   80614:	e006      	b.n	80624 <str_to_dec+0x94>
		}
		j++;
		i--;
   80616:	3b01      	subs	r3, #1
   80618:	3201      	adds	r2, #1
		{
			break;
		}	
	}
	
	while(i > 0)
   8061a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   8061e:	d1de      	bne.n	805de <str_to_dec+0x4e>
   80620:	e000      	b.n	80624 <str_to_dec+0x94>
{
	uint8_t i=0,j=0;
	uint8_t iic_buf[512]={0};
	uint32_t data=0;
	
	while(*buf != '\0')
   80622:	2000      	movs	r0, #0
		j++;
		i--;
	}
	
	return data;
}
   80624:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   80628:	bd10      	pop	{r4, pc}
   8062a:	bf00      	nop
   8062c:	00083c69 	.word	0x00083c69

00080630 <iic_read_oper>:
	packet_tx.length = 1;
	twi_master_write(TWI1, &packet_tx);
}

void iic_read_oper(void)
{
   80630:	b530      	push	{r4, r5, lr}
   80632:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	uint8_t buf[512]={0};
   80636:	f44f 7200 	mov.w	r2, #512	; 0x200
   8063a:	2100      	movs	r1, #0
   8063c:	4668      	mov	r0, sp
   8063e:	4b17      	ldr	r3, [pc, #92]	; (8069c <iic_read_oper+0x6c>)
   80640:	4798      	blx	r3
	
	packet_rx.chip  = Dec_to_addr(iic_address);
   80642:	4817      	ldr	r0, [pc, #92]	; (806a0 <iic_read_oper+0x70>)
   80644:	4b17      	ldr	r3, [pc, #92]	; (806a4 <iic_read_oper+0x74>)
   80646:	4798      	blx	r3
   80648:	4b17      	ldr	r3, [pc, #92]	; (806a8 <iic_read_oper+0x78>)
   8064a:	7418      	strb	r0, [r3, #16]
	packet_rx.buffer = buf;
   8064c:	f8c3 d008 	str.w	sp, [r3, #8]
	packet_rx.length = str_to_dec(iic_read_buf);
   80650:	4816      	ldr	r0, [pc, #88]	; (806ac <iic_read_oper+0x7c>)
   80652:	4b17      	ldr	r3, [pc, #92]	; (806b0 <iic_read_oper+0x80>)
   80654:	4798      	blx	r3
	
	if(packet_rx.length > 512)
   80656:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8065a:	d802      	bhi.n	80662 <iic_read_oper+0x32>
{
	uint8_t buf[512]={0};
	
	packet_rx.chip  = Dec_to_addr(iic_address);
	packet_rx.buffer = buf;
	packet_rx.length = str_to_dec(iic_read_buf);
   8065c:	4b12      	ldr	r3, [pc, #72]	; (806a8 <iic_read_oper+0x78>)
   8065e:	60d8      	str	r0, [r3, #12]
   80660:	e003      	b.n	8066a <iic_read_oper+0x3a>
	
	if(packet_rx.length > 512)
	{
		packet_rx.length = 512;
   80662:	f44f 7200 	mov.w	r2, #512	; 0x200
   80666:	4b10      	ldr	r3, [pc, #64]	; (806a8 <iic_read_oper+0x78>)
   80668:	60da      	str	r2, [r3, #12]
	}
	
	twi_master_read(TWI1,&packet_rx);
   8066a:	4d0f      	ldr	r5, [pc, #60]	; (806a8 <iic_read_oper+0x78>)
   8066c:	4629      	mov	r1, r5
   8066e:	4811      	ldr	r0, [pc, #68]	; (806b4 <iic_read_oper+0x84>)
   80670:	4b11      	ldr	r3, [pc, #68]	; (806b8 <iic_read_oper+0x88>)
   80672:	4798      	blx	r3
	udi_cdc_write_buf("IIC_1 ",6);
   80674:	2106      	movs	r1, #6
   80676:	4811      	ldr	r0, [pc, #68]	; (806bc <iic_read_oper+0x8c>)
   80678:	4c11      	ldr	r4, [pc, #68]	; (806c0 <iic_read_oper+0x90>)
   8067a:	47a0      	blx	r4
	udi_cdc_write_buf(buf,packet_rx.length);
   8067c:	68e9      	ldr	r1, [r5, #12]
   8067e:	4668      	mov	r0, sp
   80680:	47a0      	blx	r4
	udi_cdc_putc('\n');
   80682:	200a      	movs	r0, #10
   80684:	4b0f      	ldr	r3, [pc, #60]	; (806c4 <iic_read_oper+0x94>)
   80686:	4798      	blx	r3
	
	buf_clear_data(iic_read_buf);
   80688:	4808      	ldr	r0, [pc, #32]	; (806ac <iic_read_oper+0x7c>)
   8068a:	4b0f      	ldr	r3, [pc, #60]	; (806c8 <iic_read_oper+0x98>)
   8068c:	4798      	blx	r3
	iic_read_cnt = 0;
   8068e:	2200      	movs	r2, #0
   80690:	4b0e      	ldr	r3, [pc, #56]	; (806cc <iic_read_oper+0x9c>)
   80692:	701a      	strb	r2, [r3, #0]
}
   80694:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
   80698:	bd30      	pop	{r4, r5, pc}
   8069a:	bf00      	nop
   8069c:	00083c69 	.word	0x00083c69
   806a0:	20071464 	.word	0x20071464
   806a4:	000804cd 	.word	0x000804cd
   806a8:	20071428 	.word	0x20071428
   806ac:	20071468 	.word	0x20071468
   806b0:	00080591 	.word	0x00080591
   806b4:	40090000 	.word	0x40090000
   806b8:	00080329 	.word	0x00080329
   806bc:	00083fac 	.word	0x00083fac
   806c0:	0008169d 	.word	0x0008169d
   806c4:	000815d5 	.word	0x000815d5
   806c8:	000809e9 	.word	0x000809e9
   806cc:	20071460 	.word	0x20071460

000806d0 <SPI0_Handler>:
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
   806d0:	4b21      	ldr	r3, [pc, #132]	; (80758 <SPI0_Handler+0x88>)
   806d2:	691b      	ldr	r3, [r3, #16]
{
	uint16_t uc_pcs;
	uint8_t data;
	uint8_t value;

	if (spi_read_status(SPI0) & SPI_SR_RDRF)
   806d4:	f013 0f01 	tst.w	r3, #1
   806d8:	d03c      	beq.n	80754 <SPI0_Handler+0x84>
uint32_t spi_timeout_cnt;
uint8_t spi_rece_buf[512]={0};
uint32_t spi_rece_cnt=0;

void SPI0_Handler(void)
{
   806da:	b570      	push	{r4, r5, r6, lr}
   806dc:	b082      	sub	sp, #8
	uint8_t data;
	uint8_t value;

	if (spi_read_status(SPI0) & SPI_SR_RDRF)
	{
		spi_timeout_cnt = 1;
   806de:	2201      	movs	r2, #1
   806e0:	4b1e      	ldr	r3, [pc, #120]	; (8075c <SPI0_Handler+0x8c>)
   806e2:	601a      	str	r2, [r3, #0]
		spi_read(SPI0,&value,&uc_pcs);
   806e4:	f10d 0206 	add.w	r2, sp, #6
   806e8:	f10d 0105 	add.w	r1, sp, #5
   806ec:	481a      	ldr	r0, [pc, #104]	; (80758 <SPI0_Handler+0x88>)
   806ee:	4b1c      	ldr	r3, [pc, #112]	; (80760 <SPI0_Handler+0x90>)
   806f0:	4798      	blx	r3
		if(value == 0 && spi_rece_cnt == 0)
   806f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
   806f6:	b932      	cbnz	r2, 80706 <SPI0_Handler+0x36>
   806f8:	4b1a      	ldr	r3, [pc, #104]	; (80764 <SPI0_Handler+0x94>)
   806fa:	681b      	ldr	r3, [r3, #0]
   806fc:	b91b      	cbnz	r3, 80706 <SPI0_Handler+0x36>
		{
			spi_read_again_flag = 1;
   806fe:	2201      	movs	r2, #1
   80700:	4b19      	ldr	r3, [pc, #100]	; (80768 <SPI0_Handler+0x98>)
   80702:	701a      	strb	r2, [r3, #0]
			return;
   80704:	e024      	b.n	80750 <SPI0_Handler+0x80>
		}
		//if(value == 0 && spi_rece_cnt == 1)
		//{
		//	spi_read_again_flag = 0;
		//}
		if(spi_rece_cnt == sizeof(spi_rece_buf))
   80706:	4b17      	ldr	r3, [pc, #92]	; (80764 <SPI0_Handler+0x94>)
   80708:	681b      	ldr	r3, [r3, #0]
   8070a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8070e:	d11a      	bne.n	80746 <SPI0_Handler+0x76>
		{
			if(spi_rece_buf[0] != 0 && !spi_buf_full_flag)
   80710:	4b16      	ldr	r3, [pc, #88]	; (8076c <SPI0_Handler+0x9c>)
   80712:	781b      	ldrb	r3, [r3, #0]
   80714:	b133      	cbz	r3, 80724 <SPI0_Handler+0x54>
   80716:	4b16      	ldr	r3, [pc, #88]	; (80770 <SPI0_Handler+0xa0>)
   80718:	781b      	ldrb	r3, [r3, #0]
   8071a:	b91b      	cbnz	r3, 80724 <SPI0_Handler+0x54>
			{
				udi_cdc_write_buf("SPI_0 ",6);
   8071c:	2106      	movs	r1, #6
   8071e:	4815      	ldr	r0, [pc, #84]	; (80774 <SPI0_Handler+0xa4>)
   80720:	4b15      	ldr	r3, [pc, #84]	; (80778 <SPI0_Handler+0xa8>)
   80722:	4798      	blx	r3
			}
			spi_buf_full_flag=1;
   80724:	2601      	movs	r6, #1
   80726:	4b12      	ldr	r3, [pc, #72]	; (80770 <SPI0_Handler+0xa0>)
   80728:	701e      	strb	r6, [r3, #0]
			udi_cdc_write_buf(spi_rece_buf,spi_rece_cnt);
   8072a:	4d0e      	ldr	r5, [pc, #56]	; (80764 <SPI0_Handler+0x94>)
   8072c:	4c0f      	ldr	r4, [pc, #60]	; (8076c <SPI0_Handler+0x9c>)
   8072e:	6829      	ldr	r1, [r5, #0]
   80730:	4620      	mov	r0, r4
   80732:	4b11      	ldr	r3, [pc, #68]	; (80778 <SPI0_Handler+0xa8>)
   80734:	4798      	blx	r3
			buf_clear_data(spi_rece_buf);
   80736:	4620      	mov	r0, r4
   80738:	4b10      	ldr	r3, [pc, #64]	; (8077c <SPI0_Handler+0xac>)
   8073a:	4798      	blx	r3
			spi_rece_cnt=0;
			spi_rece_buf[spi_rece_cnt] = value;
   8073c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   80740:	7023      	strb	r3, [r4, #0]
			spi_rece_cnt++;
   80742:	602e      	str	r6, [r5, #0]
   80744:	e004      	b.n	80750 <SPI0_Handler+0x80>
		}
		else 
		{
			spi_rece_buf[spi_rece_cnt] = value;
   80746:	4909      	ldr	r1, [pc, #36]	; (8076c <SPI0_Handler+0x9c>)
   80748:	54ca      	strb	r2, [r1, r3]
			spi_rece_cnt++;
   8074a:	3301      	adds	r3, #1
   8074c:	4a05      	ldr	r2, [pc, #20]	; (80764 <SPI0_Handler+0x94>)
   8074e:	6013      	str	r3, [r2, #0]
		}
		return;
	}
}
   80750:	b002      	add	sp, #8
   80752:	bd70      	pop	{r4, r5, r6, pc}
   80754:	4770      	bx	lr
   80756:	bf00      	nop
   80758:	40008000 	.word	0x40008000
   8075c:	20071668 	.word	0x20071668
   80760:	00080181 	.word	0x00080181
   80764:	200708c8 	.word	0x200708c8
   80768:	2007166d 	.word	0x2007166d
   8076c:	200706c8 	.word	0x200706c8
   80770:	2007166c 	.word	0x2007166c
   80774:	00083fb4 	.word	0x00083fb4
   80778:	0008169d 	.word	0x0008169d
   8077c:	000809e9 	.word	0x000809e9

00080780 <spi_data_to_pc>:

void spi_data_to_pc(void)
{
   80780:	b570      	push	{r4, r5, r6, lr}
	if(!udi_cdc_is_tx_ready())
   80782:	4b28      	ldr	r3, [pc, #160]	; (80824 <spi_data_to_pc+0xa4>)
   80784:	4798      	blx	r3
   80786:	b910      	cbnz	r0, 8078e <spi_data_to_pc+0xe>
	{
		udi_cdc_signal_overrun();
   80788:	4b27      	ldr	r3, [pc, #156]	; (80828 <spi_data_to_pc+0xa8>)
   8078a:	4798      	blx	r3
   8078c:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		if((spi_rece_buf[0] != 0) && spi_buf_full_flag)
   8078e:	4b27      	ldr	r3, [pc, #156]	; (8082c <spi_data_to_pc+0xac>)
   80790:	781b      	ldrb	r3, [r3, #0]
   80792:	2b00      	cmp	r3, #0
   80794:	d037      	beq.n	80806 <spi_data_to_pc+0x86>
   80796:	4b26      	ldr	r3, [pc, #152]	; (80830 <spi_data_to_pc+0xb0>)
   80798:	781b      	ldrb	r3, [r3, #0]
   8079a:	b1cb      	cbz	r3, 807d0 <spi_data_to_pc+0x50>
		{
			if(spi_read_again_flag)
   8079c:	4b25      	ldr	r3, [pc, #148]	; (80834 <spi_data_to_pc+0xb4>)
   8079e:	781b      	ldrb	r3, [r3, #0]
   807a0:	b143      	cbz	r3, 807b4 <spi_data_to_pc+0x34>
			{
				spi_read_again_flag = 0;
   807a2:	2100      	movs	r1, #0
   807a4:	4b23      	ldr	r3, [pc, #140]	; (80834 <spi_data_to_pc+0xb4>)
   807a6:	7019      	strb	r1, [r3, #0]
				spi_write(SPI0,0,0,0);
   807a8:	460b      	mov	r3, r1
   807aa:	460a      	mov	r2, r1
   807ac:	4822      	ldr	r0, [pc, #136]	; (80838 <spi_data_to_pc+0xb8>)
   807ae:	4c23      	ldr	r4, [pc, #140]	; (8083c <spi_data_to_pc+0xbc>)
   807b0:	47a0      	blx	r4
				return;
   807b2:	bd70      	pop	{r4, r5, r6, pc}
			}
			udi_cdc_write_buf(spi_rece_buf,spi_rece_cnt);
   807b4:	4c22      	ldr	r4, [pc, #136]	; (80840 <spi_data_to_pc+0xc0>)
   807b6:	4e1d      	ldr	r6, [pc, #116]	; (8082c <spi_data_to_pc+0xac>)
   807b8:	6821      	ldr	r1, [r4, #0]
   807ba:	4630      	mov	r0, r6
   807bc:	4b21      	ldr	r3, [pc, #132]	; (80844 <spi_data_to_pc+0xc4>)
   807be:	4798      	blx	r3
			spi_buf_full_flag = 0;
   807c0:	2500      	movs	r5, #0
   807c2:	4b1b      	ldr	r3, [pc, #108]	; (80830 <spi_data_to_pc+0xb0>)
   807c4:	701d      	strb	r5, [r3, #0]
			buf_clear_data(spi_rece_buf);
   807c6:	4630      	mov	r0, r6
   807c8:	4b1f      	ldr	r3, [pc, #124]	; (80848 <spi_data_to_pc+0xc8>)
   807ca:	4798      	blx	r3
			spi_rece_cnt = 0;
   807cc:	6025      	str	r5, [r4, #0]
			return;
   807ce:	bd70      	pop	{r4, r5, r6, pc}
		}
		if((spi_rece_buf[0] != 0) && !spi_buf_full_flag)
		{
			if(spi_read_again_flag)
   807d0:	4b18      	ldr	r3, [pc, #96]	; (80834 <spi_data_to_pc+0xb4>)
   807d2:	781b      	ldrb	r3, [r3, #0]
   807d4:	b143      	cbz	r3, 807e8 <spi_data_to_pc+0x68>
			{
				spi_read_again_flag = 0;
   807d6:	2100      	movs	r1, #0
   807d8:	4b16      	ldr	r3, [pc, #88]	; (80834 <spi_data_to_pc+0xb4>)
   807da:	7019      	strb	r1, [r3, #0]
				spi_write(SPI0,0,0,0);
   807dc:	460b      	mov	r3, r1
   807de:	460a      	mov	r2, r1
   807e0:	4815      	ldr	r0, [pc, #84]	; (80838 <spi_data_to_pc+0xb8>)
   807e2:	4c16      	ldr	r4, [pc, #88]	; (8083c <spi_data_to_pc+0xbc>)
   807e4:	47a0      	blx	r4
				return;
   807e6:	bd70      	pop	{r4, r5, r6, pc}
			}
			udi_cdc_write_buf("SPI_0 ",6);
   807e8:	2106      	movs	r1, #6
   807ea:	4818      	ldr	r0, [pc, #96]	; (8084c <spi_data_to_pc+0xcc>)
   807ec:	4e15      	ldr	r6, [pc, #84]	; (80844 <spi_data_to_pc+0xc4>)
   807ee:	47b0      	blx	r6
			udi_cdc_write_buf(spi_rece_buf,spi_rece_cnt);
   807f0:	4c13      	ldr	r4, [pc, #76]	; (80840 <spi_data_to_pc+0xc0>)
   807f2:	4d0e      	ldr	r5, [pc, #56]	; (8082c <spi_data_to_pc+0xac>)
   807f4:	6821      	ldr	r1, [r4, #0]
   807f6:	4628      	mov	r0, r5
   807f8:	47b0      	blx	r6
			buf_clear_data(spi_rece_buf);
   807fa:	4628      	mov	r0, r5
   807fc:	4b12      	ldr	r3, [pc, #72]	; (80848 <spi_data_to_pc+0xc8>)
   807fe:	4798      	blx	r3
			spi_rece_cnt = 0;
   80800:	2300      	movs	r3, #0
   80802:	6023      	str	r3, [r4, #0]
			return;
   80804:	bd70      	pop	{r4, r5, r6, pc}
		}
		if(spi_read_again_flag && spi_rece_cnt != 0)
   80806:	4b0b      	ldr	r3, [pc, #44]	; (80834 <spi_data_to_pc+0xb4>)
   80808:	781b      	ldrb	r3, [r3, #0]
   8080a:	b153      	cbz	r3, 80822 <spi_data_to_pc+0xa2>
   8080c:	4b0c      	ldr	r3, [pc, #48]	; (80840 <spi_data_to_pc+0xc0>)
   8080e:	681b      	ldr	r3, [r3, #0]
   80810:	b13b      	cbz	r3, 80822 <spi_data_to_pc+0xa2>
		{
			spi_read_again_flag = 0;
   80812:	2100      	movs	r1, #0
   80814:	4b07      	ldr	r3, [pc, #28]	; (80834 <spi_data_to_pc+0xb4>)
   80816:	7019      	strb	r1, [r3, #0]
			spi_write(SPI0,0,0,0);
   80818:	460b      	mov	r3, r1
   8081a:	460a      	mov	r2, r1
   8081c:	4806      	ldr	r0, [pc, #24]	; (80838 <spi_data_to_pc+0xb8>)
   8081e:	4c07      	ldr	r4, [pc, #28]	; (8083c <spi_data_to_pc+0xbc>)
   80820:	47a0      	blx	r4
   80822:	bd70      	pop	{r4, r5, r6, pc}
   80824:	00081529 	.word	0x00081529
   80828:	00081181 	.word	0x00081181
   8082c:	200706c8 	.word	0x200706c8
   80830:	2007166c 	.word	0x2007166c
   80834:	2007166d 	.word	0x2007166d
   80838:	40008000 	.word	0x40008000
   8083c:	000801b1 	.word	0x000801b1
   80840:	200708c8 	.word	0x200708c8
   80844:	0008169d 	.word	0x0008169d
   80848:	000809e9 	.word	0x000809e9
   8084c:	00083fb4 	.word	0x00083fb4

00080850 <spi_master_init>:
	spi_enable_interrupt(SPI0, SPI_IER_RDRF);
	spi_enable(SPI0);
}

void spi_master_init(void)
{
   80850:	b538      	push	{r3, r4, r5, lr}
	spi_enable_clock(SPI0);
   80852:	4c1a      	ldr	r4, [pc, #104]	; (808bc <spi_master_init+0x6c>)
   80854:	4620      	mov	r0, r4
   80856:	4b1a      	ldr	r3, [pc, #104]	; (808c0 <spi_master_init+0x70>)
   80858:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   8085a:	2302      	movs	r3, #2
   8085c:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   8085e:	2380      	movs	r3, #128	; 0x80
   80860:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80862:	6863      	ldr	r3, [r4, #4]
   80864:	f043 0301 	orr.w	r3, r3, #1
   80868:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
   8086a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   8086e:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80870:	6863      	ldr	r3, [r4, #4]
   80872:	f043 0310 	orr.w	r3, r3, #16
   80876:	6063      	str	r3, [r4, #4]
	spi_disable(SPI0);
	spi_reset(SPI0);
	spi_set_master_mode(SPI0);
	spi_set_lastxfer(SPI0);
	spi_disable_mode_fault_detect(SPI0);
	spi_set_peripheral_chip_select_value(SPI0,spi_get_pcs(0));
   80878:	210e      	movs	r1, #14
   8087a:	4620      	mov	r0, r4
   8087c:	4b11      	ldr	r3, [pc, #68]	; (808c4 <spi_master_init+0x74>)
   8087e:	4798      	blx	r3
	spi_set_clock_polarity(SPI0,0,0);
   80880:	2200      	movs	r2, #0
   80882:	4611      	mov	r1, r2
   80884:	4620      	mov	r0, r4
   80886:	4b10      	ldr	r3, [pc, #64]	; (808c8 <spi_master_init+0x78>)
   80888:	4798      	blx	r3
	spi_set_clock_phase(SPI0,0,0);
   8088a:	2200      	movs	r2, #0
   8088c:	4611      	mov	r1, r2
   8088e:	4620      	mov	r0, r4
   80890:	4b0e      	ldr	r3, [pc, #56]	; (808cc <spi_master_init+0x7c>)
   80892:	4798      	blx	r3
	
	spi_set_bits_per_transfer(SPI0,0,SPI_CSR_BITS_8_BIT);
   80894:	2200      	movs	r2, #0
   80896:	4611      	mov	r1, r2
   80898:	4620      	mov	r0, r4
   8089a:	4b0d      	ldr	r3, [pc, #52]	; (808d0 <spi_master_init+0x80>)
   8089c:	4798      	blx	r3
	spi_set_baudrate_div(SPI0,0,sysclk_get_peripheral_hz()/gs_ul_spi_clock);
   8089e:	22a8      	movs	r2, #168	; 0xa8
   808a0:	2100      	movs	r1, #0
   808a2:	4620      	mov	r0, r4
   808a4:	4b0b      	ldr	r3, [pc, #44]	; (808d4 <spi_master_init+0x84>)
   808a6:	4798      	blx	r3
	spi_set_transfer_delay(SPI0,0,0xF0,0x10);
   808a8:	2310      	movs	r3, #16
   808aa:	22f0      	movs	r2, #240	; 0xf0
   808ac:	2100      	movs	r1, #0
   808ae:	4620      	mov	r0, r4
   808b0:	4d09      	ldr	r5, [pc, #36]	; (808d8 <spi_master_init+0x88>)
   808b2:	47a8      	blx	r5
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
   808b4:	2301      	movs	r3, #1
   808b6:	6163      	str	r3, [r4, #20]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
   808b8:	6023      	str	r3, [r4, #0]
   808ba:	bd38      	pop	{r3, r4, r5, pc}
   808bc:	40008000 	.word	0x40008000
   808c0:	00080151 	.word	0x00080151
   808c4:	00080169 	.word	0x00080169
   808c8:	000801e9 	.word	0x000801e9
   808cc:	00080209 	.word	0x00080209
   808d0:	00080229 	.word	0x00080229
   808d4:	0008023d 	.word	0x0008023d
   808d8:	00080265 	.word	0x00080265

000808dc <spi_config>:
	
	
}
 
void spi_config(void)
{
   808dc:	b508      	push	{r3, lr}
	spi_master_init();
   808de:	4b07      	ldr	r3, [pc, #28]	; (808fc <spi_config+0x20>)
   808e0:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   808e2:	4b07      	ldr	r3, [pc, #28]	; (80900 <spi_config+0x24>)
   808e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   808e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   808ec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   808f0:	2130      	movs	r1, #48	; 0x30
   808f2:	f883 1318 	strb.w	r1, [r3, #792]	; 0x318

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   808f6:	601a      	str	r2, [r3, #0]
   808f8:	bd08      	pop	{r3, pc}
   808fa:	bf00      	nop
   808fc:	00080851 	.word	0x00080851
   80900:	e000e100 	.word	0xe000e100

00080904 <Rece_data_deal>:

extern uint8_t iic_address_cnt;
extern uint32_t iic_read_flag;

void Rece_data_deal(const uint8_t *head)
{
   80904:	b510      	push	{r4, lr}
   80906:	4604      	mov	r4, r0
	int str;
	
	if(strcmp(head,"UART0 ")==0)
   80908:	4928      	ldr	r1, [pc, #160]	; (809ac <Rece_data_deal+0xa8>)
   8090a:	4b29      	ldr	r3, [pc, #164]	; (809b0 <Rece_data_deal+0xac>)
   8090c:	4798      	blx	r3
   8090e:	b930      	cbnz	r0, 8091e <Rece_data_deal+0x1a>
	{
		usart_write(USART0,udi_cdc_getc());
   80910:	4b28      	ldr	r3, [pc, #160]	; (809b4 <Rece_data_deal+0xb0>)
   80912:	4798      	blx	r3
   80914:	4601      	mov	r1, r0
   80916:	4828      	ldr	r0, [pc, #160]	; (809b8 <Rece_data_deal+0xb4>)
   80918:	4b28      	ldr	r3, [pc, #160]	; (809bc <Rece_data_deal+0xb8>)
   8091a:	4798      	blx	r3
   8091c:	bd10      	pop	{r4, pc}
	}
	else if(strcmp(head,"SPI_0 ")==0)
   8091e:	4928      	ldr	r1, [pc, #160]	; (809c0 <Rece_data_deal+0xbc>)
   80920:	4620      	mov	r0, r4
   80922:	4b23      	ldr	r3, [pc, #140]	; (809b0 <Rece_data_deal+0xac>)
   80924:	4798      	blx	r3
   80926:	b960      	cbnz	r0, 80942 <Rece_data_deal+0x3e>
	{
		str = udi_cdc_getc();
   80928:	4b22      	ldr	r3, [pc, #136]	; (809b4 <Rece_data_deal+0xb0>)
   8092a:	4798      	blx	r3
		spi_write(SPI0,str,0,0);
   8092c:	2300      	movs	r3, #0
   8092e:	461a      	mov	r2, r3
   80930:	b281      	uxth	r1, r0
   80932:	4824      	ldr	r0, [pc, #144]	; (809c4 <Rece_data_deal+0xc0>)
   80934:	4c24      	ldr	r4, [pc, #144]	; (809c8 <Rece_data_deal+0xc4>)
   80936:	47a0      	blx	r4
		delay_ms(1);
   80938:	f241 7070 	movw	r0, #6000	; 0x1770
   8093c:	4b23      	ldr	r3, [pc, #140]	; (809cc <Rece_data_deal+0xc8>)
   8093e:	4798      	blx	r3
   80940:	bd10      	pop	{r4, pc}
	}
	else if(strcmp(head,"IIC_1 ")==0)
   80942:	4923      	ldr	r1, [pc, #140]	; (809d0 <Rece_data_deal+0xcc>)
   80944:	4620      	mov	r0, r4
   80946:	4b1a      	ldr	r3, [pc, #104]	; (809b0 <Rece_data_deal+0xac>)
   80948:	4798      	blx	r3
   8094a:	2800      	cmp	r0, #0
   8094c:	d12a      	bne.n	809a4 <Rece_data_deal+0xa0>
	{
		if(iic_address_cnt < 4)
   8094e:	4b21      	ldr	r3, [pc, #132]	; (809d4 <Rece_data_deal+0xd0>)
   80950:	781c      	ldrb	r4, [r3, #0]
   80952:	2c03      	cmp	r4, #3
   80954:	d808      	bhi.n	80968 <Rece_data_deal+0x64>
		{
			iic_address[iic_address_cnt] = udi_cdc_getc();
   80956:	4b17      	ldr	r3, [pc, #92]	; (809b4 <Rece_data_deal+0xb0>)
   80958:	4798      	blx	r3
   8095a:	4b1f      	ldr	r3, [pc, #124]	; (809d8 <Rece_data_deal+0xd4>)
   8095c:	5518      	strb	r0, [r3, r4]
			iic_address_cnt++;
   8095e:	4a1d      	ldr	r2, [pc, #116]	; (809d4 <Rece_data_deal+0xd0>)
   80960:	7813      	ldrb	r3, [r2, #0]
   80962:	3301      	adds	r3, #1
   80964:	7013      	strb	r3, [r2, #0]
			return;
   80966:	bd10      	pop	{r4, pc}
		}
		if(iic_address[2] == 'w' && (iic_address[3] == ' '))
   80968:	4b1b      	ldr	r3, [pc, #108]	; (809d8 <Rece_data_deal+0xd4>)
   8096a:	789b      	ldrb	r3, [r3, #2]
   8096c:	2b77      	cmp	r3, #119	; 0x77
   8096e:	d10a      	bne.n	80986 <Rece_data_deal+0x82>
   80970:	4b19      	ldr	r3, [pc, #100]	; (809d8 <Rece_data_deal+0xd4>)
   80972:	78db      	ldrb	r3, [r3, #3]
   80974:	2b20      	cmp	r3, #32
   80976:	d112      	bne.n	8099e <Rece_data_deal+0x9a>
		{		
			iic_write_oper();
   80978:	4b18      	ldr	r3, [pc, #96]	; (809dc <Rece_data_deal+0xd8>)
   8097a:	4798      	blx	r3
			delay_ms(1);
   8097c:	f241 7070 	movw	r0, #6000	; 0x1770
   80980:	4b12      	ldr	r3, [pc, #72]	; (809cc <Rece_data_deal+0xc8>)
   80982:	4798      	blx	r3
			return;
   80984:	bd10      	pop	{r4, pc}
		}
		else if(iic_address[2] == 'r' && (iic_address[3] == ' '))
   80986:	2b72      	cmp	r3, #114	; 0x72
   80988:	d109      	bne.n	8099e <Rece_data_deal+0x9a>
   8098a:	4b13      	ldr	r3, [pc, #76]	; (809d8 <Rece_data_deal+0xd4>)
   8098c:	78db      	ldrb	r3, [r3, #3]
   8098e:	2b20      	cmp	r3, #32
   80990:	d105      	bne.n	8099e <Rece_data_deal+0x9a>
		{
			iic_read_flag = 1;
   80992:	2201      	movs	r2, #1
   80994:	4b12      	ldr	r3, [pc, #72]	; (809e0 <Rece_data_deal+0xdc>)
   80996:	601a      	str	r2, [r3, #0]
			iic_read_count();
   80998:	4b12      	ldr	r3, [pc, #72]	; (809e4 <Rece_data_deal+0xe0>)
   8099a:	4798      	blx	r3
			return;
   8099c:	bd10      	pop	{r4, pc}
		}
		else
		{
			str = udi_cdc_getc();
   8099e:	4b05      	ldr	r3, [pc, #20]	; (809b4 <Rece_data_deal+0xb0>)
   809a0:	4798      	blx	r3
   809a2:	bd10      	pop	{r4, pc}
		}
	}
	else
	{
		str = udi_cdc_getc();
   809a4:	4b03      	ldr	r3, [pc, #12]	; (809b4 <Rece_data_deal+0xb0>)
   809a6:	4798      	blx	r3
   809a8:	bd10      	pop	{r4, pc}
   809aa:	bf00      	nop
   809ac:	00083fbc 	.word	0x00083fbc
   809b0:	00083d05 	.word	0x00083d05
   809b4:	00081485 	.word	0x00081485
   809b8:	40098000 	.word	0x40098000
   809bc:	00083481 	.word	0x00083481
   809c0:	00083fb4 	.word	0x00083fb4
   809c4:	40008000 	.word	0x40008000
   809c8:	000801b1 	.word	0x000801b1
   809cc:	20070001 	.word	0x20070001
   809d0:	00083fac 	.word	0x00083fac
   809d4:	200706c4 	.word	0x200706c4
   809d8:	20071464 	.word	0x20071464
   809dc:	00080521 	.word	0x00080521
   809e0:	2007145c 	.word	0x2007145c
   809e4:	00080561 	.word	0x00080561

000809e8 <buf_clear_data>:
}


void buf_clear_data(uint8_t *str)
{
	while(*str != 0)
   809e8:	7803      	ldrb	r3, [r0, #0]
   809ea:	b12b      	cbz	r3, 809f8 <buf_clear_data+0x10>
	{
		*str = 0;
   809ec:	2200      	movs	r2, #0
   809ee:	7002      	strb	r2, [r0, #0]
}


void buf_clear_data(uint8_t *str)
{
	while(*str != 0)
   809f0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   809f4:	2b00      	cmp	r3, #0
   809f6:	d1fa      	bne.n	809ee <buf_clear_data+0x6>
   809f8:	4770      	bx	lr
   809fa:	bf00      	nop

000809fc <usart_data_to_pc>:
		str = udi_cdc_getc();
	}
}

void usart_data_to_pc(void)
{
   809fc:	b570      	push	{r4, r5, r6, lr}
	if(!udi_cdc_is_tx_ready())
   809fe:	4b16      	ldr	r3, [pc, #88]	; (80a58 <usart_data_to_pc+0x5c>)
   80a00:	4798      	blx	r3
   80a02:	b910      	cbnz	r0, 80a0a <usart_data_to_pc+0xe>
	{
		udi_cdc_signal_overrun();
   80a04:	4b15      	ldr	r3, [pc, #84]	; (80a5c <usart_data_to_pc+0x60>)
   80a06:	4798      	blx	r3
   80a08:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		if((usart_rece_buf[0] != 0) && usart_buf_full_flag)
   80a0a:	4b15      	ldr	r3, [pc, #84]	; (80a60 <usart_data_to_pc+0x64>)
   80a0c:	781b      	ldrb	r3, [r3, #0]
   80a0e:	b30b      	cbz	r3, 80a54 <usart_data_to_pc+0x58>
   80a10:	4b14      	ldr	r3, [pc, #80]	; (80a64 <usart_data_to_pc+0x68>)
   80a12:	781b      	ldrb	r3, [r3, #0]
   80a14:	b16b      	cbz	r3, 80a32 <usart_data_to_pc+0x36>
		{
			udi_cdc_write_buf(usart_rece_buf,usart_rece_cnt);
   80a16:	4c14      	ldr	r4, [pc, #80]	; (80a68 <usart_data_to_pc+0x6c>)
   80a18:	4e11      	ldr	r6, [pc, #68]	; (80a60 <usart_data_to_pc+0x64>)
   80a1a:	6821      	ldr	r1, [r4, #0]
   80a1c:	4630      	mov	r0, r6
   80a1e:	4b13      	ldr	r3, [pc, #76]	; (80a6c <usart_data_to_pc+0x70>)
   80a20:	4798      	blx	r3
			usart_buf_full_flag = 0;
   80a22:	2500      	movs	r5, #0
   80a24:	4b0f      	ldr	r3, [pc, #60]	; (80a64 <usart_data_to_pc+0x68>)
   80a26:	701d      	strb	r5, [r3, #0]
			buf_clear_data(usart_rece_buf);
   80a28:	4630      	mov	r0, r6
   80a2a:	4b11      	ldr	r3, [pc, #68]	; (80a70 <usart_data_to_pc+0x74>)
   80a2c:	4798      	blx	r3
			usart_rece_cnt = 0;
   80a2e:	6025      	str	r5, [r4, #0]
			return;
   80a30:	bd70      	pop	{r4, r5, r6, pc}
		}
		if((usart_rece_buf[0] != 0) && !usart_buf_full_flag)
		{
			udi_cdc_write_buf("UART0 ",6);
   80a32:	2106      	movs	r1, #6
   80a34:	480f      	ldr	r0, [pc, #60]	; (80a74 <usart_data_to_pc+0x78>)
   80a36:	4e0d      	ldr	r6, [pc, #52]	; (80a6c <usart_data_to_pc+0x70>)
   80a38:	47b0      	blx	r6
			udi_cdc_write_buf(usart_rece_buf,usart_rece_cnt);
   80a3a:	4c0b      	ldr	r4, [pc, #44]	; (80a68 <usart_data_to_pc+0x6c>)
   80a3c:	4d08      	ldr	r5, [pc, #32]	; (80a60 <usart_data_to_pc+0x64>)
   80a3e:	6821      	ldr	r1, [r4, #0]
   80a40:	4628      	mov	r0, r5
   80a42:	47b0      	blx	r6
			udi_cdc_putc('\n');
   80a44:	200a      	movs	r0, #10
   80a46:	4b0c      	ldr	r3, [pc, #48]	; (80a78 <usart_data_to_pc+0x7c>)
   80a48:	4798      	blx	r3
			buf_clear_data(usart_rece_buf);
   80a4a:	4628      	mov	r0, r5
   80a4c:	4b08      	ldr	r3, [pc, #32]	; (80a70 <usart_data_to_pc+0x74>)
   80a4e:	4798      	blx	r3
			usart_rece_cnt = 0;
   80a50:	2300      	movs	r3, #0
   80a52:	6023      	str	r3, [r4, #0]
   80a54:	bd70      	pop	{r4, r5, r6, pc}
   80a56:	bf00      	nop
   80a58:	00081529 	.word	0x00081529
   80a5c:	00081181 	.word	0x00081181
   80a60:	200708e0 	.word	0x200708e0
   80a64:	20071674 	.word	0x20071674
   80a68:	20070ae0 	.word	0x20070ae0
   80a6c:	0008169d 	.word	0x0008169d
   80a70:	000809e9 	.word	0x000809e9
   80a74:	00083fbc 	.word	0x00083fbc
   80a78:	000815d5 	.word	0x000815d5

00080a7c <SysTick_Handler>:
		}
	}
}

void SysTick_Handler()
{
   80a7c:	b508      	push	{r3, lr}
	usart_timeout_cnt++;
   80a7e:	4a1b      	ldr	r2, [pc, #108]	; (80aec <SysTick_Handler+0x70>)
   80a80:	6813      	ldr	r3, [r2, #0]
   80a82:	3301      	adds	r3, #1
   80a84:	6013      	str	r3, [r2, #0]
	usb_timeout_cnt++;
   80a86:	4a1a      	ldr	r2, [pc, #104]	; (80af0 <SysTick_Handler+0x74>)
   80a88:	6813      	ldr	r3, [r2, #0]
   80a8a:	3301      	adds	r3, #1
   80a8c:	6013      	str	r3, [r2, #0]
	spi_timeout_cnt++;
   80a8e:	4919      	ldr	r1, [pc, #100]	; (80af4 <SysTick_Handler+0x78>)
   80a90:	680a      	ldr	r2, [r1, #0]
   80a92:	3201      	adds	r2, #1
   80a94:	600a      	str	r2, [r1, #0]
	if(usb_timeout_cnt >= 5)
   80a96:	2b04      	cmp	r3, #4
   80a98:	d915      	bls.n	80ac6 <SysTick_Handler+0x4a>
	{				
		usb_timeout_cnt = 1;
   80a9a:	2201      	movs	r2, #1
   80a9c:	4b14      	ldr	r3, [pc, #80]	; (80af0 <SysTick_Handler+0x74>)
   80a9e:	601a      	str	r2, [r3, #0]
		buf_clear_data(usb_rece_head);
   80aa0:	4815      	ldr	r0, [pc, #84]	; (80af8 <SysTick_Handler+0x7c>)
   80aa2:	4b16      	ldr	r3, [pc, #88]	; (80afc <SysTick_Handler+0x80>)
   80aa4:	4798      	blx	r3
		usb_rece_cnt=0;
   80aa6:	2200      	movs	r2, #0
   80aa8:	4b15      	ldr	r3, [pc, #84]	; (80b00 <SysTick_Handler+0x84>)
   80aaa:	601a      	str	r2, [r3, #0]
		if(iic_read_flag)
   80aac:	4b15      	ldr	r3, [pc, #84]	; (80b04 <SysTick_Handler+0x88>)
   80aae:	681b      	ldr	r3, [r3, #0]
   80ab0:	b11b      	cbz	r3, 80aba <SysTick_Handler+0x3e>
		{
			iic_read_flag = 0;
   80ab2:	4b14      	ldr	r3, [pc, #80]	; (80b04 <SysTick_Handler+0x88>)
   80ab4:	601a      	str	r2, [r3, #0]
			iic_read_oper();
   80ab6:	4b14      	ldr	r3, [pc, #80]	; (80b08 <SysTick_Handler+0x8c>)
   80ab8:	4798      	blx	r3
		}
		iic_address_cnt = 0;
   80aba:	2200      	movs	r2, #0
   80abc:	4b13      	ldr	r3, [pc, #76]	; (80b0c <SysTick_Handler+0x90>)
   80abe:	701a      	strb	r2, [r3, #0]
		buf_clear_data(iic_address);
   80ac0:	4813      	ldr	r0, [pc, #76]	; (80b10 <SysTick_Handler+0x94>)
   80ac2:	4b0e      	ldr	r3, [pc, #56]	; (80afc <SysTick_Handler+0x80>)
   80ac4:	4798      	blx	r3
	}
	if(usart_timeout_cnt >= 5)
   80ac6:	4b09      	ldr	r3, [pc, #36]	; (80aec <SysTick_Handler+0x70>)
   80ac8:	681b      	ldr	r3, [r3, #0]
   80aca:	2b04      	cmp	r3, #4
   80acc:	d904      	bls.n	80ad8 <SysTick_Handler+0x5c>
	{
		usart_timeout_cnt = 1;
   80ace:	2201      	movs	r2, #1
   80ad0:	4b06      	ldr	r3, [pc, #24]	; (80aec <SysTick_Handler+0x70>)
   80ad2:	601a      	str	r2, [r3, #0]
		usart_data_to_pc();
   80ad4:	4b0f      	ldr	r3, [pc, #60]	; (80b14 <SysTick_Handler+0x98>)
   80ad6:	4798      	blx	r3
	}
	if(spi_timeout_cnt >= 5)
   80ad8:	4b06      	ldr	r3, [pc, #24]	; (80af4 <SysTick_Handler+0x78>)
   80ada:	681b      	ldr	r3, [r3, #0]
   80adc:	2b04      	cmp	r3, #4
   80ade:	d904      	bls.n	80aea <SysTick_Handler+0x6e>
	{
		spi_timeout_cnt = 1;
   80ae0:	2201      	movs	r2, #1
   80ae2:	4b04      	ldr	r3, [pc, #16]	; (80af4 <SysTick_Handler+0x78>)
   80ae4:	601a      	str	r2, [r3, #0]
		spi_data_to_pc();
   80ae6:	4b0c      	ldr	r3, [pc, #48]	; (80b18 <SysTick_Handler+0x9c>)
   80ae8:	4798      	blx	r3
   80aea:	bd08      	pop	{r3, pc}
   80aec:	20071678 	.word	0x20071678
   80af0:	20071670 	.word	0x20071670
   80af4:	20071668 	.word	0x20071668
   80af8:	200708cc 	.word	0x200708cc
   80afc:	000809e9 	.word	0x000809e9
   80b00:	20070afc 	.word	0x20070afc
   80b04:	2007145c 	.word	0x2007145c
   80b08:	00080631 	.word	0x00080631
   80b0c:	200706c4 	.word	0x200706c4
   80b10:	20071464 	.word	0x20071464
   80b14:	000809fd 	.word	0x000809fd
   80b18:	00080781 	.word	0x00080781

00080b1c <USART0_Handler>:
		str++;
	}
}

void USART0_Handler(void)
{
   80b1c:	b570      	push	{r4, r5, r6, lr}
   80b1e:	b082      	sub	sp, #8
	bool b_error;
	uint32_t value;
	int str;
	uint32_t sr = usart_get_status(USART0);
   80b20:	4832      	ldr	r0, [pc, #200]	; (80bec <USART0_Handler+0xd0>)
   80b22:	4b33      	ldr	r3, [pc, #204]	; (80bf0 <USART0_Handler+0xd4>)
   80b24:	4798      	blx	r3
   80b26:	4604      	mov	r4, r0
	
	if(sr & US_CSR_RXRDY)//mcu usb send data
   80b28:	f010 0f01 	tst.w	r0, #1
   80b2c:	d039      	beq.n	80ba2 <USART0_Handler+0x86>
	{
		usart_timeout_cnt = 1;
   80b2e:	2201      	movs	r2, #1
   80b30:	4b30      	ldr	r3, [pc, #192]	; (80bf4 <USART0_Handler+0xd8>)
   80b32:	601a      	str	r2, [r3, #0]
		b_error = usart_read(USART0,&value) || (sr & (US_CSR_FRAME | US_CSR_TIMEOUT | US_CSR_PARE));
   80b34:	a901      	add	r1, sp, #4
   80b36:	482d      	ldr	r0, [pc, #180]	; (80bec <USART0_Handler+0xd0>)
   80b38:	4b2f      	ldr	r3, [pc, #188]	; (80bf8 <USART0_Handler+0xdc>)
   80b3a:	4798      	blx	r3
   80b3c:	b910      	cbnz	r0, 80b44 <USART0_Handler+0x28>
		if(b_error)
   80b3e:	f414 7fe0 	tst.w	r4, #448	; 0x1c0
   80b42:	d008      	beq.n	80b56 <USART0_Handler+0x3a>
		{
			usart_reset_rx(USART0);
   80b44:	4c29      	ldr	r4, [pc, #164]	; (80bec <USART0_Handler+0xd0>)
   80b46:	4620      	mov	r0, r4
   80b48:	4b2c      	ldr	r3, [pc, #176]	; (80bfc <USART0_Handler+0xe0>)
   80b4a:	4798      	blx	r3
			usart_enable_rx(USART0);
   80b4c:	4620      	mov	r0, r4
   80b4e:	4b2c      	ldr	r3, [pc, #176]	; (80c00 <USART0_Handler+0xe4>)
   80b50:	4798      	blx	r3
			udi_cdc_signal_framing_error();
   80b52:	4b2c      	ldr	r3, [pc, #176]	; (80c04 <USART0_Handler+0xe8>)
   80b54:	4798      	blx	r3
		}
		if(usart_rece_cnt == sizeof(usart_rece_buf))
   80b56:	4b2c      	ldr	r3, [pc, #176]	; (80c08 <USART0_Handler+0xec>)
   80b58:	681b      	ldr	r3, [r3, #0]
   80b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80b5e:	d119      	bne.n	80b94 <USART0_Handler+0x78>
		{
			if(usart_rece_buf[0] != 0 && !usart_buf_full_flag)
   80b60:	4b2a      	ldr	r3, [pc, #168]	; (80c0c <USART0_Handler+0xf0>)
   80b62:	781b      	ldrb	r3, [r3, #0]
   80b64:	b133      	cbz	r3, 80b74 <USART0_Handler+0x58>
   80b66:	4b2a      	ldr	r3, [pc, #168]	; (80c10 <USART0_Handler+0xf4>)
   80b68:	781b      	ldrb	r3, [r3, #0]
   80b6a:	b91b      	cbnz	r3, 80b74 <USART0_Handler+0x58>
			{
				udi_cdc_write_buf("UART0 ",6);
   80b6c:	2106      	movs	r1, #6
   80b6e:	4829      	ldr	r0, [pc, #164]	; (80c14 <USART0_Handler+0xf8>)
   80b70:	4b29      	ldr	r3, [pc, #164]	; (80c18 <USART0_Handler+0xfc>)
   80b72:	4798      	blx	r3
			}
			usart_buf_full_flag=1;
   80b74:	2601      	movs	r6, #1
   80b76:	4b26      	ldr	r3, [pc, #152]	; (80c10 <USART0_Handler+0xf4>)
   80b78:	701e      	strb	r6, [r3, #0]
			udi_cdc_write_buf(usart_rece_buf,usart_rece_cnt);
   80b7a:	4d23      	ldr	r5, [pc, #140]	; (80c08 <USART0_Handler+0xec>)
   80b7c:	4c23      	ldr	r4, [pc, #140]	; (80c0c <USART0_Handler+0xf0>)
   80b7e:	6829      	ldr	r1, [r5, #0]
   80b80:	4620      	mov	r0, r4
   80b82:	4b25      	ldr	r3, [pc, #148]	; (80c18 <USART0_Handler+0xfc>)
   80b84:	4798      	blx	r3
			buf_clear_data(usart_rece_buf);
   80b86:	4620      	mov	r0, r4
   80b88:	4b24      	ldr	r3, [pc, #144]	; (80c1c <USART0_Handler+0x100>)
   80b8a:	4798      	blx	r3
			usart_rece_cnt=0;
			usart_rece_buf[usart_rece_cnt] = value;
   80b8c:	9b01      	ldr	r3, [sp, #4]
   80b8e:	7023      	strb	r3, [r4, #0]
			usart_rece_cnt++;
   80b90:	602e      	str	r6, [r5, #0]
   80b92:	e028      	b.n	80be6 <USART0_Handler+0xca>
		}
		else
		{
			usart_rece_buf[usart_rece_cnt] = value;
   80b94:	9901      	ldr	r1, [sp, #4]
   80b96:	4a1d      	ldr	r2, [pc, #116]	; (80c0c <USART0_Handler+0xf0>)
   80b98:	54d1      	strb	r1, [r2, r3]
			usart_rece_cnt++;
   80b9a:	3301      	adds	r3, #1
   80b9c:	4a1a      	ldr	r2, [pc, #104]	; (80c08 <USART0_Handler+0xec>)
   80b9e:	6013      	str	r3, [r2, #0]
   80ba0:	e021      	b.n	80be6 <USART0_Handler+0xca>
		}
		return;
	}
	
	if(sr & US_CSR_TXRDY) //mcu usb receive data
   80ba2:	f010 0f02 	tst.w	r0, #2
   80ba6:	d01e      	beq.n	80be6 <USART0_Handler+0xca>
	{
		if(udi_cdc_is_rx_ready()) 
   80ba8:	4b1d      	ldr	r3, [pc, #116]	; (80c20 <USART0_Handler+0x104>)
   80baa:	4798      	blx	r3
   80bac:	b198      	cbz	r0, 80bd6 <USART0_Handler+0xba>
		{
			usb_timeout_cnt = 1;
   80bae:	2201      	movs	r2, #1
   80bb0:	4b1c      	ldr	r3, [pc, #112]	; (80c24 <USART0_Handler+0x108>)
   80bb2:	601a      	str	r2, [r3, #0]
			if(usb_rece_cnt < 6)
   80bb4:	4b1c      	ldr	r3, [pc, #112]	; (80c28 <USART0_Handler+0x10c>)
   80bb6:	681c      	ldr	r4, [r3, #0]
   80bb8:	2c05      	cmp	r4, #5
   80bba:	d808      	bhi.n	80bce <USART0_Handler+0xb2>
			{
				usb_rece_head[usb_rece_cnt] = udi_cdc_getc();
   80bbc:	4b1b      	ldr	r3, [pc, #108]	; (80c2c <USART0_Handler+0x110>)
   80bbe:	4798      	blx	r3
   80bc0:	4b1b      	ldr	r3, [pc, #108]	; (80c30 <USART0_Handler+0x114>)
   80bc2:	5518      	strb	r0, [r3, r4]
				usb_rece_cnt++;
   80bc4:	4a18      	ldr	r2, [pc, #96]	; (80c28 <USART0_Handler+0x10c>)
   80bc6:	6813      	ldr	r3, [r2, #0]
   80bc8:	3301      	adds	r3, #1
   80bca:	6013      	str	r3, [r2, #0]
				return;
   80bcc:	e00b      	b.n	80be6 <USART0_Handler+0xca>
			}
			Rece_data_deal(usb_rece_head);
   80bce:	4818      	ldr	r0, [pc, #96]	; (80c30 <USART0_Handler+0x114>)
   80bd0:	4b18      	ldr	r3, [pc, #96]	; (80c34 <USART0_Handler+0x118>)
   80bd2:	4798      	blx	r3
   80bd4:	e007      	b.n	80be6 <USART0_Handler+0xca>
		}
		else
		{
			usart_disable_tx(USART0);
   80bd6:	4c05      	ldr	r4, [pc, #20]	; (80bec <USART0_Handler+0xd0>)
   80bd8:	4620      	mov	r0, r4
   80bda:	4b17      	ldr	r3, [pc, #92]	; (80c38 <USART0_Handler+0x11c>)
   80bdc:	4798      	blx	r3
			usart_disable_interrupt(USART0,US_IDR_TXRDY);
   80bde:	2102      	movs	r1, #2
   80be0:	4620      	mov	r0, r4
   80be2:	4b16      	ldr	r3, [pc, #88]	; (80c3c <USART0_Handler+0x120>)
   80be4:	4798      	blx	r3
		}
	}
}
   80be6:	b002      	add	sp, #8
   80be8:	bd70      	pop	{r4, r5, r6, pc}
   80bea:	bf00      	nop
   80bec:	40098000 	.word	0x40098000
   80bf0:	0008347d 	.word	0x0008347d
   80bf4:	20071678 	.word	0x20071678
   80bf8:	00083495 	.word	0x00083495
   80bfc:	00083469 	.word	0x00083469
   80c00:	00083461 	.word	0x00083461
   80c04:	0008116d 	.word	0x0008116d
   80c08:	20070ae0 	.word	0x20070ae0
   80c0c:	200708e0 	.word	0x200708e0
   80c10:	20071674 	.word	0x20071674
   80c14:	00083fbc 	.word	0x00083fbc
   80c18:	0008169d 	.word	0x0008169d
   80c1c:	000809e9 	.word	0x000809e9
   80c20:	000813b9 	.word	0x000813b9
   80c24:	20071670 	.word	0x20071670
   80c28:	20070afc 	.word	0x20070afc
   80c2c:	00081485 	.word	0x00081485
   80c30:	200708cc 	.word	0x200708cc
   80c34:	00080905 	.word	0x00080905
   80c38:	00083459 	.word	0x00083459
   80c3c:	00083475 	.word	0x00083475

00080c40 <usart_open>:

void usart_open()
{
   80c40:	b510      	push	{r4, lr}
   80c42:	2011      	movs	r0, #17
   80c44:	4b0d      	ldr	r3, [pc, #52]	; (80c7c <usart_open+0x3c>)
   80c46:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_USART0);
	if(usart_init_rs232(USART0, &usart_console_settings,sysclk_get_cpu_hz()))
   80c48:	4a0d      	ldr	r2, [pc, #52]	; (80c80 <usart_open+0x40>)
   80c4a:	490e      	ldr	r1, [pc, #56]	; (80c84 <usart_open+0x44>)
   80c4c:	480e      	ldr	r0, [pc, #56]	; (80c88 <usart_open+0x48>)
   80c4e:	4b0f      	ldr	r3, [pc, #60]	; (80c8c <usart_open+0x4c>)
   80c50:	4798      	blx	r3
   80c52:	b988      	cbnz	r0, 80c78 <usart_open+0x38>
	{
		return;
	}
	usart_enable_tx(USART0);
   80c54:	4c0c      	ldr	r4, [pc, #48]	; (80c88 <usart_open+0x48>)
   80c56:	4620      	mov	r0, r4
   80c58:	4b0d      	ldr	r3, [pc, #52]	; (80c90 <usart_open+0x50>)
   80c5a:	4798      	blx	r3
	usart_enable_rx(USART0);
   80c5c:	4620      	mov	r0, r4
   80c5e:	4b0d      	ldr	r3, [pc, #52]	; (80c94 <usart_open+0x54>)
   80c60:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   80c62:	4b0d      	ldr	r3, [pc, #52]	; (80c98 <usart_open+0x58>)
   80c64:	2230      	movs	r2, #48	; 0x30
   80c66:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   80c6e:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(USART0_IRQn, 3);
	NVIC_EnableIRQ(USART0_IRQn);
	usart_enable_interrupt(USART0, US_IER_RXRDY | US_IER_TXRDY);
   80c70:	2103      	movs	r1, #3
   80c72:	4620      	mov	r0, r4
   80c74:	4b09      	ldr	r3, [pc, #36]	; (80c9c <usart_open+0x5c>)
   80c76:	4798      	blx	r3
   80c78:	bd10      	pop	{r4, pc}
   80c7a:	bf00      	nop
   80c7c:	000837ad 	.word	0x000837ad
   80c80:	0501bd00 	.word	0x0501bd00
   80c84:	20070ae4 	.word	0x20070ae4
   80c88:	40098000 	.word	0x40098000
   80c8c:	000833fd 	.word	0x000833fd
   80c90:	00083451 	.word	0x00083451
   80c94:	00083461 	.word	0x00083461
   80c98:	e000e100 	.word	0xe000e100
   80c9c:	00083471 	.word	0x00083471

00080ca0 <usart_close>:
}

void usart_close()
{
   80ca0:	b508      	push	{r3, lr}
	usart_disable_interrupt(USART0, 0xFFFFFFFF);
   80ca2:	f04f 31ff 	mov.w	r1, #4294967295
   80ca6:	4802      	ldr	r0, [pc, #8]	; (80cb0 <usart_close+0x10>)
   80ca8:	4b02      	ldr	r3, [pc, #8]	; (80cb4 <usart_close+0x14>)
   80caa:	4798      	blx	r3
   80cac:	bd08      	pop	{r3, pc}
   80cae:	bf00      	nop
   80cb0:	40098000 	.word	0x40098000
   80cb4:	00083475 	.word	0x00083475

00080cb8 <usart_rx_notify>:
}

void usart_rx_notify()
{
   80cb8:	b510      	push	{r4, lr}
	if(usart_get_interrupt_mask(USART0) & US_IMR_RXRDY)
   80cba:	4807      	ldr	r0, [pc, #28]	; (80cd8 <usart_rx_notify+0x20>)
   80cbc:	4b07      	ldr	r3, [pc, #28]	; (80cdc <usart_rx_notify+0x24>)
   80cbe:	4798      	blx	r3
   80cc0:	f010 0f01 	tst.w	r0, #1
   80cc4:	d007      	beq.n	80cd6 <usart_rx_notify+0x1e>
	{
		usart_enable_tx(USART0);
   80cc6:	4c04      	ldr	r4, [pc, #16]	; (80cd8 <usart_rx_notify+0x20>)
   80cc8:	4620      	mov	r0, r4
   80cca:	4b05      	ldr	r3, [pc, #20]	; (80ce0 <usart_rx_notify+0x28>)
   80ccc:	4798      	blx	r3
		usart_enable_interrupt(USART0,US_IER_TXRDY);
   80cce:	2102      	movs	r1, #2
   80cd0:	4620      	mov	r0, r4
   80cd2:	4b04      	ldr	r3, [pc, #16]	; (80ce4 <usart_rx_notify+0x2c>)
   80cd4:	4798      	blx	r3
   80cd6:	bd10      	pop	{r4, pc}
   80cd8:	40098000 	.word	0x40098000
   80cdc:	00083479 	.word	0x00083479
   80ce0:	00083451 	.word	0x00083451
   80ce4:	00083471 	.word	0x00083471

00080ce8 <usart_config>:
	}
}

void usart_config(usb_cdc_line_coding_t *cfg)
{
   80ce8:	b570      	push	{r4, r5, r6, lr}
	uint32_t stopbits,parity,databits;
	uint32_t imr;
	
	switch(cfg->bCharFormat)
   80cea:	7903      	ldrb	r3, [r0, #4]
   80cec:	2b01      	cmp	r3, #1
   80cee:	d004      	beq.n	80cfa <usart_config+0x12>
			stopbits = CDC_STOP_BITS_1_5;
			break;
		case CDC_STOP_BITS_1:
			default:
			// Default stop bit = 1 stop bit
			stopbits = US_MR_NBSTOP_1_BIT;
   80cf0:	2b02      	cmp	r3, #2
   80cf2:	bf0c      	ite	eq
   80cf4:	2102      	moveq	r1, #2
   80cf6:	2100      	movne	r1, #0
   80cf8:	e000      	b.n	80cfc <usart_config+0x14>
	{
		case CDC_STOP_BITS_2:
			stopbits = CDC_STOP_BITS_2;
			break;
		case CDC_STOP_BITS_1_5:
			stopbits = CDC_STOP_BITS_1_5;
   80cfa:	2101      	movs	r1, #1
			// Default stop bit = 1 stop bit
			stopbits = US_MR_NBSTOP_1_BIT;
			break;
	}
	
	switch(cfg->bParityType)
   80cfc:	7943      	ldrb	r3, [r0, #5]
   80cfe:	3b01      	subs	r3, #1
   80d00:	2b03      	cmp	r3, #3
   80d02:	d80c      	bhi.n	80d1e <usart_config+0x36>
   80d04:	e8df f003 	tbb	[pc, r3]
   80d08:	08050e02 	.word	0x08050e02
	{
		case CDC_PAR_EVEN:
			parity = US_MR_PAR_EVEN;
			break;
		case CDC_PAR_ODD:
			parity = US_MR_PAR_ODD;
   80d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
   80d10:	e009      	b.n	80d26 <usart_config+0x3e>
			break;
		case CDC_PAR_MARK:
			parity = US_MR_PAR_MARK;
   80d12:	f44f 62c0 	mov.w	r2, #1536	; 0x600
			break;
   80d16:	e006      	b.n	80d26 <usart_config+0x3e>
		case CDC_PAR_SPACE:
			parity = US_MR_PAR_SPACE;
   80d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
			break;
   80d1c:	e003      	b.n	80d26 <usart_config+0x3e>
		default:
		case CDC_PAR_NONE:
			parity = US_MR_PAR_NO;
   80d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
			break;
   80d22:	e000      	b.n	80d26 <usart_config+0x3e>
	}
	
	switch(cfg->bParityType)
	{
		case CDC_PAR_EVEN:
			parity = US_MR_PAR_EVEN;
   80d24:	2200      	movs	r2, #0
		case CDC_PAR_NONE:
			parity = US_MR_PAR_NO;
			break;
	}
	
	switch(cfg->bDataBits) {
   80d26:	7983      	ldrb	r3, [r0, #6]
   80d28:	1f5c      	subs	r4, r3, #5
   80d2a:	2c02      	cmp	r4, #2
		case 5: case 6: case 7:
			databits = cfg->bDataBits - 5;
   80d2c:	bf94      	ite	ls
   80d2e:	4623      	movls	r3, r4
			break;
		default:
		case 8:
			databits = US_MR_CHRL_8_BIT;
   80d30:	23c0      	movhi	r3, #192	; 0xc0
			break;
	}
	
	usart_console_settings.baudrate = LE32_TO_CPU(cfg->dwDTERate);
   80d32:	6800      	ldr	r0, [r0, #0]
   80d34:	4d10      	ldr	r5, [pc, #64]	; (80d78 <usart_config+0x90>)
   80d36:	6028      	str	r0, [r5, #0]
	usart_console_settings.char_length = databits;
   80d38:	606b      	str	r3, [r5, #4]
	usart_console_settings.parity_type = parity;
   80d3a:	60aa      	str	r2, [r5, #8]
	usart_console_settings.stop_bits = stopbits;
   80d3c:	60e9      	str	r1, [r5, #12]
	usart_console_settings.channel_mode = US_MR_CHMODE_NORMAL;
   80d3e:	2300      	movs	r3, #0
   80d40:	612b      	str	r3, [r5, #16]
	
	imr = usart_get_interrupt_mask(USART0);
   80d42:	4c0e      	ldr	r4, [pc, #56]	; (80d7c <usart_config+0x94>)
   80d44:	4620      	mov	r0, r4
   80d46:	4b0e      	ldr	r3, [pc, #56]	; (80d80 <usart_config+0x98>)
   80d48:	4798      	blx	r3
   80d4a:	4606      	mov	r6, r0
	usart_disable_interrupt(USART0, 0xFFFFFFFF);
   80d4c:	f04f 31ff 	mov.w	r1, #4294967295
   80d50:	4620      	mov	r0, r4
   80d52:	4b0c      	ldr	r3, [pc, #48]	; (80d84 <usart_config+0x9c>)
   80d54:	4798      	blx	r3
	usart_init_rs232(USART0, &usart_console_settings,
   80d56:	4a0c      	ldr	r2, [pc, #48]	; (80d88 <usart_config+0xa0>)
   80d58:	4629      	mov	r1, r5
   80d5a:	4620      	mov	r0, r4
   80d5c:	4b0b      	ldr	r3, [pc, #44]	; (80d8c <usart_config+0xa4>)
   80d5e:	4798      	blx	r3
	sysclk_get_cpu_hz());
	
	usart_enable_tx(USART0);
   80d60:	4620      	mov	r0, r4
   80d62:	4b0b      	ldr	r3, [pc, #44]	; (80d90 <usart_config+0xa8>)
   80d64:	4798      	blx	r3
	usart_enable_rx(USART0);
   80d66:	4620      	mov	r0, r4
   80d68:	4b0a      	ldr	r3, [pc, #40]	; (80d94 <usart_config+0xac>)
   80d6a:	4798      	blx	r3
	usart_enable_interrupt(USART0, imr);
   80d6c:	4631      	mov	r1, r6
   80d6e:	4620      	mov	r0, r4
   80d70:	4b09      	ldr	r3, [pc, #36]	; (80d98 <usart_config+0xb0>)
   80d72:	4798      	blx	r3
   80d74:	bd70      	pop	{r4, r5, r6, pc}
   80d76:	bf00      	nop
   80d78:	20070ae4 	.word	0x20070ae4
   80d7c:	40098000 	.word	0x40098000
   80d80:	00083479 	.word	0x00083479
   80d84:	00083475 	.word	0x00083475
   80d88:	0501bd00 	.word	0x0501bd00
   80d8c:	000833fd 	.word	0x000833fd
   80d90:	00083451 	.word	0x00083451
   80d94:	00083461 	.word	0x00083461
   80d98:	00083471 	.word	0x00083471

00080d9c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   80d9c:	4a02      	ldr	r2, [pc, #8]	; (80da8 <udi_cdc_comm_disable+0xc>)
   80d9e:	7813      	ldrb	r3, [r2, #0]
   80da0:	3b01      	subs	r3, #1
   80da2:	b2db      	uxtb	r3, r3
   80da4:	7013      	strb	r3, [r2, #0]
   80da6:	4770      	bx	lr
   80da8:	20070f14 	.word	0x20070f14

00080dac <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   80dac:	2000      	movs	r0, #0
   80dae:	4770      	bx	lr

00080db0 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   80db0:	2000      	movs	r0, #0
   80db2:	4770      	bx	lr

00080db4 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   80db4:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   80db6:	4802      	ldr	r0, [pc, #8]	; (80dc0 <udi_cdc_line_coding_received+0xc>)
   80db8:	4b02      	ldr	r3, [pc, #8]	; (80dc4 <udi_cdc_line_coding_received+0x10>)
   80dba:	4798      	blx	r3
   80dbc:	bd08      	pop	{r3, pc}
   80dbe:	bf00      	nop
   80dc0:	20070b00 	.word	0x20070b00
   80dc4:	00080ce9 	.word	0x00080ce9

00080dc8 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
   80dc8:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   80dca:	2300      	movs	r3, #0
   80dcc:	4a11      	ldr	r2, [pc, #68]	; (80e14 <udi_cdc_comm_enable+0x4c>)
   80dce:	7013      	strb	r3, [r2, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   80dd0:	4a11      	ldr	r2, [pc, #68]	; (80e18 <udi_cdc_comm_enable+0x50>)
   80dd2:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   80dd4:	4a11      	ldr	r2, [pc, #68]	; (80e1c <udi_cdc_comm_enable+0x54>)
   80dd6:	21a1      	movs	r1, #161	; 0xa1
   80dd8:	7011      	strb	r1, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   80dda:	2120      	movs	r1, #32
   80ddc:	7051      	strb	r1, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   80dde:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   80de0:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   80de2:	2102      	movs	r1, #2
   80de4:	80d1      	strh	r1, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   80de6:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   80de8:	480d      	ldr	r0, [pc, #52]	; (80e20 <udi_cdc_comm_enable+0x58>)
   80dea:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   80dee:	6002      	str	r2, [r0, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   80df0:	7103      	strb	r3, [r0, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   80df2:	7143      	strb	r3, [r0, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   80df4:	2308      	movs	r3, #8
   80df6:	7183      	strb	r3, [r0, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   80df8:	4b0a      	ldr	r3, [pc, #40]	; (80e24 <udi_cdc_comm_enable+0x5c>)
   80dfa:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   80dfc:	4b0a      	ldr	r3, [pc, #40]	; (80e28 <udi_cdc_comm_enable+0x60>)
   80dfe:	4798      	blx	r3
   80e00:	4602      	mov	r2, r0
   80e02:	b120      	cbz	r0, 80e0e <udi_cdc_comm_enable+0x46>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   80e04:	4903      	ldr	r1, [pc, #12]	; (80e14 <udi_cdc_comm_enable+0x4c>)
   80e06:	780b      	ldrb	r3, [r1, #0]
   80e08:	3301      	adds	r3, #1
   80e0a:	b2db      	uxtb	r3, r3
   80e0c:	700b      	strb	r3, [r1, #0]
	return true;
}
   80e0e:	4610      	mov	r0, r2
   80e10:	bd08      	pop	{r3, pc}
   80e12:	bf00      	nop
   80e14:	20070f14 	.word	0x20070f14
   80e18:	20071340 	.word	0x20071340
   80e1c:	20070f2c 	.word	0x20070f2c
   80e20:	20070b00 	.word	0x20070b00
   80e24:	00080ce9 	.word	0x00080ce9
   80e28:	00083b01 	.word	0x00083b01

00080e2c <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   80e2c:	4b45      	ldr	r3, [pc, #276]	; (80f44 <udi_cdc_tx_send+0x118>)
   80e2e:	781b      	ldrb	r3, [r3, #0]
   80e30:	f013 0fff 	tst.w	r3, #255	; 0xff
   80e34:	f040 8084 	bne.w	80f40 <udi_cdc_tx_send+0x114>
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   80e38:	b530      	push	{r4, r5, lr}
   80e3a:	b085      	sub	sp, #20
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   80e3c:	4b42      	ldr	r3, [pc, #264]	; (80f48 <udi_cdc_tx_send+0x11c>)
   80e3e:	4798      	blx	r3
   80e40:	b130      	cbz	r0, 80e50 <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80e42:	4b42      	ldr	r3, [pc, #264]	; (80f4c <udi_cdc_tx_send+0x120>)
   80e44:	881c      	ldrh	r4, [r3, #0]
   80e46:	4b42      	ldr	r3, [pc, #264]	; (80f50 <udi_cdc_tx_send+0x124>)
   80e48:	4798      	blx	r3
   80e4a:	4284      	cmp	r4, r0
   80e4c:	d106      	bne.n	80e5c <udi_cdc_tx_send+0x30>
   80e4e:	e075      	b.n	80f3c <udi_cdc_tx_send+0x110>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   80e50:	4b3e      	ldr	r3, [pc, #248]	; (80f4c <udi_cdc_tx_send+0x120>)
   80e52:	881c      	ldrh	r4, [r3, #0]
   80e54:	4b3f      	ldr	r3, [pc, #252]	; (80f54 <udi_cdc_tx_send+0x128>)
   80e56:	4798      	blx	r3
   80e58:	4284      	cmp	r4, r0
   80e5a:	d06f      	beq.n	80f3c <udi_cdc_tx_send+0x110>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80e5c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   80e60:	fab3 f383 	clz	r3, r3
   80e64:	095b      	lsrs	r3, r3, #5
   80e66:	9303      	str	r3, [sp, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80e68:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80e6a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80e6e:	2200      	movs	r2, #0
   80e70:	4b39      	ldr	r3, [pc, #228]	; (80f58 <udi_cdc_tx_send+0x12c>)
   80e72:	701a      	strb	r2, [r3, #0]
	return flags;
   80e74:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   80e76:	4b39      	ldr	r3, [pc, #228]	; (80f5c <udi_cdc_tx_send+0x130>)
   80e78:	781c      	ldrb	r4, [r3, #0]
   80e7a:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80e7c:	4b38      	ldr	r3, [pc, #224]	; (80f60 <udi_cdc_tx_send+0x134>)
   80e7e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80e82:	b9db      	cbnz	r3, 80ebc <udi_cdc_tx_send+0x90>
		sof_zlp_counter++;
   80e84:	4a37      	ldr	r2, [pc, #220]	; (80f64 <udi_cdc_tx_send+0x138>)
   80e86:	8813      	ldrh	r3, [r2, #0]
   80e88:	3301      	adds	r3, #1
   80e8a:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   80e8c:	4b2e      	ldr	r3, [pc, #184]	; (80f48 <udi_cdc_tx_send+0x11c>)
   80e8e:	4798      	blx	r3
   80e90:	b918      	cbnz	r0, 80e9a <udi_cdc_tx_send+0x6e>
   80e92:	4b34      	ldr	r3, [pc, #208]	; (80f64 <udi_cdc_tx_send+0x138>)
   80e94:	881b      	ldrh	r3, [r3, #0]
   80e96:	2b63      	cmp	r3, #99	; 0x63
   80e98:	d907      	bls.n	80eaa <udi_cdc_tx_send+0x7e>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   80e9a:	4b2b      	ldr	r3, [pc, #172]	; (80f48 <udi_cdc_tx_send+0x11c>)
   80e9c:	4798      	blx	r3
   80e9e:	b168      	cbz	r0, 80ebc <udi_cdc_tx_send+0x90>
   80ea0:	4b30      	ldr	r3, [pc, #192]	; (80f64 <udi_cdc_tx_send+0x138>)
   80ea2:	881b      	ldrh	r3, [r3, #0]
   80ea4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   80ea8:	d208      	bcs.n	80ebc <udi_cdc_tx_send+0x90>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80eaa:	2d00      	cmp	r5, #0
   80eac:	d046      	beq.n	80f3c <udi_cdc_tx_send+0x110>
		cpu_irq_enable();
   80eae:	2201      	movs	r2, #1
   80eb0:	4b29      	ldr	r3, [pc, #164]	; (80f58 <udi_cdc_tx_send+0x12c>)
   80eb2:	701a      	strb	r2, [r3, #0]
   80eb4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80eb8:	b662      	cpsie	i
   80eba:	e03f      	b.n	80f3c <udi_cdc_tx_send+0x110>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   80ebc:	2200      	movs	r2, #0
   80ebe:	4b29      	ldr	r3, [pc, #164]	; (80f64 <udi_cdc_tx_send+0x138>)
   80ec0:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80ec2:	4b29      	ldr	r3, [pc, #164]	; (80f68 <udi_cdc_tx_send+0x13c>)
   80ec4:	781b      	ldrb	r3, [r3, #0]
   80ec6:	f013 0fff 	tst.w	r3, #255	; 0xff
   80eca:	d105      	bne.n	80ed8 <udi_cdc_tx_send+0xac>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80ecc:	fab4 f384 	clz	r3, r4
   80ed0:	095b      	lsrs	r3, r3, #5
   80ed2:	4a22      	ldr	r2, [pc, #136]	; (80f5c <udi_cdc_tx_send+0x130>)
   80ed4:	7013      	strb	r3, [r2, #0]
   80ed6:	e002      	b.n	80ede <udi_cdc_tx_send+0xb2>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   80ed8:	fab4 f484 	clz	r4, r4
   80edc:	0964      	lsrs	r4, r4, #5
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80ede:	2201      	movs	r2, #1
   80ee0:	4b18      	ldr	r3, [pc, #96]	; (80f44 <udi_cdc_tx_send+0x118>)
   80ee2:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80ee4:	b125      	cbz	r5, 80ef0 <udi_cdc_tx_send+0xc4>
		cpu_irq_enable();
   80ee6:	4b1c      	ldr	r3, [pc, #112]	; (80f58 <udi_cdc_tx_send+0x12c>)
   80ee8:	701a      	strb	r2, [r3, #0]
   80eea:	f3bf 8f5f 	dmb	sy
   80eee:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   80ef0:	4625      	mov	r5, r4
   80ef2:	4b1b      	ldr	r3, [pc, #108]	; (80f60 <udi_cdc_tx_send+0x134>)
   80ef4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80efc:	bf14      	ite	ne
   80efe:	2401      	movne	r4, #1
   80f00:	2400      	moveq	r4, #0
	if (b_short_packet) {
   80f02:	d00c      	beq.n	80f1e <udi_cdc_tx_send+0xf2>
		if (udd_is_high_speed()) {
   80f04:	4b10      	ldr	r3, [pc, #64]	; (80f48 <udi_cdc_tx_send+0x11c>)
   80f06:	4798      	blx	r3
   80f08:	b120      	cbz	r0, 80f14 <udi_cdc_tx_send+0xe8>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   80f0a:	4b11      	ldr	r3, [pc, #68]	; (80f50 <udi_cdc_tx_send+0x124>)
   80f0c:	4798      	blx	r3
   80f0e:	4b0f      	ldr	r3, [pc, #60]	; (80f4c <udi_cdc_tx_send+0x120>)
   80f10:	8018      	strh	r0, [r3, #0]
   80f12:	e007      	b.n	80f24 <udi_cdc_tx_send+0xf8>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   80f14:	4b0f      	ldr	r3, [pc, #60]	; (80f54 <udi_cdc_tx_send+0x128>)
   80f16:	4798      	blx	r3
   80f18:	4b0c      	ldr	r3, [pc, #48]	; (80f4c <udi_cdc_tx_send+0x120>)
   80f1a:	8018      	strh	r0, [r3, #0]
   80f1c:	e002      	b.n	80f24 <udi_cdc_tx_send+0xf8>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   80f1e:	2200      	movs	r2, #0
   80f20:	4b0a      	ldr	r3, [pc, #40]	; (80f4c <udi_cdc_tx_send+0x120>)
   80f22:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   80f24:	4b0e      	ldr	r3, [pc, #56]	; (80f60 <udi_cdc_tx_send+0x134>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   80f26:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   80f2a:	4a10      	ldr	r2, [pc, #64]	; (80f6c <udi_cdc_tx_send+0x140>)
   80f2c:	9200      	str	r2, [sp, #0]
   80f2e:	4a10      	ldr	r2, [pc, #64]	; (80f70 <udi_cdc_tx_send+0x144>)
   80f30:	eb02 2245 	add.w	r2, r2, r5, lsl #9
   80f34:	4621      	mov	r1, r4
   80f36:	2081      	movs	r0, #129	; 0x81
   80f38:	4c0e      	ldr	r4, [pc, #56]	; (80f74 <udi_cdc_tx_send+0x148>)
   80f3a:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   80f3c:	b005      	add	sp, #20
   80f3e:	bd30      	pop	{r4, r5, pc}
   80f40:	4770      	bx	lr
   80f42:	bf00      	nop
   80f44:	20070f28 	.word	0x20070f28
   80f48:	00082c39 	.word	0x00082c39
   80f4c:	20070f20 	.word	0x20070f20
   80f50:	00082c95 	.word	0x00082c95
   80f54:	00082c85 	.word	0x00082c85
   80f58:	20070277 	.word	0x20070277
   80f5c:	20070b08 	.word	0x20070b08
   80f60:	20070b0c 	.word	0x20070b0c
   80f64:	20070b0a 	.word	0x20070b0a
   80f68:	2007133c 	.word	0x2007133c
   80f6c:	00080f79 	.word	0x00080f79
   80f70:	20070b10 	.word	0x20070b10
   80f74:	00082efd 	.word	0x00082efd

00080f78 <udi_cdc_data_sent>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   80f78:	b988      	cbnz	r0, 80f9e <udi_cdc_data_sent+0x26>
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   80f7a:	b508      	push	{r3, lr}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80f7c:	4b08      	ldr	r3, [pc, #32]	; (80fa0 <udi_cdc_data_sent+0x28>)
   80f7e:	781b      	ldrb	r3, [r3, #0]
   80f80:	f013 0fff 	tst.w	r3, #255	; 0xff
   80f84:	bf0c      	ite	eq
   80f86:	2201      	moveq	r2, #1
   80f88:	2200      	movne	r2, #0
   80f8a:	4b06      	ldr	r3, [pc, #24]	; (80fa4 <udi_cdc_data_sent+0x2c>)
   80f8c:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80f90:	4b05      	ldr	r3, [pc, #20]	; (80fa8 <udi_cdc_data_sent+0x30>)
   80f92:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   80f94:	4b05      	ldr	r3, [pc, #20]	; (80fac <udi_cdc_data_sent+0x34>)
   80f96:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   80f98:	4b05      	ldr	r3, [pc, #20]	; (80fb0 <udi_cdc_data_sent+0x38>)
   80f9a:	4798      	blx	r3
   80f9c:	bd08      	pop	{r3, pc}
   80f9e:	4770      	bx	lr
   80fa0:	20070b08 	.word	0x20070b08
   80fa4:	20070b0c 	.word	0x20070b0c
   80fa8:	2007133c 	.word	0x2007133c
   80fac:	20070f28 	.word	0x20070f28
   80fb0:	00080e2d 	.word	0x00080e2d

00080fb4 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   80fb4:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   80fb6:	2000      	movs	r0, #0
   80fb8:	4b01      	ldr	r3, [pc, #4]	; (80fc0 <udi_cdc_data_sof_notify+0xc>)
   80fba:	4798      	blx	r3
   80fbc:	bd08      	pop	{r3, pc}
   80fbe:	bf00      	nop
   80fc0:	00080e2d 	.word	0x00080e2d

00080fc4 <udi_cdc_ctrl_state_notify>:
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	// Send it if possible and state changed
	if ((!udi_cdc_serial_state_msg_ongoing[port])
   80fc4:	4b0d      	ldr	r3, [pc, #52]	; (80ffc <udi_cdc_ctrl_state_notify+0x38>)
   80fc6:	781b      	ldrb	r3, [r3, #0]
   80fc8:	b9bb      	cbnz	r3, 80ffa <udi_cdc_ctrl_state_notify+0x36>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
   80fca:	4b0d      	ldr	r3, [pc, #52]	; (81000 <udi_cdc_ctrl_state_notify+0x3c>)
   80fcc:	881b      	ldrh	r3, [r3, #0]
   80fce:	b29b      	uxth	r3, r3
   80fd0:	4a0c      	ldr	r2, [pc, #48]	; (81004 <udi_cdc_ctrl_state_notify+0x40>)
   80fd2:	8912      	ldrh	r2, [r2, #8]
   80fd4:	429a      	cmp	r2, r3
   80fd6:	d010      	beq.n	80ffa <udi_cdc_ctrl_state_notify+0x36>
	udi_cdc_ctrl_state_notify(port, ep_comm);
}


static void udi_cdc_ctrl_state_notify(uint8_t port, udd_ep_id_t ep)
{
   80fd8:	b510      	push	{r4, lr}
   80fda:	b082      	sub	sp, #8
   80fdc:	4608      	mov	r0, r1

	// Send it if possible and state changed
	if ((!udi_cdc_serial_state_msg_ongoing[port])
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
   80fde:	4b08      	ldr	r3, [pc, #32]	; (81000 <udi_cdc_ctrl_state_notify+0x3c>)
   80fe0:	881b      	ldrh	r3, [r3, #0]
   80fe2:	4a08      	ldr	r2, [pc, #32]	; (81004 <udi_cdc_ctrl_state_notify+0x40>)
   80fe4:	8113      	strh	r3, [r2, #8]
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
				udd_ep_run(ep,
   80fe6:	4b08      	ldr	r3, [pc, #32]	; (81008 <udi_cdc_ctrl_state_notify+0x44>)
   80fe8:	9300      	str	r3, [sp, #0]
   80fea:	230a      	movs	r3, #10
   80fec:	2100      	movs	r1, #0
   80fee:	4c07      	ldr	r4, [pc, #28]	; (8100c <udi_cdc_ctrl_state_notify+0x48>)
   80ff0:	47a0      	blx	r4
	if ((!udi_cdc_serial_state_msg_ongoing[port])
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
   80ff2:	4b02      	ldr	r3, [pc, #8]	; (80ffc <udi_cdc_ctrl_state_notify+0x38>)
   80ff4:	7018      	strb	r0, [r3, #0]
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
				sizeof(uid_cdc_state_msg[0]),
				udi_cdc_serial_state_msg_sent);
	}
}
   80ff6:	b002      	add	sp, #8
   80ff8:	bd10      	pop	{r4, pc}
   80ffa:	4770      	bx	lr
   80ffc:	20070f18 	.word	0x20070f18
   81000:	20071340 	.word	0x20071340
   81004:	20070f2c 	.word	0x20070f2c
   81008:	00081071 	.word	0x00081071
   8100c:	00082efd 	.word	0x00082efd

00081010 <udi_cdc_ctrl_state_change>:

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}

static void udi_cdc_ctrl_state_change(uint8_t port, bool b_set, le16_t bit_mask)
{
   81010:	b500      	push	{lr}
   81012:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81014:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81018:	fab3 f383 	clz	r3, r3
   8101c:	095b      	lsrs	r3, r3, #5
   8101e:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81020:	b672      	cpsid	i
   81022:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81026:	2000      	movs	r0, #0
   81028:	4b0e      	ldr	r3, [pc, #56]	; (81064 <udi_cdc_ctrl_state_change+0x54>)
   8102a:	7018      	strb	r0, [r3, #0]
	return flags;
   8102c:	9801      	ldr	r0, [sp, #4]
	port = 0;
#endif

	// Update state
	flags = cpu_irq_save(); // Protect udi_cdc_state
	if (b_set) {
   8102e:	b129      	cbz	r1, 8103c <udi_cdc_ctrl_state_change+0x2c>
		udi_cdc_state[port] |= bit_mask;
   81030:	490d      	ldr	r1, [pc, #52]	; (81068 <udi_cdc_ctrl_state_change+0x58>)
   81032:	880b      	ldrh	r3, [r1, #0]
   81034:	b29b      	uxth	r3, r3
   81036:	431a      	orrs	r2, r3
   81038:	800a      	strh	r2, [r1, #0]
   8103a:	e005      	b.n	81048 <udi_cdc_ctrl_state_change+0x38>
	} else {
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
   8103c:	490a      	ldr	r1, [pc, #40]	; (81068 <udi_cdc_ctrl_state_change+0x58>)
   8103e:	880b      	ldrh	r3, [r1, #0]
   81040:	b29b      	uxth	r3, r3
   81042:	ea23 0202 	bic.w	r2, r3, r2
   81046:	800a      	strh	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81048:	b128      	cbz	r0, 81056 <udi_cdc_ctrl_state_change+0x46>
		cpu_irq_enable();
   8104a:	2201      	movs	r2, #1
   8104c:	4b05      	ldr	r3, [pc, #20]	; (81064 <udi_cdc_ctrl_state_change+0x54>)
   8104e:	701a      	strb	r2, [r3, #0]
   81050:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81054:	b662      	cpsie	i
#undef UDI_CDC_PORT_TO_COMM_EP
	default:
		ep_comm = UDI_CDC_COMM_EP_0;
		break;
	}
	udi_cdc_ctrl_state_notify(port, ep_comm);
   81056:	2183      	movs	r1, #131	; 0x83
   81058:	2000      	movs	r0, #0
   8105a:	4b04      	ldr	r3, [pc, #16]	; (8106c <udi_cdc_ctrl_state_change+0x5c>)
   8105c:	4798      	blx	r3
}
   8105e:	b003      	add	sp, #12
   81060:	f85d fb04 	ldr.w	pc, [sp], #4
   81064:	20070277 	.word	0x20070277
   81068:	20071340 	.word	0x20071340
   8106c:	00080fc5 	.word	0x00080fc5

00081070 <udi_cdc_serial_state_msg_sent>:
	}
}


static void udi_cdc_serial_state_msg_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   81070:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	udi_cdc_serial_state_msg_ongoing[port] = false;
   81072:	2000      	movs	r0, #0
   81074:	4b08      	ldr	r3, [pc, #32]	; (81098 <udi_cdc_serial_state_msg_sent+0x28>)
   81076:	7018      	strb	r0, [r3, #0]

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
   81078:	4908      	ldr	r1, [pc, #32]	; (8109c <udi_cdc_serial_state_msg_sent+0x2c>)
   8107a:	880b      	ldrh	r3, [r1, #0]
   8107c:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
   81080:	041b      	lsls	r3, r3, #16
   81082:	0c1b      	lsrs	r3, r3, #16
   81084:	800b      	strh	r3, [r1, #0]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
   81086:	4906      	ldr	r1, [pc, #24]	; (810a0 <udi_cdc_serial_state_msg_sent+0x30>)
   81088:	890b      	ldrh	r3, [r1, #8]
   8108a:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
   8108e:	810b      	strh	r3, [r1, #8]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(port, ep);
   81090:	4611      	mov	r1, r2
   81092:	4b04      	ldr	r3, [pc, #16]	; (810a4 <udi_cdc_serial_state_msg_sent+0x34>)
   81094:	4798      	blx	r3
   81096:	bd08      	pop	{r3, pc}
   81098:	20070f18 	.word	0x20070f18
   8109c:	20071340 	.word	0x20071340
   810a0:	20070f2c 	.word	0x20070f2c
   810a4:	00080fc5 	.word	0x00080fc5

000810a8 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
   810a8:	b508      	push	{r3, lr}
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   810aa:	4a06      	ldr	r2, [pc, #24]	; (810c4 <udi_cdc_data_disable+0x1c>)
   810ac:	7813      	ldrb	r3, [r2, #0]
   810ae:	3b01      	subs	r3, #1
   810b0:	b2db      	uxtb	r3, r3
   810b2:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   810b4:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   810b6:	4b04      	ldr	r3, [pc, #16]	; (810c8 <udi_cdc_data_disable+0x20>)
   810b8:	4798      	blx	r3
	udi_cdc_data_running = false;
   810ba:	2200      	movs	r2, #0
   810bc:	4b03      	ldr	r3, [pc, #12]	; (810cc <udi_cdc_data_disable+0x24>)
   810be:	701a      	strb	r2, [r3, #0]
   810c0:	bd08      	pop	{r3, pc}
   810c2:	bf00      	nop
   810c4:	20070b07 	.word	0x20070b07
   810c8:	00083b11 	.word	0x00083b11
   810cc:	20070f22 	.word	0x20070f22

000810d0 <udi_cdc_comm_setup>:
}

bool udi_cdc_comm_setup(void)
{
   810d0:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   810d2:	4b22      	ldr	r3, [pc, #136]	; (8115c <udi_cdc_comm_setup+0x8c>)
   810d4:	781b      	ldrb	r3, [r3, #0]
   810d6:	f013 0f80 	tst.w	r3, #128	; 0x80
   810da:	d012      	beq.n	81102 <udi_cdc_comm_setup+0x32>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   810dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
   810e0:	2b20      	cmp	r3, #32
   810e2:	d12e      	bne.n	81142 <udi_cdc_comm_setup+0x72>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   810e4:	4b1d      	ldr	r3, [pc, #116]	; (8115c <udi_cdc_comm_setup+0x8c>)
   810e6:	785b      	ldrb	r3, [r3, #1]
   810e8:	2b21      	cmp	r3, #33	; 0x21
   810ea:	d12c      	bne.n	81146 <udi_cdc_comm_setup+0x76>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   810ec:	4b1b      	ldr	r3, [pc, #108]	; (8115c <udi_cdc_comm_setup+0x8c>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   810ee:	88db      	ldrh	r3, [r3, #6]
   810f0:	2b07      	cmp	r3, #7
   810f2:	d12a      	bne.n	8114a <udi_cdc_comm_setup+0x7a>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   810f4:	4b19      	ldr	r3, [pc, #100]	; (8115c <udi_cdc_comm_setup+0x8c>)
   810f6:	4a1a      	ldr	r2, [pc, #104]	; (81160 <udi_cdc_comm_setup+0x90>)
   810f8:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   810fa:	2207      	movs	r2, #7
   810fc:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   810fe:	2001      	movs	r0, #1
   81100:	bd08      	pop	{r3, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   81102:	f003 0360 	and.w	r3, r3, #96	; 0x60
   81106:	2b20      	cmp	r3, #32
   81108:	d121      	bne.n	8114e <udi_cdc_comm_setup+0x7e>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   8110a:	4b14      	ldr	r3, [pc, #80]	; (8115c <udi_cdc_comm_setup+0x8c>)
   8110c:	785b      	ldrb	r3, [r3, #1]
   8110e:	2b20      	cmp	r3, #32
   81110:	d002      	beq.n	81118 <udi_cdc_comm_setup+0x48>
   81112:	2b22      	cmp	r3, #34	; 0x22
   81114:	d00d      	beq.n	81132 <udi_cdc_comm_setup+0x62>
   81116:	e01c      	b.n	81152 <udi_cdc_comm_setup+0x82>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   81118:	4b10      	ldr	r3, [pc, #64]	; (8115c <udi_cdc_comm_setup+0x8c>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   8111a:	88db      	ldrh	r3, [r3, #6]
   8111c:	2b07      	cmp	r3, #7
   8111e:	d11a      	bne.n	81156 <udi_cdc_comm_setup+0x86>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   81120:	4b0e      	ldr	r3, [pc, #56]	; (8115c <udi_cdc_comm_setup+0x8c>)
   81122:	4a10      	ldr	r2, [pc, #64]	; (81164 <udi_cdc_comm_setup+0x94>)
   81124:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   81126:	4a0e      	ldr	r2, [pc, #56]	; (81160 <udi_cdc_comm_setup+0x90>)
   81128:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   8112a:	2207      	movs	r2, #7
   8112c:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   8112e:	2001      	movs	r0, #1
   81130:	bd08      	pop	{r3, pc}
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
   81132:	4b0a      	ldr	r3, [pc, #40]	; (8115c <udi_cdc_comm_setup+0x8c>)
   81134:	7898      	ldrb	r0, [r3, #2]
   81136:	f000 0001 	and.w	r0, r0, #1
   8113a:	4b0b      	ldr	r3, [pc, #44]	; (81168 <udi_cdc_comm_setup+0x98>)
   8113c:	4798      	blx	r3
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
   8113e:	2001      	movs	r0, #1
   81140:	bd08      	pop	{r3, pc}
			}
		}
	}
	return false;  // request Not supported
   81142:	2000      	movs	r0, #0
   81144:	bd08      	pop	{r3, pc}
   81146:	2000      	movs	r0, #0
   81148:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   8114a:	2000      	movs	r0, #0
   8114c:	bd08      	pop	{r3, pc}
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   8114e:	2000      	movs	r0, #0
   81150:	bd08      	pop	{r3, pc}
   81152:	2000      	movs	r0, #0
   81154:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   81156:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   81158:	bd08      	pop	{r3, pc}
   8115a:	bf00      	nop
   8115c:	20071684 	.word	0x20071684
   81160:	20070b00 	.word	0x20070b00
   81164:	00080db5 	.word	0x00080db5
   81168:	00083b21 	.word	0x00083b21

0008116c <udi_cdc_signal_framing_error>:
{
	udi_cdc_ctrl_state_change(0, b_set, CDC_SERIAL_STATE_DSR);
}

void udi_cdc_signal_framing_error(void)
{
   8116c:	b508      	push	{r3, lr}
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_FRAMING);
   8116e:	2210      	movs	r2, #16
   81170:	2101      	movs	r1, #1
   81172:	2000      	movs	r0, #0
   81174:	4b01      	ldr	r3, [pc, #4]	; (8117c <udi_cdc_signal_framing_error+0x10>)
   81176:	4798      	blx	r3
   81178:	bd08      	pop	{r3, pc}
   8117a:	bf00      	nop
   8117c:	00081011 	.word	0x00081011

00081180 <udi_cdc_signal_overrun>:
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
}

void udi_cdc_signal_overrun(void)
{
   81180:	b508      	push	{r3, lr}
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
   81182:	2240      	movs	r2, #64	; 0x40
   81184:	2101      	movs	r1, #1
   81186:	2000      	movs	r0, #0
   81188:	4b01      	ldr	r3, [pc, #4]	; (81190 <udi_cdc_signal_overrun+0x10>)
   8118a:	4798      	blx	r3
   8118c:	bd08      	pop	{r3, pc}
   8118e:	bf00      	nop
   81190:	00081011 	.word	0x00081011

00081194 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
   81194:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81196:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8119a:	fab3 f383 	clz	r3, r3
   8119e:	095b      	lsrs	r3, r3, #5
   811a0:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   811a2:	b672      	cpsid	i
   811a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   811a8:	2200      	movs	r2, #0
   811aa:	4b0b      	ldr	r3, [pc, #44]	; (811d8 <udi_cdc_multi_get_nb_received_data+0x44>)
   811ac:	701a      	strb	r2, [r3, #0]
	return flags;
   811ae:	9a01      	ldr	r2, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   811b0:	4b0a      	ldr	r3, [pc, #40]	; (811dc <udi_cdc_multi_get_nb_received_data+0x48>)
   811b2:	8818      	ldrh	r0, [r3, #0]
   811b4:	b280      	uxth	r0, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   811b6:	4b0a      	ldr	r3, [pc, #40]	; (811e0 <udi_cdc_multi_get_nb_received_data+0x4c>)
   811b8:	781b      	ldrb	r3, [r3, #0]
   811ba:	b2db      	uxtb	r3, r3
   811bc:	4909      	ldr	r1, [pc, #36]	; (811e4 <udi_cdc_multi_get_nb_received_data+0x50>)
   811be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   811c2:	b29b      	uxth	r3, r3
   811c4:	1a18      	subs	r0, r3, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   811c6:	b12a      	cbz	r2, 811d4 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
   811c8:	2201      	movs	r2, #1
   811ca:	4b03      	ldr	r3, [pc, #12]	; (811d8 <udi_cdc_multi_get_nb_received_data+0x44>)
   811cc:	701a      	strb	r2, [r3, #0]
   811ce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   811d2:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   811d4:	b002      	add	sp, #8
   811d6:	4770      	bx	lr
   811d8:	20070277 	.word	0x20070277
   811dc:	20070f1c 	.word	0x20070f1c
   811e0:	20070f24 	.word	0x20070f24
   811e4:	20070f10 	.word	0x20070f10

000811e8 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   811e8:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   811ea:	4b03      	ldr	r3, [pc, #12]	; (811f8 <udi_cdc_multi_is_rx_ready+0x10>)
   811ec:	4798      	blx	r3
}
   811ee:	3000      	adds	r0, #0
   811f0:	bf18      	it	ne
   811f2:	2001      	movne	r0, #1
   811f4:	bd08      	pop	{r3, pc}
   811f6:	bf00      	nop
   811f8:	00081195 	.word	0x00081195

000811fc <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   811fc:	b510      	push	{r4, lr}
   811fe:	b084      	sub	sp, #16
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81200:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81204:	fab3 f383 	clz	r3, r3
   81208:	095b      	lsrs	r3, r3, #5
   8120a:	9303      	str	r3, [sp, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8120c:	b672      	cpsid	i
   8120e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81212:	2200      	movs	r2, #0
   81214:	4b21      	ldr	r3, [pc, #132]	; (8129c <udi_cdc_rx_start+0xa0>)
   81216:	701a      	strb	r2, [r3, #0]
	return flags;
   81218:	9b03      	ldr	r3, [sp, #12]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   8121a:	4a21      	ldr	r2, [pc, #132]	; (812a0 <udi_cdc_rx_start+0xa4>)
   8121c:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   8121e:	4a21      	ldr	r2, [pc, #132]	; (812a4 <udi_cdc_rx_start+0xa8>)
   81220:	7812      	ldrb	r2, [r2, #0]
   81222:	f012 0fff 	tst.w	r2, #255	; 0xff
   81226:	d109      	bne.n	8123c <udi_cdc_rx_start+0x40>
   81228:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   8122a:	4a1f      	ldr	r2, [pc, #124]	; (812a8 <udi_cdc_rx_start+0xac>)
   8122c:	8811      	ldrh	r1, [r2, #0]
   8122e:	b289      	uxth	r1, r1
   81230:	4a1e      	ldr	r2, [pc, #120]	; (812ac <udi_cdc_rx_start+0xb0>)
   81232:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   81236:	b292      	uxth	r2, r2
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   81238:	4291      	cmp	r1, r2
   8123a:	d208      	bcs.n	8124e <udi_cdc_rx_start+0x52>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8123c:	b353      	cbz	r3, 81294 <udi_cdc_rx_start+0x98>
		cpu_irq_enable();
   8123e:	2201      	movs	r2, #1
   81240:	4b16      	ldr	r3, [pc, #88]	; (8129c <udi_cdc_rx_start+0xa0>)
   81242:	701a      	strb	r2, [r3, #0]
   81244:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81248:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   8124a:	2000      	movs	r0, #0
   8124c:	e023      	b.n	81296 <udi_cdc_rx_start+0x9a>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   8124e:	2100      	movs	r1, #0
   81250:	4a15      	ldr	r2, [pc, #84]	; (812a8 <udi_cdc_rx_start+0xac>)
   81252:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   81254:	fab4 f284 	clz	r2, r4
   81258:	0952      	lsrs	r2, r2, #5
   8125a:	4911      	ldr	r1, [pc, #68]	; (812a0 <udi_cdc_rx_start+0xa4>)
   8125c:	700a      	strb	r2, [r1, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   8125e:	2101      	movs	r1, #1
   81260:	4a10      	ldr	r2, [pc, #64]	; (812a4 <udi_cdc_rx_start+0xa8>)
   81262:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81264:	b123      	cbz	r3, 81270 <udi_cdc_rx_start+0x74>
		cpu_irq_enable();
   81266:	4b0d      	ldr	r3, [pc, #52]	; (8129c <udi_cdc_rx_start+0xa0>)
   81268:	7019      	strb	r1, [r3, #0]
   8126a:	f3bf 8f5f 	dmb	sy
   8126e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   81270:	2000      	movs	r0, #0
   81272:	4b0f      	ldr	r3, [pc, #60]	; (812b0 <udi_cdc_rx_start+0xb4>)
   81274:	4798      	blx	r3
   81276:	b108      	cbz	r0, 8127c <udi_cdc_rx_start+0x80>
		UDI_CDC_RX_NOTIFY(port);
   81278:	4b0e      	ldr	r3, [pc, #56]	; (812b4 <udi_cdc_rx_start+0xb8>)
   8127a:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   8127c:	4b0e      	ldr	r3, [pc, #56]	; (812b8 <udi_cdc_rx_start+0xbc>)
   8127e:	9300      	str	r3, [sp, #0]
   81280:	f44f 7300 	mov.w	r3, #512	; 0x200
   81284:	4a0d      	ldr	r2, [pc, #52]	; (812bc <udi_cdc_rx_start+0xc0>)
   81286:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8128a:	2101      	movs	r1, #1
   8128c:	2002      	movs	r0, #2
   8128e:	4c0c      	ldr	r4, [pc, #48]	; (812c0 <udi_cdc_rx_start+0xc4>)
   81290:	47a0      	blx	r4
   81292:	e000      	b.n	81296 <udi_cdc_rx_start+0x9a>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   81294:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   81296:	b004      	add	sp, #16
   81298:	bd10      	pop	{r4, pc}
   8129a:	bf00      	nop
   8129c:	20070277 	.word	0x20070277
   812a0:	20070f24 	.word	0x20070f24
   812a4:	20071338 	.word	0x20071338
   812a8:	20070f1c 	.word	0x20070f1c
   812ac:	20070f10 	.word	0x20070f10
   812b0:	000811e9 	.word	0x000811e9
   812b4:	00080cb9 	.word	0x00080cb9
   812b8:	00081355 	.word	0x00081355
   812bc:	20070f38 	.word	0x20070f38
   812c0:	00082efd 	.word	0x00082efd

000812c4 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   812c4:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   812c6:	2400      	movs	r4, #0
   812c8:	4b15      	ldr	r3, [pc, #84]	; (81320 <udi_cdc_data_enable+0x5c>)
   812ca:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   812cc:	4b15      	ldr	r3, [pc, #84]	; (81324 <udi_cdc_data_enable+0x60>)
   812ce:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   812d0:	4b15      	ldr	r3, [pc, #84]	; (81328 <udi_cdc_data_enable+0x64>)
   812d2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   812d4:	4b15      	ldr	r3, [pc, #84]	; (8132c <udi_cdc_data_enable+0x68>)
   812d6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   812d8:	4b15      	ldr	r3, [pc, #84]	; (81330 <udi_cdc_data_enable+0x6c>)
   812da:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   812dc:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   812de:	4b15      	ldr	r3, [pc, #84]	; (81334 <udi_cdc_data_enable+0x70>)
   812e0:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   812e2:	4620      	mov	r0, r4
   812e4:	4b14      	ldr	r3, [pc, #80]	; (81338 <udi_cdc_data_enable+0x74>)
   812e6:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   812e8:	4b14      	ldr	r3, [pc, #80]	; (8133c <udi_cdc_data_enable+0x78>)
   812ea:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   812ec:	4b14      	ldr	r3, [pc, #80]	; (81340 <udi_cdc_data_enable+0x7c>)
   812ee:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   812f0:	4b14      	ldr	r3, [pc, #80]	; (81344 <udi_cdc_data_enable+0x80>)
   812f2:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   812f4:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   812f6:	4b14      	ldr	r3, [pc, #80]	; (81348 <udi_cdc_data_enable+0x84>)
   812f8:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   812fa:	4620      	mov	r0, r4
   812fc:	4b13      	ldr	r3, [pc, #76]	; (8134c <udi_cdc_data_enable+0x88>)
   812fe:	4798      	blx	r3
   81300:	4601      	mov	r1, r0
   81302:	b158      	cbz	r0, 8131c <udi_cdc_data_enable+0x58>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   81304:	4a06      	ldr	r2, [pc, #24]	; (81320 <udi_cdc_data_enable+0x5c>)
   81306:	7813      	ldrb	r3, [r2, #0]
   81308:	3301      	adds	r3, #1
   8130a:	b2db      	uxtb	r3, r3
   8130c:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   8130e:	7813      	ldrb	r3, [r2, #0]
   81310:	b2db      	uxtb	r3, r3
   81312:	2b01      	cmp	r3, #1
   81314:	d102      	bne.n	8131c <udi_cdc_data_enable+0x58>
		udi_cdc_data_running = true;
   81316:	2201      	movs	r2, #1
   81318:	4b0d      	ldr	r3, [pc, #52]	; (81350 <udi_cdc_data_enable+0x8c>)
   8131a:	701a      	strb	r2, [r3, #0]
	}
	return true;
}
   8131c:	4608      	mov	r0, r1
   8131e:	bd10      	pop	{r4, pc}
   81320:	20070b07 	.word	0x20070b07
   81324:	20070f28 	.word	0x20070f28
   81328:	2007133c 	.word	0x2007133c
   8132c:	20070b08 	.word	0x20070b08
   81330:	20070b0c 	.word	0x20070b0c
   81334:	20070f20 	.word	0x20070f20
   81338:	00080e2d 	.word	0x00080e2d
   8133c:	20071338 	.word	0x20071338
   81340:	20070f24 	.word	0x20070f24
   81344:	20070f10 	.word	0x20070f10
   81348:	20070f1c 	.word	0x20070f1c
   8134c:	000811fd 	.word	0x000811fd
   81350:	20070f22 	.word	0x20070f22

00081354 <udi_cdc_data_received>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   81354:	bb00      	cbnz	r0, 81398 <udi_cdc_data_received+0x44>
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   81356:	b510      	push	{r4, lr}
   81358:	b082      	sub	sp, #8
   8135a:	4610      	mov	r0, r2

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   8135c:	4b0f      	ldr	r3, [pc, #60]	; (8139c <udi_cdc_data_received+0x48>)
   8135e:	781b      	ldrb	r3, [r3, #0]
   81360:	f013 0fff 	tst.w	r3, #255	; 0xff
   81364:	bf0c      	ite	eq
   81366:	2201      	moveq	r2, #1
   81368:	2200      	movne	r2, #0
	if (!n) {
   8136a:	b951      	cbnz	r1, 81382 <udi_cdc_data_received+0x2e>
		udd_ep_run( ep,
   8136c:	4b0c      	ldr	r3, [pc, #48]	; (813a0 <udi_cdc_data_received+0x4c>)
   8136e:	9300      	str	r3, [sp, #0]
   81370:	f44f 7300 	mov.w	r3, #512	; 0x200
   81374:	490b      	ldr	r1, [pc, #44]	; (813a4 <udi_cdc_data_received+0x50>)
   81376:	eb01 2242 	add.w	r2, r1, r2, lsl #9
   8137a:	2101      	movs	r1, #1
   8137c:	4c0a      	ldr	r4, [pc, #40]	; (813a8 <udi_cdc_data_received+0x54>)
   8137e:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   81380:	e008      	b.n	81394 <udi_cdc_data_received+0x40>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   81382:	b289      	uxth	r1, r1
   81384:	4b09      	ldr	r3, [pc, #36]	; (813ac <udi_cdc_data_received+0x58>)
   81386:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   8138a:	2000      	movs	r0, #0
   8138c:	4b08      	ldr	r3, [pc, #32]	; (813b0 <udi_cdc_data_received+0x5c>)
   8138e:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   81390:	4b08      	ldr	r3, [pc, #32]	; (813b4 <udi_cdc_data_received+0x60>)
   81392:	4798      	blx	r3
}
   81394:	b002      	add	sp, #8
   81396:	bd10      	pop	{r4, pc}
   81398:	4770      	bx	lr
   8139a:	bf00      	nop
   8139c:	20070f24 	.word	0x20070f24
   813a0:	00081355 	.word	0x00081355
   813a4:	20070f38 	.word	0x20070f38
   813a8:	00082efd 	.word	0x00082efd
   813ac:	20070f10 	.word	0x20070f10
   813b0:	20071338 	.word	0x20071338
   813b4:	000811fd 	.word	0x000811fd

000813b8 <udi_cdc_is_rx_ready>:
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
   813b8:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_rx_ready(0);
   813ba:	2000      	movs	r0, #0
   813bc:	4b01      	ldr	r3, [pc, #4]	; (813c4 <udi_cdc_is_rx_ready+0xc>)
   813be:	4798      	blx	r3
}
   813c0:	bd08      	pop	{r3, pc}
   813c2:	bf00      	nop
   813c4:	000811e9 	.word	0x000811e9

000813c8 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
   813c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   813cc:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   813ce:	4b25      	ldr	r3, [pc, #148]	; (81464 <udi_cdc_multi_getc+0x9c>)
   813d0:	f893 8006 	ldrb.w	r8, [r3, #6]
   813d4:	f1b8 0f09 	cmp.w	r8, #9
   813d8:	bf14      	ite	ne
   813da:	f04f 0800 	movne.w	r8, #0
   813de:	f04f 0801 	moveq.w	r8, #1
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
   813e2:	f04f 0a00 	mov.w	sl, #0
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   813e6:	4c20      	ldr	r4, [pc, #128]	; (81468 <udi_cdc_multi_getc+0xa0>)
   813e8:	46d1      	mov	r9, sl
   813ea:	4657      	mov	r7, sl
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   813ec:	4d1f      	ldr	r5, [pc, #124]	; (8146c <udi_cdc_multi_getc+0xa4>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   813ee:	4e20      	ldr	r6, [pc, #128]	; (81470 <udi_cdc_multi_getc+0xa8>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   813f0:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   813f4:	fab3 f383 	clz	r3, r3
   813f8:	095b      	lsrs	r3, r3, #5
   813fa:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   813fc:	b672      	cpsid	i
   813fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81402:	7027      	strb	r7, [r4, #0]
	return flags;
   81404:	9801      	ldr	r0, [sp, #4]
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   81406:	882b      	ldrh	r3, [r5, #0]
   81408:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
   8140a:	7832      	ldrb	r2, [r6, #0]
   8140c:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   8140e:	4919      	ldr	r1, [pc, #100]	; (81474 <udi_cdc_multi_getc+0xac>)
   81410:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   81414:	b289      	uxth	r1, r1
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81416:	b120      	cbz	r0, 81422 <udi_cdc_multi_getc+0x5a>
		cpu_irq_enable();
   81418:	2001      	movs	r0, #1
   8141a:	7020      	strb	r0, [r4, #0]
   8141c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81420:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (again) {
   81422:	428b      	cmp	r3, r1
   81424:	d306      	bcc.n	81434 <udi_cdc_multi_getc+0x6c>
		if (!udi_cdc_data_running) {
   81426:	4b14      	ldr	r3, [pc, #80]	; (81478 <udi_cdc_multi_getc+0xb0>)
   81428:	781b      	ldrb	r3, [r3, #0]
   8142a:	f013 0fff 	tst.w	r3, #255	; 0xff
   8142e:	d1df      	bne.n	813f0 <udi_cdc_multi_getc+0x28>
			return 0;
   81430:	2000      	movs	r0, #0
   81432:	e013      	b.n	8145c <udi_cdc_multi_getc+0x94>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
   81434:	4911      	ldr	r1, [pc, #68]	; (8147c <udi_cdc_multi_getc+0xb4>)
   81436:	eb01 2242 	add.w	r2, r1, r2, lsl #9
   8143a:	5cd0      	ldrb	r0, [r2, r3]
   8143c:	ea40 0a0a 	orr.w	sl, r0, sl
	udi_cdc_rx_pos[port] = pos+1;
   81440:	3301      	adds	r3, #1
   81442:	b29b      	uxth	r3, r3
   81444:	802b      	strh	r3, [r5, #0]

	udi_cdc_rx_start(port);
   81446:	4648      	mov	r0, r9
   81448:	4b0d      	ldr	r3, [pc, #52]	; (81480 <udi_cdc_multi_getc+0xb8>)
   8144a:	4798      	blx	r3

	if (b_databit_9) {
   8144c:	f1b8 0f00 	cmp.w	r8, #0
   81450:	d003      	beq.n	8145a <udi_cdc_multi_getc+0x92>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
   81452:	ea4f 2a0a 	mov.w	sl, sl, lsl #8

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
   81456:	46c8      	mov	r8, r9
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
   81458:	e7ca      	b.n	813f0 <udi_cdc_multi_getc+0x28>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
   8145a:	4650      	mov	r0, sl
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
   8145c:	b002      	add	sp, #8
   8145e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81462:	bf00      	nop
   81464:	20070b00 	.word	0x20070b00
   81468:	20070277 	.word	0x20070277
   8146c:	20070f1c 	.word	0x20070f1c
   81470:	20070f24 	.word	0x20070f24
   81474:	20070f10 	.word	0x20070f10
   81478:	20070f22 	.word	0x20070f22
   8147c:	20070f38 	.word	0x20070f38
   81480:	000811fd 	.word	0x000811fd

00081484 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
   81484:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
   81486:	2000      	movs	r0, #0
   81488:	4b01      	ldr	r3, [pc, #4]	; (81490 <udi_cdc_getc+0xc>)
   8148a:	4798      	blx	r3
}
   8148c:	bd08      	pop	{r3, pc}
   8148e:	bf00      	nop
   81490:	000813c9 	.word	0x000813c9

00081494 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   81494:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81496:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8149a:	fab3 f383 	clz	r3, r3
   8149e:	095b      	lsrs	r3, r3, #5
   814a0:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   814a2:	b672      	cpsid	i
   814a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   814a8:	2200      	movs	r2, #0
   814aa:	4b15      	ldr	r3, [pc, #84]	; (81500 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   814ac:	701a      	strb	r2, [r3, #0]
	return flags;
   814ae:	9a01      	ldr	r2, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   814b0:	4b14      	ldr	r3, [pc, #80]	; (81504 <udi_cdc_multi_get_free_tx_buffer+0x70>)
   814b2:	781b      	ldrb	r3, [r3, #0]
   814b4:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   814b6:	4914      	ldr	r1, [pc, #80]	; (81508 <udi_cdc_multi_get_free_tx_buffer+0x74>)
   814b8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   814bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   814c0:	d112      	bne.n	814e8 <udi_cdc_multi_get_free_tx_buffer+0x54>
		if ((!udi_cdc_tx_trans_ongoing[port])
   814c2:	4912      	ldr	r1, [pc, #72]	; (8150c <udi_cdc_multi_get_free_tx_buffer+0x78>)
   814c4:	7809      	ldrb	r1, [r1, #0]
   814c6:	f011 0fff 	tst.w	r1, #255	; 0xff
   814ca:	d10d      	bne.n	814e8 <udi_cdc_multi_get_free_tx_buffer+0x54>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   814cc:	4910      	ldr	r1, [pc, #64]	; (81510 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
   814ce:	7809      	ldrb	r1, [r1, #0]
   814d0:	f011 0fff 	tst.w	r1, #255	; 0xff
   814d4:	d108      	bne.n	814e8 <udi_cdc_multi_get_free_tx_buffer+0x54>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
   814d6:	2001      	movs	r0, #1
   814d8:	490d      	ldr	r1, [pc, #52]	; (81510 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
   814da:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   814dc:	fab3 f383 	clz	r3, r3
   814e0:	095b      	lsrs	r3, r3, #5
   814e2:	4908      	ldr	r1, [pc, #32]	; (81504 <udi_cdc_multi_get_free_tx_buffer+0x70>)
   814e4:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
   814e6:	2000      	movs	r0, #0
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   814e8:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   814ec:	b12a      	cbz	r2, 814fa <udi_cdc_multi_get_free_tx_buffer+0x66>
		cpu_irq_enable();
   814ee:	2201      	movs	r2, #1
   814f0:	4b03      	ldr	r3, [pc, #12]	; (81500 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   814f2:	701a      	strb	r2, [r3, #0]
   814f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   814f8:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   814fa:	b002      	add	sp, #8
   814fc:	4770      	bx	lr
   814fe:	bf00      	nop
   81500:	20070277 	.word	0x20070277
   81504:	20070b08 	.word	0x20070b08
   81508:	20070b0c 	.word	0x20070b0c
   8150c:	20070f28 	.word	0x20070f28
   81510:	2007133c 	.word	0x2007133c

00081514 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   81514:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   81516:	4b03      	ldr	r3, [pc, #12]	; (81524 <udi_cdc_multi_is_tx_ready+0x10>)
   81518:	4798      	blx	r3
}
   8151a:	3000      	adds	r0, #0
   8151c:	bf18      	it	ne
   8151e:	2001      	movne	r0, #1
   81520:	bd08      	pop	{r3, pc}
   81522:	bf00      	nop
   81524:	00081495 	.word	0x00081495

00081528 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
   81528:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_tx_ready(0);
   8152a:	2000      	movs	r0, #0
   8152c:	4b01      	ldr	r3, [pc, #4]	; (81534 <udi_cdc_is_tx_ready+0xc>)
   8152e:	4798      	blx	r3
}
   81530:	bd08      	pop	{r3, pc}
   81532:	bf00      	nop
   81534:	00081515 	.word	0x00081515

00081538 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
   81538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8153c:	b082      	sub	sp, #8
   8153e:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   81540:	4b1d      	ldr	r3, [pc, #116]	; (815b8 <udi_cdc_multi_putc+0x80>)
   81542:	799d      	ldrb	r5, [r3, #6]
   81544:	2d09      	cmp	r5, #9
   81546:	bf14      	ite	ne
   81548:	2500      	movne	r5, #0
   8154a:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   8154c:	4e1b      	ldr	r6, [pc, #108]	; (815bc <udi_cdc_multi_putc+0x84>)
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8154e:	4f1c      	ldr	r7, [pc, #112]	; (815c0 <udi_cdc_multi_putc+0x88>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   81550:	f8df 807c 	ldr.w	r8, [pc, #124]	; 815d0 <udi_cdc_multi_putc+0x98>

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   81554:	2000      	movs	r0, #0
   81556:	47b0      	blx	r6
   81558:	b928      	cbnz	r0, 81566 <udi_cdc_multi_putc+0x2e>
		if (!udi_cdc_data_running) {
   8155a:	4b1a      	ldr	r3, [pc, #104]	; (815c4 <udi_cdc_multi_putc+0x8c>)
   8155c:	781b      	ldrb	r3, [r3, #0]
   8155e:	f013 0fff 	tst.w	r3, #255	; 0xff
   81562:	d1f7      	bne.n	81554 <udi_cdc_multi_putc+0x1c>
   81564:	e024      	b.n	815b0 <udi_cdc_multi_putc+0x78>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81566:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8156a:	fab3 f383 	clz	r3, r3
   8156e:	095b      	lsrs	r3, r3, #5
   81570:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81572:	b672      	cpsid	i
   81574:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81578:	2300      	movs	r3, #0
   8157a:	703b      	strb	r3, [r7, #0]
	return flags;
   8157c:	9801      	ldr	r0, [sp, #4]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8157e:	f898 3000 	ldrb.w	r3, [r8]
   81582:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   81584:	4a10      	ldr	r2, [pc, #64]	; (815c8 <udi_cdc_multi_putc+0x90>)
   81586:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   8158a:	f101 0e01 	add.w	lr, r1, #1
   8158e:	f822 e013 	strh.w	lr, [r2, r3, lsl #1]
   81592:	4a0e      	ldr	r2, [pc, #56]	; (815cc <udi_cdc_multi_putc+0x94>)
   81594:	eb02 2343 	add.w	r3, r2, r3, lsl #9
   81598:	545c      	strb	r4, [r3, r1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8159a:	b120      	cbz	r0, 815a6 <udi_cdc_multi_putc+0x6e>
		cpu_irq_enable();
   8159c:	2301      	movs	r3, #1
   8159e:	703b      	strb	r3, [r7, #0]
   815a0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   815a4:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   815a6:	b115      	cbz	r5, 815ae <udi_cdc_multi_putc+0x76>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   815a8:	1224      	asrs	r4, r4, #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
   815aa:	2500      	movs	r5, #0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
   815ac:	e7d2      	b.n	81554 <udi_cdc_multi_putc+0x1c>
	}
	return true;
   815ae:	2001      	movs	r0, #1
}
   815b0:	b002      	add	sp, #8
   815b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   815b6:	bf00      	nop
   815b8:	20070b00 	.word	0x20070b00
   815bc:	00081515 	.word	0x00081515
   815c0:	20070277 	.word	0x20070277
   815c4:	20070f22 	.word	0x20070f22
   815c8:	20070b0c 	.word	0x20070b0c
   815cc:	20070b10 	.word	0x20070b10
   815d0:	20070b08 	.word	0x20070b08

000815d4 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
   815d4:	b508      	push	{r3, lr}
	return udi_cdc_multi_putc(0, value);
   815d6:	4601      	mov	r1, r0
   815d8:	2000      	movs	r0, #0
   815da:	4b01      	ldr	r3, [pc, #4]	; (815e0 <udi_cdc_putc+0xc>)
   815dc:	4798      	blx	r3
}
   815de:	bd08      	pop	{r3, pc}
   815e0:	00081539 	.word	0x00081539

000815e4 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   815e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   815e8:	b083      	sub	sp, #12
   815ea:	4688      	mov	r8, r1
   815ec:	4617      	mov	r7, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
   815ee:	4b23      	ldr	r3, [pc, #140]	; (8167c <udi_cdc_multi_write_buf+0x98>)
   815f0:	799b      	ldrb	r3, [r3, #6]
   815f2:	2b09      	cmp	r3, #9
		size *=2;
   815f4:	bf08      	it	eq
   815f6:	0057      	lsleq	r7, r2, #1
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   815f8:	f8df a098 	ldr.w	sl, [pc, #152]	; 81694 <udi_cdc_multi_write_buf+0xb0>
   815fc:	2000      	movs	r0, #0
   815fe:	47d0      	blx	sl
   81600:	b930      	cbnz	r0, 81610 <udi_cdc_multi_write_buf+0x2c>
		if (!udi_cdc_data_running) {
   81602:	4b1f      	ldr	r3, [pc, #124]	; (81680 <udi_cdc_multi_write_buf+0x9c>)
   81604:	781b      	ldrb	r3, [r3, #0]
   81606:	f013 0fff 	tst.w	r3, #255	; 0xff
   8160a:	d1f7      	bne.n	815fc <udi_cdc_multi_write_buf+0x18>
   8160c:	4638      	mov	r0, r7
   8160e:	e031      	b.n	81674 <udi_cdc_multi_write_buf+0x90>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81610:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81614:	fab3 f383 	clz	r3, r3
   81618:	095b      	lsrs	r3, r3, #5
   8161a:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8161c:	b672      	cpsid	i
   8161e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81622:	2300      	movs	r3, #0
   81624:	4a17      	ldr	r2, [pc, #92]	; (81684 <udi_cdc_multi_write_buf+0xa0>)
   81626:	7013      	strb	r3, [r2, #0]
	return flags;
   81628:	f8dd b004 	ldr.w	fp, [sp, #4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8162c:	4b16      	ldr	r3, [pc, #88]	; (81688 <udi_cdc_multi_write_buf+0xa4>)
   8162e:	781d      	ldrb	r5, [r3, #0]
   81630:	b2ed      	uxtb	r5, r5
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   81632:	f8df 9064 	ldr.w	r9, [pc, #100]	; 81698 <udi_cdc_multi_write_buf+0xb4>
   81636:	f839 6015 	ldrh.w	r6, [r9, r5, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
   8163a:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
   8163e:	42bc      	cmp	r4, r7
   81640:	bf28      	it	cs
   81642:	463c      	movcs	r4, r7
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
   81644:	eb06 2345 	add.w	r3, r6, r5, lsl #9
   81648:	4622      	mov	r2, r4
   8164a:	4641      	mov	r1, r8
   8164c:	480f      	ldr	r0, [pc, #60]	; (8168c <udi_cdc_multi_write_buf+0xa8>)
   8164e:	4418      	add	r0, r3
   81650:	4b0f      	ldr	r3, [pc, #60]	; (81690 <udi_cdc_multi_write_buf+0xac>)
   81652:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
   81654:	4426      	add	r6, r4
   81656:	f829 6015 	strh.w	r6, [r9, r5, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8165a:	f1bb 0f00 	cmp.w	fp, #0
   8165e:	d005      	beq.n	8166c <udi_cdc_multi_write_buf+0x88>
		cpu_irq_enable();
   81660:	2301      	movs	r3, #1
   81662:	4a08      	ldr	r2, [pc, #32]	; (81684 <udi_cdc_multi_write_buf+0xa0>)
   81664:	7013      	strb	r3, [r2, #0]
   81666:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8166a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
   8166c:	44a0      	add	r8, r4
	size -= copy_nb;

	if (size) {
   8166e:	1b3f      	subs	r7, r7, r4
   81670:	d1c4      	bne.n	815fc <udi_cdc_multi_write_buf+0x18>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
   81672:	2000      	movs	r0, #0
}
   81674:	b003      	add	sp, #12
   81676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8167a:	bf00      	nop
   8167c:	20070b00 	.word	0x20070b00
   81680:	20070f22 	.word	0x20070f22
   81684:	20070277 	.word	0x20070277
   81688:	20070b08 	.word	0x20070b08
   8168c:	20070b10 	.word	0x20070b10
   81690:	00083b7d 	.word	0x00083b7d
   81694:	00081515 	.word	0x00081515
   81698:	20070b0c 	.word	0x20070b0c

0008169c <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
   8169c:	b508      	push	{r3, lr}
	return udi_cdc_multi_write_buf(0, buf, size);
   8169e:	460a      	mov	r2, r1
   816a0:	4601      	mov	r1, r0
   816a2:	2000      	movs	r0, #0
   816a4:	4b01      	ldr	r3, [pc, #4]	; (816ac <udi_cdc_write_buf+0x10>)
   816a6:	4798      	blx	r3
}
   816a8:	bd08      	pop	{r3, pc}
   816aa:	bf00      	nop
   816ac:	000815e5 	.word	0x000815e5

000816b0 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   816b0:	4b0f      	ldr	r3, [pc, #60]	; (816f0 <udc_next_desc_in_iface+0x40>)
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   816b2:	681b      	ldr	r3, [r3, #0]
   816b4:	681a      	ldr	r2, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   816b6:	8853      	ldrh	r3, [r2, #2]
   816b8:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   816ba:	7803      	ldrb	r3, [r0, #0]
   816bc:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   816be:	4290      	cmp	r0, r2
   816c0:	d210      	bcs.n	816e4 <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   816c2:	7843      	ldrb	r3, [r0, #1]
   816c4:	2b04      	cmp	r3, #4
   816c6:	d00f      	beq.n	816e8 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   816c8:	428b      	cmp	r3, r1
   816ca:	d105      	bne.n	816d8 <udc_next_desc_in_iface+0x28>
   816cc:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   816ce:	7843      	ldrb	r3, [r0, #1]
   816d0:	2b04      	cmp	r3, #4
   816d2:	d00b      	beq.n	816ec <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   816d4:	428b      	cmp	r3, r1
   816d6:	d00a      	beq.n	816ee <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   816d8:	7803      	ldrb	r3, [r0, #0]
   816da:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   816dc:	4290      	cmp	r0, r2
   816de:	d3f6      	bcc.n	816ce <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   816e0:	2000      	movs	r0, #0
   816e2:	4770      	bx	lr
   816e4:	2000      	movs	r0, #0
   816e6:	4770      	bx	lr
   816e8:	2000      	movs	r0, #0
   816ea:	4770      	bx	lr
   816ec:	2000      	movs	r0, #0
}
   816ee:	4770      	bx	lr
   816f0:	20071344 	.word	0x20071344

000816f4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   816f4:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   816f6:	4b03      	ldr	r3, [pc, #12]	; (81704 <udc_valid_address+0x10>)
   816f8:	7898      	ldrb	r0, [r3, #2]
   816fa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   816fe:	4b02      	ldr	r3, [pc, #8]	; (81708 <udc_valid_address+0x14>)
   81700:	4798      	blx	r3
   81702:	bd08      	pop	{r3, pc}
   81704:	20071684 	.word	0x20071684
   81708:	00082c4d 	.word	0x00082c4d

0008170c <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   8170c:	4b17      	ldr	r3, [pc, #92]	; (8176c <udc_update_iface_desc+0x60>)
   8170e:	781b      	ldrb	r3, [r3, #0]
   81710:	b32b      	cbz	r3, 8175e <udc_update_iface_desc+0x52>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81712:	4b17      	ldr	r3, [pc, #92]	; (81770 <udc_update_iface_desc+0x64>)
   81714:	681b      	ldr	r3, [r3, #0]
   81716:	681b      	ldr	r3, [r3, #0]
   81718:	791a      	ldrb	r2, [r3, #4]
   8171a:	4282      	cmp	r2, r0
   8171c:	d921      	bls.n	81762 <udc_update_iface_desc+0x56>
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   8171e:	b470      	push	{r4, r5, r6}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   81720:	4a14      	ldr	r2, [pc, #80]	; (81774 <udc_update_iface_desc+0x68>)
   81722:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   81724:	885c      	ldrh	r4, [r3, #2]
   81726:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   81728:	42a3      	cmp	r3, r4
   8172a:	d21c      	bcs.n	81766 <udc_update_iface_desc+0x5a>
   8172c:	2500      	movs	r5, #0
   8172e:	2601      	movs	r6, #1
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   81730:	785a      	ldrb	r2, [r3, #1]
   81732:	2a04      	cmp	r2, #4
   81734:	d10a      	bne.n	8174c <udc_update_iface_desc+0x40>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81736:	789a      	ldrb	r2, [r3, #2]
   81738:	4282      	cmp	r2, r0
   8173a:	d107      	bne.n	8174c <udc_update_iface_desc+0x40>
   8173c:	78da      	ldrb	r2, [r3, #3]
   8173e:	428a      	cmp	r2, r1
   81740:	d104      	bne.n	8174c <udc_update_iface_desc+0x40>
   81742:	b10d      	cbz	r5, 81748 <udc_update_iface_desc+0x3c>
   81744:	4a0b      	ldr	r2, [pc, #44]	; (81774 <udc_update_iface_desc+0x68>)
   81746:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   81748:	2001      	movs	r0, #1
   8174a:	e00d      	b.n	81768 <udc_update_iface_desc+0x5c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   8174c:	781a      	ldrb	r2, [r3, #0]
   8174e:	4413      	add	r3, r2
   81750:	4635      	mov	r5, r6
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   81752:	42a3      	cmp	r3, r4
   81754:	d3ec      	bcc.n	81730 <udc_update_iface_desc+0x24>
   81756:	4a07      	ldr	r2, [pc, #28]	; (81774 <udc_update_iface_desc+0x68>)
   81758:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   8175a:	2000      	movs	r0, #0
   8175c:	e004      	b.n	81768 <udc_update_iface_desc+0x5c>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   8175e:	2000      	movs	r0, #0
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
}
   81760:	4770      	bx	lr
	if (0 == udc_num_configuration) {
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   81762:	2000      	movs	r0, #0
   81764:	4770      	bx	lr
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   81766:	2000      	movs	r0, #0
}
   81768:	bc70      	pop	{r4, r5, r6}
   8176a:	4770      	bx	lr
   8176c:	2007134c 	.word	0x2007134c
   81770:	20071344 	.word	0x20071344
   81774:	20071350 	.word	0x20071350

00081778 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   81778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8177c:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   8177e:	2100      	movs	r1, #0
   81780:	4b12      	ldr	r3, [pc, #72]	; (817cc <udc_iface_disable+0x54>)
   81782:	4798      	blx	r3
   81784:	4680      	mov	r8, r0
   81786:	b1e8      	cbz	r0, 817c4 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81788:	4b11      	ldr	r3, [pc, #68]	; (817d0 <udc_iface_disable+0x58>)
   8178a:	681b      	ldr	r3, [r3, #0]
   8178c:	685b      	ldr	r3, [r3, #4]
   8178e:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81792:	f8d9 300c 	ldr.w	r3, [r9, #12]
   81796:	4798      	blx	r3
   81798:	4601      	mov	r1, r0
   8179a:	4620      	mov	r0, r4
   8179c:	4b0b      	ldr	r3, [pc, #44]	; (817cc <udc_iface_disable+0x54>)
   8179e:	4798      	blx	r3
   817a0:	4680      	mov	r8, r0
   817a2:	b178      	cbz	r0, 817c4 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   817a4:	4b0b      	ldr	r3, [pc, #44]	; (817d4 <udc_iface_disable+0x5c>)
   817a6:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   817a8:	2605      	movs	r6, #5
   817aa:	4d0b      	ldr	r5, [pc, #44]	; (817d8 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   817ac:	4f0b      	ldr	r7, [pc, #44]	; (817dc <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   817ae:	4631      	mov	r1, r6
   817b0:	4620      	mov	r0, r4
   817b2:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   817b4:	4604      	mov	r4, r0
   817b6:	b110      	cbz	r0, 817be <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   817b8:	7880      	ldrb	r0, [r0, #2]
   817ba:	47b8      	blx	r7
		}
   817bc:	e7f7      	b.n	817ae <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
   817be:	f8d9 3004 	ldr.w	r3, [r9, #4]
   817c2:	4798      	blx	r3
	return true;
}
   817c4:	4640      	mov	r0, r8
   817c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   817ca:	bf00      	nop
   817cc:	0008170d 	.word	0x0008170d
   817d0:	20071344 	.word	0x20071344
   817d4:	20071350 	.word	0x20071350
   817d8:	000816b1 	.word	0x000816b1
   817dc:	00082cb1 	.word	0x00082cb1

000817e0 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   817e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   817e4:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   817e6:	4b10      	ldr	r3, [pc, #64]	; (81828 <udc_iface_enable+0x48>)
   817e8:	4798      	blx	r3
   817ea:	4603      	mov	r3, r0
   817ec:	b1c8      	cbz	r0, 81822 <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   817ee:	4b0f      	ldr	r3, [pc, #60]	; (8182c <udc_iface_enable+0x4c>)
   817f0:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   817f2:	2605      	movs	r6, #5
   817f4:	4d0e      	ldr	r5, [pc, #56]	; (81830 <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   817f6:	4f0f      	ldr	r7, [pc, #60]	; (81834 <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   817f8:	4631      	mov	r1, r6
   817fa:	4620      	mov	r0, r4
   817fc:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   817fe:	4604      	mov	r4, r0
   81800:	b138      	cbz	r0, 81812 <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   81802:	8882      	ldrh	r2, [r0, #4]
   81804:	78c1      	ldrb	r1, [r0, #3]
   81806:	7880      	ldrb	r0, [r0, #2]
   81808:	47b8      	blx	r7
   8180a:	4603      	mov	r3, r0
   8180c:	2800      	cmp	r0, #0
   8180e:	d1f3      	bne.n	817f8 <udc_iface_enable+0x18>
   81810:	e007      	b.n	81822 <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   81812:	4b09      	ldr	r3, [pc, #36]	; (81838 <udc_iface_enable+0x58>)
   81814:	681b      	ldr	r3, [r3, #0]
   81816:	685b      	ldr	r3, [r3, #4]
   81818:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   8181c:	681b      	ldr	r3, [r3, #0]
   8181e:	4798      	blx	r3
   81820:	4603      	mov	r3, r0
}
   81822:	4618      	mov	r0, r3
   81824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81828:	0008170d 	.word	0x0008170d
   8182c:	20071350 	.word	0x20071350
   81830:	000816b1 	.word	0x000816b1
   81834:	00082ffd 	.word	0x00082ffd
   81838:	20071344 	.word	0x20071344

0008183c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   8183c:	b508      	push	{r3, lr}
	udd_enable();
   8183e:	4b01      	ldr	r3, [pc, #4]	; (81844 <udc_start+0x8>)
   81840:	4798      	blx	r3
   81842:	bd08      	pop	{r3, pc}
   81844:	000823d5 	.word	0x000823d5

00081848 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   81848:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   8184a:	4b0d      	ldr	r3, [pc, #52]	; (81880 <udc_reset+0x38>)
   8184c:	781b      	ldrb	r3, [r3, #0]
   8184e:	b183      	cbz	r3, 81872 <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81850:	4b0c      	ldr	r3, [pc, #48]	; (81884 <udc_reset+0x3c>)
   81852:	681b      	ldr	r3, [r3, #0]
   81854:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   81856:	791b      	ldrb	r3, [r3, #4]
   81858:	b15b      	cbz	r3, 81872 <udc_reset+0x2a>
   8185a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   8185c:	4e0a      	ldr	r6, [pc, #40]	; (81888 <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8185e:	4d09      	ldr	r5, [pc, #36]	; (81884 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
   81860:	4620      	mov	r0, r4
   81862:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   81864:	3401      	adds	r4, #1
   81866:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81868:	682b      	ldr	r3, [r5, #0]
   8186a:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   8186c:	791b      	ldrb	r3, [r3, #4]
   8186e:	42a3      	cmp	r3, r4
   81870:	d8f6      	bhi.n	81860 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   81872:	2200      	movs	r2, #0
   81874:	4b02      	ldr	r3, [pc, #8]	; (81880 <udc_reset+0x38>)
   81876:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   81878:	2201      	movs	r2, #1
   8187a:	4b04      	ldr	r3, [pc, #16]	; (8188c <udc_reset+0x44>)
   8187c:	801a      	strh	r2, [r3, #0]
   8187e:	bd70      	pop	{r4, r5, r6, pc}
   81880:	2007134c 	.word	0x2007134c
   81884:	20071344 	.word	0x20071344
   81888:	00081779 	.word	0x00081779
   8188c:	2007134a 	.word	0x2007134a

00081890 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   81890:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   81892:	4b0c      	ldr	r3, [pc, #48]	; (818c4 <udc_sof_notify+0x34>)
   81894:	781b      	ldrb	r3, [r3, #0]
   81896:	b19b      	cbz	r3, 818c0 <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81898:	4b0b      	ldr	r3, [pc, #44]	; (818c8 <udc_sof_notify+0x38>)
   8189a:	681b      	ldr	r3, [r3, #0]
   8189c:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   8189e:	7912      	ldrb	r2, [r2, #4]
   818a0:	b172      	cbz	r2, 818c0 <udc_sof_notify+0x30>
   818a2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   818a4:	4d08      	ldr	r5, [pc, #32]	; (818c8 <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   818a6:	685b      	ldr	r3, [r3, #4]
   818a8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   818ac:	691b      	ldr	r3, [r3, #16]
   818ae:	b103      	cbz	r3, 818b2 <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   818b0:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   818b2:	3401      	adds	r4, #1
   818b4:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   818b6:	682b      	ldr	r3, [r5, #0]
   818b8:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   818ba:	7912      	ldrb	r2, [r2, #4]
   818bc:	42a2      	cmp	r2, r4
   818be:	d8f2      	bhi.n	818a6 <udc_sof_notify+0x16>
   818c0:	bd38      	pop	{r3, r4, r5, pc}
   818c2:	bf00      	nop
   818c4:	2007134c 	.word	0x2007134c
   818c8:	20071344 	.word	0x20071344

000818cc <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   818cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   818ce:	4b99      	ldr	r3, [pc, #612]	; (81b34 <udc_process_setup+0x268>)
   818d0:	2200      	movs	r2, #0
   818d2:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   818d4:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   818d6:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   818d8:	781b      	ldrb	r3, [r3, #0]
   818da:	f013 0f80 	tst.w	r3, #128	; 0x80
   818de:	f000 82ab 	beq.w	81e38 <udc_process_setup+0x56c>
		if (udd_g_ctrlreq.req.wLength == 0) {
   818e2:	4a94      	ldr	r2, [pc, #592]	; (81b34 <udc_process_setup+0x268>)
   818e4:	88d2      	ldrh	r2, [r2, #6]
   818e6:	2a00      	cmp	r2, #0
   818e8:	f040 82aa 	bne.w	81e40 <udc_process_setup+0x574>
   818ec:	e29c      	b.n	81e28 <udc_process_setup+0x55c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   818ee:	f013 031f 	ands.w	r3, r3, #31
   818f2:	f040 80c1 	bne.w	81a78 <udc_process_setup+0x1ac>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   818f6:	498f      	ldr	r1, [pc, #572]	; (81b34 <udc_process_setup+0x268>)
   818f8:	7849      	ldrb	r1, [r1, #1]
   818fa:	2906      	cmp	r1, #6
   818fc:	d00d      	beq.n	8191a <udc_process_setup+0x4e>
   818fe:	2908      	cmp	r1, #8
   81900:	f000 80b2 	beq.w	81a68 <udc_process_setup+0x19c>
   81904:	2900      	cmp	r1, #0
   81906:	f040 80b7 	bne.w	81a78 <udc_process_setup+0x1ac>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   8190a:	2a02      	cmp	r2, #2
   8190c:	f040 8261 	bne.w	81dd2 <udc_process_setup+0x506>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   81910:	2102      	movs	r1, #2
   81912:	4889      	ldr	r0, [pc, #548]	; (81b38 <udc_process_setup+0x26c>)
   81914:	4b89      	ldr	r3, [pc, #548]	; (81b3c <udc_process_setup+0x270>)
   81916:	4798      	blx	r3
   81918:	e296      	b.n	81e48 <udc_process_setup+0x57c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   8191a:	4b86      	ldr	r3, [pc, #536]	; (81b34 <udc_process_setup+0x268>)
   8191c:	885a      	ldrh	r2, [r3, #2]
   8191e:	b2d4      	uxtb	r4, r2

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   81920:	0a13      	lsrs	r3, r2, #8
   81922:	3b01      	subs	r3, #1
   81924:	2b0e      	cmp	r3, #14
   81926:	f200 8201 	bhi.w	81d2c <udc_process_setup+0x460>
   8192a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8192e:	000f      	.short	0x000f
   81930:	0073001e 	.word	0x0073001e
   81934:	01ff01ff 	.word	0x01ff01ff
   81938:	00470041 	.word	0x00470041
   8193c:	01ff01ff 	.word	0x01ff01ff
   81940:	01ff01ff 	.word	0x01ff01ff
   81944:	01ff01ff 	.word	0x01ff01ff
   81948:	006a01ff 	.word	0x006a01ff
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   8194c:	4b7c      	ldr	r3, [pc, #496]	; (81b40 <udc_process_setup+0x274>)
   8194e:	4798      	blx	r3
   81950:	b928      	cbnz	r0, 8195e <udc_process_setup+0x92>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
   81952:	4b7c      	ldr	r3, [pc, #496]	; (81b44 <udc_process_setup+0x278>)
   81954:	6898      	ldr	r0, [r3, #8]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
   81956:	7801      	ldrb	r1, [r0, #0]
   81958:	4b78      	ldr	r3, [pc, #480]	; (81b3c <udc_process_setup+0x270>)
   8195a:	4798      	blx	r3
   8195c:	e07b      	b.n	81a56 <udc_process_setup+0x18a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   8195e:	4b79      	ldr	r3, [pc, #484]	; (81b44 <udc_process_setup+0x278>)
   81960:	6818      	ldr	r0, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   81962:	7801      	ldrb	r1, [r0, #0]
   81964:	4b75      	ldr	r3, [pc, #468]	; (81b3c <udc_process_setup+0x270>)
   81966:	4798      	blx	r3
   81968:	e075      	b.n	81a56 <udc_process_setup+0x18a>
		break;

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   8196a:	4b75      	ldr	r3, [pc, #468]	; (81b40 <udc_process_setup+0x274>)
   8196c:	4798      	blx	r3
   8196e:	b168      	cbz	r0, 8198c <udc_process_setup+0xc0>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   81970:	4b74      	ldr	r3, [pc, #464]	; (81b44 <udc_process_setup+0x278>)
   81972:	689b      	ldr	r3, [r3, #8]
   81974:	7c5b      	ldrb	r3, [r3, #17]
   81976:	42a3      	cmp	r3, r4
   81978:	f240 8205 	bls.w	81d86 <udc_process_setup+0x4ba>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8197c:	4b71      	ldr	r3, [pc, #452]	; (81b44 <udc_process_setup+0x278>)
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   8197e:	691b      	ldr	r3, [r3, #16]
   81980:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   81984:	8841      	ldrh	r1, [r0, #2]
   81986:	4b6d      	ldr	r3, [pc, #436]	; (81b3c <udc_process_setup+0x270>)
   81988:	4798      	blx	r3
   8198a:	e00c      	b.n	819a6 <udc_process_setup+0xda>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   8198c:	4b6d      	ldr	r3, [pc, #436]	; (81b44 <udc_process_setup+0x278>)
   8198e:	681b      	ldr	r3, [r3, #0]
   81990:	7c5b      	ldrb	r3, [r3, #17]
   81992:	42a3      	cmp	r3, r4
   81994:	f240 81f7 	bls.w	81d86 <udc_process_setup+0x4ba>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81998:	4b6a      	ldr	r3, [pc, #424]	; (81b44 <udc_process_setup+0x278>)
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   8199a:	685b      	ldr	r3, [r3, #4]
   8199c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   819a0:	8841      	ldrh	r1, [r0, #2]
   819a2:	4b66      	ldr	r3, [pc, #408]	; (81b3c <udc_process_setup+0x270>)
   819a4:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   819a6:	4b63      	ldr	r3, [pc, #396]	; (81b34 <udc_process_setup+0x268>)
   819a8:	689b      	ldr	r3, [r3, #8]
   819aa:	2202      	movs	r2, #2
   819ac:	705a      	strb	r2, [r3, #1]
   819ae:	e052      	b.n	81a56 <udc_process_setup+0x18a>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
   819b0:	4b64      	ldr	r3, [pc, #400]	; (81b44 <udc_process_setup+0x278>)
   819b2:	68d8      	ldr	r0, [r3, #12]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   819b4:	7801      	ldrb	r1, [r0, #0]
   819b6:	4b61      	ldr	r3, [pc, #388]	; (81b3c <udc_process_setup+0x270>)
   819b8:	4798      	blx	r3
   819ba:	e04c      	b.n	81a56 <udc_process_setup+0x18a>
				udc_config.qualifier->bLength);
		break;

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   819bc:	4b60      	ldr	r3, [pc, #384]	; (81b40 <udc_process_setup+0x274>)
   819be:	4798      	blx	r3
   819c0:	b968      	cbnz	r0, 819de <udc_process_setup+0x112>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   819c2:	4b60      	ldr	r3, [pc, #384]	; (81b44 <udc_process_setup+0x278>)
   819c4:	689b      	ldr	r3, [r3, #8]
   819c6:	7c5b      	ldrb	r3, [r3, #17]
   819c8:	42a3      	cmp	r3, r4
   819ca:	f240 81dc 	bls.w	81d86 <udc_process_setup+0x4ba>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   819ce:	4b5d      	ldr	r3, [pc, #372]	; (81b44 <udc_process_setup+0x278>)
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   819d0:	691b      	ldr	r3, [r3, #16]
   819d2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   819d6:	8841      	ldrh	r1, [r0, #2]
   819d8:	4b58      	ldr	r3, [pc, #352]	; (81b3c <udc_process_setup+0x270>)
   819da:	4798      	blx	r3
   819dc:	e00c      	b.n	819f8 <udc_process_setup+0x12c>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   819de:	4b59      	ldr	r3, [pc, #356]	; (81b44 <udc_process_setup+0x278>)
   819e0:	681b      	ldr	r3, [r3, #0]
   819e2:	7c5b      	ldrb	r3, [r3, #17]
   819e4:	42a3      	cmp	r3, r4
   819e6:	f240 81ce 	bls.w	81d86 <udc_process_setup+0x4ba>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   819ea:	4b56      	ldr	r3, [pc, #344]	; (81b44 <udc_process_setup+0x278>)
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   819ec:	685b      	ldr	r3, [r3, #4]
   819ee:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   819f2:	8841      	ldrh	r1, [r0, #2]
   819f4:	4b51      	ldr	r3, [pc, #324]	; (81b3c <udc_process_setup+0x270>)
   819f6:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   819f8:	4b4e      	ldr	r3, [pc, #312]	; (81b34 <udc_process_setup+0x268>)
   819fa:	689b      	ldr	r3, [r3, #8]
   819fc:	2207      	movs	r2, #7
   819fe:	705a      	strb	r2, [r3, #1]
   81a00:	e029      	b.n	81a56 <udc_process_setup+0x18a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   81a02:	4b50      	ldr	r3, [pc, #320]	; (81b44 <udc_process_setup+0x278>)
   81a04:	6958      	ldr	r0, [r3, #20]
   81a06:	2800      	cmp	r0, #0
   81a08:	f000 81e3 	beq.w	81dd2 <udc_process_setup+0x506>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   81a0c:	8841      	ldrh	r1, [r0, #2]
   81a0e:	4b4b      	ldr	r3, [pc, #300]	; (81b3c <udc_process_setup+0x270>)
   81a10:	4798      	blx	r3
   81a12:	e020      	b.n	81a56 <udc_process_setup+0x18a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   81a14:	b2d2      	uxtb	r2, r2
   81a16:	2a01      	cmp	r2, #1
   81a18:	d00b      	beq.n	81a32 <udc_process_setup+0x166>
   81a1a:	b12a      	cbz	r2, 81a28 <udc_process_setup+0x15c>
   81a1c:	2a02      	cmp	r2, #2
   81a1e:	f040 81b2 	bne.w	81d86 <udc_process_setup+0x4ba>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
   81a22:	4b49      	ldr	r3, [pc, #292]	; (81b48 <udc_process_setup+0x27c>)
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   81a24:	210f      	movs	r1, #15
   81a26:	e006      	b.n	81a36 <udc_process_setup+0x16a>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   81a28:	2104      	movs	r1, #4
   81a2a:	4848      	ldr	r0, [pc, #288]	; (81b4c <udc_process_setup+0x280>)
   81a2c:	4b43      	ldr	r3, [pc, #268]	; (81b3c <udc_process_setup+0x270>)
   81a2e:	4798      	blx	r3
   81a30:	e011      	b.n	81a56 <udc_process_setup+0x18a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
   81a32:	4b47      	ldr	r3, [pc, #284]	; (81b50 <udc_process_setup+0x284>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   81a34:	2109      	movs	r1, #9
   81a36:	461c      	mov	r4, r3
   81a38:	4846      	ldr	r0, [pc, #280]	; (81b54 <udc_process_setup+0x288>)
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   81a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   81a3e:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   81a42:	1b1a      	subs	r2, r3, r4
   81a44:	b2d2      	uxtb	r2, r2
   81a46:	428a      	cmp	r2, r1
   81a48:	d3f7      	bcc.n	81a3a <udc_process_setup+0x16e>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   81a4a:	0049      	lsls	r1, r1, #1
   81a4c:	3102      	adds	r1, #2
   81a4e:	4841      	ldr	r0, [pc, #260]	; (81b54 <udc_process_setup+0x288>)
   81a50:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   81a52:	4b3a      	ldr	r3, [pc, #232]	; (81b3c <udc_process_setup+0x270>)
   81a54:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   81a56:	4b37      	ldr	r3, [pc, #220]	; (81b34 <udc_process_setup+0x268>)
   81a58:	88da      	ldrh	r2, [r3, #6]
   81a5a:	899b      	ldrh	r3, [r3, #12]
   81a5c:	4293      	cmp	r3, r2
   81a5e:	f240 81f3 	bls.w	81e48 <udc_process_setup+0x57c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81a62:	4b34      	ldr	r3, [pc, #208]	; (81b34 <udc_process_setup+0x268>)
   81a64:	819a      	strh	r2, [r3, #12]
   81a66:	e1ef      	b.n	81e48 <udc_process_setup+0x57c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   81a68:	2a01      	cmp	r2, #1
   81a6a:	f040 81b2 	bne.w	81dd2 <udc_process_setup+0x506>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   81a6e:	2101      	movs	r1, #1
   81a70:	4839      	ldr	r0, [pc, #228]	; (81b58 <udc_process_setup+0x28c>)
   81a72:	4b32      	ldr	r3, [pc, #200]	; (81b3c <udc_process_setup+0x270>)
   81a74:	4798      	blx	r3
   81a76:	e1e7      	b.n	81e48 <udc_process_setup+0x57c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   81a78:	2b01      	cmp	r3, #1
   81a7a:	d127      	bne.n	81acc <udc_process_setup+0x200>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   81a7c:	492d      	ldr	r1, [pc, #180]	; (81b34 <udc_process_setup+0x268>)
   81a7e:	7849      	ldrb	r1, [r1, #1]
   81a80:	290a      	cmp	r1, #10
   81a82:	d123      	bne.n	81acc <udc_process_setup+0x200>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   81a84:	2a01      	cmp	r2, #1
   81a86:	f040 8184 	bne.w	81d92 <udc_process_setup+0x4c6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   81a8a:	4b33      	ldr	r3, [pc, #204]	; (81b58 <udc_process_setup+0x28c>)
   81a8c:	781b      	ldrb	r3, [r3, #0]
   81a8e:	2b00      	cmp	r3, #0
   81a90:	f000 817f 	beq.w	81d92 <udc_process_setup+0x4c6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81a94:	4b27      	ldr	r3, [pc, #156]	; (81b34 <udc_process_setup+0x268>)
   81a96:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81a98:	4b30      	ldr	r3, [pc, #192]	; (81b5c <udc_process_setup+0x290>)
   81a9a:	681d      	ldr	r5, [r3, #0]
   81a9c:	682b      	ldr	r3, [r5, #0]
   81a9e:	791b      	ldrb	r3, [r3, #4]
   81aa0:	42a3      	cmp	r3, r4
   81aa2:	f240 8176 	bls.w	81d92 <udc_process_setup+0x4c6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   81aa6:	2100      	movs	r1, #0
   81aa8:	4620      	mov	r0, r4
   81aaa:	4b2d      	ldr	r3, [pc, #180]	; (81b60 <udc_process_setup+0x294>)
   81aac:	4798      	blx	r3
   81aae:	2800      	cmp	r0, #0
   81ab0:	f000 8169 	beq.w	81d86 <udc_process_setup+0x4ba>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81ab4:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   81ab6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   81aba:	68db      	ldr	r3, [r3, #12]
   81abc:	4798      	blx	r3
   81abe:	4b29      	ldr	r3, [pc, #164]	; (81b64 <udc_process_setup+0x298>)
   81ac0:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   81ac2:	2101      	movs	r1, #1
   81ac4:	4618      	mov	r0, r3
   81ac6:	4b1d      	ldr	r3, [pc, #116]	; (81b3c <udc_process_setup+0x270>)
   81ac8:	4798      	blx	r3
   81aca:	e1bd      	b.n	81e48 <udc_process_setup+0x57c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   81acc:	2b02      	cmp	r3, #2
   81ace:	f040 815a 	bne.w	81d86 <udc_process_setup+0x4ba>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   81ad2:	4b18      	ldr	r3, [pc, #96]	; (81b34 <udc_process_setup+0x268>)
   81ad4:	785b      	ldrb	r3, [r3, #1]
   81ad6:	2b00      	cmp	r3, #0
   81ad8:	f040 812a 	bne.w	81d30 <udc_process_setup+0x464>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   81adc:	2a02      	cmp	r2, #2
   81ade:	f040 8178 	bne.w	81dd2 <udc_process_setup+0x506>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   81ae2:	4b14      	ldr	r3, [pc, #80]	; (81b34 <udc_process_setup+0x268>)
   81ae4:	7918      	ldrb	r0, [r3, #4]
   81ae6:	4b20      	ldr	r3, [pc, #128]	; (81b68 <udc_process_setup+0x29c>)
   81ae8:	4798      	blx	r3
   81aea:	4b20      	ldr	r3, [pc, #128]	; (81b6c <udc_process_setup+0x2a0>)
   81aec:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   81aee:	2102      	movs	r1, #2
   81af0:	4618      	mov	r0, r3
   81af2:	4b12      	ldr	r3, [pc, #72]	; (81b3c <udc_process_setup+0x270>)
   81af4:	4798      	blx	r3
   81af6:	e1a7      	b.n	81e48 <udc_process_setup+0x57c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   81af8:	f013 031f 	ands.w	r3, r3, #31
   81afc:	f040 80d2 	bne.w	81ca4 <udc_process_setup+0x3d8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   81b00:	4a0c      	ldr	r2, [pc, #48]	; (81b34 <udc_process_setup+0x268>)
   81b02:	7852      	ldrb	r2, [r2, #1]
   81b04:	3a01      	subs	r2, #1
   81b06:	2a08      	cmp	r2, #8
   81b08:	f200 80cc 	bhi.w	81ca4 <udc_process_setup+0x3d8>
   81b0c:	e8df f012 	tbh	[pc, r2, lsl #1]
   81b10:	00ca0032 	.word	0x00ca0032
   81b14:	00ca0042 	.word	0x00ca0042
   81b18:	00ca0009 	.word	0x00ca0009
   81b1c:	00ca00ca 	.word	0x00ca00ca
   81b20:	0073      	.short	0x0073
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   81b22:	4b04      	ldr	r3, [pc, #16]	; (81b34 <udc_process_setup+0x268>)
   81b24:	88db      	ldrh	r3, [r3, #6]
   81b26:	2b00      	cmp	r3, #0
   81b28:	f040 8153 	bne.w	81dd2 <udc_process_setup+0x506>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   81b2c:	4a10      	ldr	r2, [pc, #64]	; (81b70 <udc_process_setup+0x2a4>)
   81b2e:	4b01      	ldr	r3, [pc, #4]	; (81b34 <udc_process_setup+0x268>)
   81b30:	611a      	str	r2, [r3, #16]
   81b32:	e189      	b.n	81e48 <udc_process_setup+0x57c>
   81b34:	20071684 	.word	0x20071684
   81b38:	2007134a 	.word	0x2007134a
   81b3c:	00082ca5 	.word	0x00082ca5
   81b40:	00082c39 	.word	0x00082c39
   81b44:	200701ec 	.word	0x200701ec
   81b48:	20070160 	.word	0x20070160
   81b4c:	2007019c 	.word	0x2007019c
   81b50:	20070170 	.word	0x20070170
   81b54:	2007017c 	.word	0x2007017c
   81b58:	2007134c 	.word	0x2007134c
   81b5c:	20071344 	.word	0x20071344
   81b60:	0008170d 	.word	0x0008170d
   81b64:	20071348 	.word	0x20071348
   81b68:	00082d0d 	.word	0x00082d0d
   81b6c:	20071354 	.word	0x20071354
   81b70:	000816f5 	.word	0x000816f5
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   81b74:	4b71      	ldr	r3, [pc, #452]	; (81d3c <udc_process_setup+0x470>)
   81b76:	88db      	ldrh	r3, [r3, #6]
   81b78:	2b00      	cmp	r3, #0
   81b7a:	f040 812a 	bne.w	81dd2 <udc_process_setup+0x506>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   81b7e:	4b6f      	ldr	r3, [pc, #444]	; (81d3c <udc_process_setup+0x470>)
   81b80:	885b      	ldrh	r3, [r3, #2]
   81b82:	2b01      	cmp	r3, #1
   81b84:	f040 8125 	bne.w	81dd2 <udc_process_setup+0x506>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   81b88:	4a6d      	ldr	r2, [pc, #436]	; (81d40 <udc_process_setup+0x474>)
   81b8a:	8813      	ldrh	r3, [r2, #0]
   81b8c:	f023 0302 	bic.w	r3, r3, #2
   81b90:	8013      	strh	r3, [r2, #0]
   81b92:	e159      	b.n	81e48 <udc_process_setup+0x57c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   81b94:	4b69      	ldr	r3, [pc, #420]	; (81d3c <udc_process_setup+0x470>)
   81b96:	88db      	ldrh	r3, [r3, #6]
   81b98:	2b00      	cmp	r3, #0
   81b9a:	f040 811a 	bne.w	81dd2 <udc_process_setup+0x506>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
   81b9e:	4b67      	ldr	r3, [pc, #412]	; (81d3c <udc_process_setup+0x470>)
   81ba0:	885b      	ldrh	r3, [r3, #2]
   81ba2:	2b02      	cmp	r3, #2
   81ba4:	f040 80c6 	bne.w	81d34 <udc_process_setup+0x468>
		return false;
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
   81ba8:	4b66      	ldr	r3, [pc, #408]	; (81d44 <udc_process_setup+0x478>)
   81baa:	4798      	blx	r3
   81bac:	2800      	cmp	r0, #0
   81bae:	f000 80ea 	beq.w	81d86 <udc_process_setup+0x4ba>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   81bb2:	4b62      	ldr	r3, [pc, #392]	; (81d3c <udc_process_setup+0x470>)
   81bb4:	791b      	ldrb	r3, [r3, #4]
   81bb6:	2b00      	cmp	r3, #0
   81bb8:	f040 80e5 	bne.w	81d86 <udc_process_setup+0x4ba>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
   81bbc:	4b62      	ldr	r3, [pc, #392]	; (81d48 <udc_process_setup+0x47c>)
   81bbe:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   81bc0:	4b5e      	ldr	r3, [pc, #376]	; (81d3c <udc_process_setup+0x470>)
   81bc2:	889b      	ldrh	r3, [r3, #4]
   81bc4:	0a1b      	lsrs	r3, r3, #8
   81bc6:	3b01      	subs	r3, #1
   81bc8:	2b03      	cmp	r3, #3
   81bca:	f200 80b5 	bhi.w	81d38 <udc_process_setup+0x46c>
   81bce:	e8df f003 	tbb	[pc, r3]
   81bd2:	0602      	.short	0x0602
   81bd4:	0e0a      	.short	0x0e0a
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
   81bd6:	4a5d      	ldr	r2, [pc, #372]	; (81d4c <udc_process_setup+0x480>)
   81bd8:	4b58      	ldr	r3, [pc, #352]	; (81d3c <udc_process_setup+0x470>)
   81bda:	611a      	str	r2, [r3, #16]
   81bdc:	e134      	b.n	81e48 <udc_process_setup+0x57c>
			return true;

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
   81bde:	4a5c      	ldr	r2, [pc, #368]	; (81d50 <udc_process_setup+0x484>)
   81be0:	4b56      	ldr	r3, [pc, #344]	; (81d3c <udc_process_setup+0x470>)
   81be2:	611a      	str	r2, [r3, #16]
   81be4:	e130      	b.n	81e48 <udc_process_setup+0x57c>
			return true;

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   81be6:	4a5b      	ldr	r2, [pc, #364]	; (81d54 <udc_process_setup+0x488>)
   81be8:	4b54      	ldr	r3, [pc, #336]	; (81d3c <udc_process_setup+0x470>)
   81bea:	611a      	str	r2, [r3, #16]
   81bec:	e12c      	b.n	81e48 <udc_process_setup+0x57c>
			return true;

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   81bee:	4a5a      	ldr	r2, [pc, #360]	; (81d58 <udc_process_setup+0x48c>)
   81bf0:	4b52      	ldr	r3, [pc, #328]	; (81d3c <udc_process_setup+0x470>)
   81bf2:	611a      	str	r2, [r3, #16]
   81bf4:	e128      	b.n	81e48 <udc_process_setup+0x57c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   81bf6:	4b51      	ldr	r3, [pc, #324]	; (81d3c <udc_process_setup+0x470>)
   81bf8:	88db      	ldrh	r3, [r3, #6]
   81bfa:	2b00      	cmp	r3, #0
   81bfc:	f040 80e9 	bne.w	81dd2 <udc_process_setup+0x506>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   81c00:	4b56      	ldr	r3, [pc, #344]	; (81d5c <udc_process_setup+0x490>)
   81c02:	4798      	blx	r3
   81c04:	2800      	cmp	r0, #0
   81c06:	f000 80be 	beq.w	81d86 <udc_process_setup+0x4ba>
		return false;
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   81c0a:	4b4e      	ldr	r3, [pc, #312]	; (81d44 <udc_process_setup+0x478>)
   81c0c:	4798      	blx	r3
   81c0e:	b138      	cbz	r0, 81c20 <udc_process_setup+0x354>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81c10:	4b4a      	ldr	r3, [pc, #296]	; (81d3c <udc_process_setup+0x470>)
   81c12:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   81c14:	4b52      	ldr	r3, [pc, #328]	; (81d60 <udc_process_setup+0x494>)
   81c16:	689b      	ldr	r3, [r3, #8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81c18:	7c5b      	ldrb	r3, [r3, #17]
   81c1a:	429a      	cmp	r2, r3
   81c1c:	dd08      	ble.n	81c30 <udc_process_setup+0x364>
   81c1e:	e0b2      	b.n	81d86 <udc_process_setup+0x4ba>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81c20:	4b46      	ldr	r3, [pc, #280]	; (81d3c <udc_process_setup+0x470>)
   81c22:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   81c24:	4b4e      	ldr	r3, [pc, #312]	; (81d60 <udc_process_setup+0x494>)
   81c26:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81c28:	7c5b      	ldrb	r3, [r3, #17]
   81c2a:	429a      	cmp	r2, r3
   81c2c:	f300 80ab 	bgt.w	81d86 <udc_process_setup+0x4ba>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   81c30:	4b45      	ldr	r3, [pc, #276]	; (81d48 <udc_process_setup+0x47c>)
   81c32:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   81c34:	4b41      	ldr	r3, [pc, #260]	; (81d3c <udc_process_setup+0x470>)
   81c36:	789b      	ldrb	r3, [r3, #2]
   81c38:	4a4a      	ldr	r2, [pc, #296]	; (81d64 <udc_process_setup+0x498>)
   81c3a:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   81c3c:	2b00      	cmp	r3, #0
   81c3e:	f000 8103 	beq.w	81e48 <udc_process_setup+0x57c>
		return true; // Default empty configuration requested
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   81c42:	4b40      	ldr	r3, [pc, #256]	; (81d44 <udc_process_setup+0x478>)
   81c44:	4798      	blx	r3
   81c46:	b180      	cbz	r0, 81c6a <udc_process_setup+0x39e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   81c48:	4b46      	ldr	r3, [pc, #280]	; (81d64 <udc_process_setup+0x498>)
   81c4a:	781b      	ldrb	r3, [r3, #0]
   81c4c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   81c50:	3b01      	subs	r3, #1
   81c52:	4a43      	ldr	r2, [pc, #268]	; (81d60 <udc_process_setup+0x494>)
   81c54:	6912      	ldr	r2, [r2, #16]
   81c56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   81c5a:	4a43      	ldr	r2, [pc, #268]	; (81d68 <udc_process_setup+0x49c>)
   81c5c:	6013      	str	r3, [r2, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81c5e:	4b42      	ldr	r3, [pc, #264]	; (81d68 <udc_process_setup+0x49c>)
   81c60:	681b      	ldr	r3, [r3, #0]
   81c62:	681b      	ldr	r3, [r3, #0]
   81c64:	791b      	ldrb	r3, [r3, #4]
   81c66:	b963      	cbnz	r3, 81c82 <udc_process_setup+0x3b6>
   81c68:	e0ee      	b.n	81e48 <udc_process_setup+0x57c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   81c6a:	4b3e      	ldr	r3, [pc, #248]	; (81d64 <udc_process_setup+0x498>)
   81c6c:	781b      	ldrb	r3, [r3, #0]
   81c6e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   81c72:	3b01      	subs	r3, #1
   81c74:	4a3a      	ldr	r2, [pc, #232]	; (81d60 <udc_process_setup+0x494>)
   81c76:	6852      	ldr	r2, [r2, #4]
   81c78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   81c7c:	4a3a      	ldr	r2, [pc, #232]	; (81d68 <udc_process_setup+0x49c>)
   81c7e:	6013      	str	r3, [r2, #0]
   81c80:	e7ed      	b.n	81c5e <udc_process_setup+0x392>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81c82:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   81c84:	4626      	mov	r6, r4
   81c86:	4d39      	ldr	r5, [pc, #228]	; (81d6c <udc_process_setup+0x4a0>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81c88:	4f37      	ldr	r7, [pc, #220]	; (81d68 <udc_process_setup+0x49c>)
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   81c8a:	4631      	mov	r1, r6
   81c8c:	4620      	mov	r0, r4
   81c8e:	47a8      	blx	r5
   81c90:	2800      	cmp	r0, #0
   81c92:	d078      	beq.n	81d86 <udc_process_setup+0x4ba>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   81c94:	3401      	adds	r4, #1
   81c96:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81c98:	683b      	ldr	r3, [r7, #0]
   81c9a:	681b      	ldr	r3, [r3, #0]
   81c9c:	791b      	ldrb	r3, [r3, #4]
   81c9e:	42a3      	cmp	r3, r4
   81ca0:	d8f3      	bhi.n	81c8a <udc_process_setup+0x3be>
   81ca2:	e0d1      	b.n	81e48 <udc_process_setup+0x57c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   81ca4:	2b01      	cmp	r3, #1
   81ca6:	d119      	bne.n	81cdc <udc_process_setup+0x410>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   81ca8:	4a24      	ldr	r2, [pc, #144]	; (81d3c <udc_process_setup+0x470>)
   81caa:	7852      	ldrb	r2, [r2, #1]
   81cac:	2a0b      	cmp	r2, #11
   81cae:	d115      	bne.n	81cdc <udc_process_setup+0x410>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   81cb0:	4b22      	ldr	r3, [pc, #136]	; (81d3c <udc_process_setup+0x470>)
   81cb2:	88db      	ldrh	r3, [r3, #6]
   81cb4:	2b00      	cmp	r3, #0
   81cb6:	d16c      	bne.n	81d92 <udc_process_setup+0x4c6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   81cb8:	4b2a      	ldr	r3, [pc, #168]	; (81d64 <udc_process_setup+0x498>)
   81cba:	781b      	ldrb	r3, [r3, #0]
   81cbc:	2b00      	cmp	r3, #0
   81cbe:	d068      	beq.n	81d92 <udc_process_setup+0x4c6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81cc0:	4b1e      	ldr	r3, [pc, #120]	; (81d3c <udc_process_setup+0x470>)
   81cc2:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   81cc4:	885d      	ldrh	r5, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   81cc6:	4620      	mov	r0, r4
   81cc8:	4b29      	ldr	r3, [pc, #164]	; (81d70 <udc_process_setup+0x4a4>)
   81cca:	4798      	blx	r3
   81ccc:	2800      	cmp	r0, #0
   81cce:	d05a      	beq.n	81d86 <udc_process_setup+0x4ba>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   81cd0:	b2e9      	uxtb	r1, r5
   81cd2:	4620      	mov	r0, r4
   81cd4:	4b25      	ldr	r3, [pc, #148]	; (81d6c <udc_process_setup+0x4a0>)
   81cd6:	4798      	blx	r3
   81cd8:	4603      	mov	r3, r0
   81cda:	e052      	b.n	81d82 <udc_process_setup+0x4b6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   81cdc:	2b02      	cmp	r3, #2
   81cde:	d152      	bne.n	81d86 <udc_process_setup+0x4ba>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   81ce0:	4b16      	ldr	r3, [pc, #88]	; (81d3c <udc_process_setup+0x470>)
   81ce2:	785b      	ldrb	r3, [r3, #1]
   81ce4:	2b01      	cmp	r3, #1
   81ce6:	d002      	beq.n	81cee <udc_process_setup+0x422>
   81ce8:	2b03      	cmp	r3, #3
   81cea:	d00e      	beq.n	81d0a <udc_process_setup+0x43e>
   81cec:	e048      	b.n	81d80 <udc_process_setup+0x4b4>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   81cee:	4b13      	ldr	r3, [pc, #76]	; (81d3c <udc_process_setup+0x470>)
   81cf0:	88db      	ldrh	r3, [r3, #6]
   81cf2:	2b00      	cmp	r3, #0
   81cf4:	d16d      	bne.n	81dd2 <udc_process_setup+0x506>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81cf6:	4b11      	ldr	r3, [pc, #68]	; (81d3c <udc_process_setup+0x470>)
   81cf8:	885b      	ldrh	r3, [r3, #2]
   81cfa:	2b00      	cmp	r3, #0
   81cfc:	d169      	bne.n	81dd2 <udc_process_setup+0x506>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81cfe:	4b0f      	ldr	r3, [pc, #60]	; (81d3c <udc_process_setup+0x470>)
   81d00:	7918      	ldrb	r0, [r3, #4]
   81d02:	4b1c      	ldr	r3, [pc, #112]	; (81d74 <udc_process_setup+0x4a8>)
   81d04:	4798      	blx	r3
   81d06:	4603      	mov	r3, r0
   81d08:	e03b      	b.n	81d82 <udc_process_setup+0x4b6>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   81d0a:	4b0c      	ldr	r3, [pc, #48]	; (81d3c <udc_process_setup+0x470>)
   81d0c:	88db      	ldrh	r3, [r3, #6]
   81d0e:	2b00      	cmp	r3, #0
   81d10:	d15f      	bne.n	81dd2 <udc_process_setup+0x506>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81d12:	4b0a      	ldr	r3, [pc, #40]	; (81d3c <udc_process_setup+0x470>)
   81d14:	885b      	ldrh	r3, [r3, #2]
   81d16:	2b00      	cmp	r3, #0
   81d18:	d15b      	bne.n	81dd2 <udc_process_setup+0x506>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   81d1a:	4c08      	ldr	r4, [pc, #32]	; (81d3c <udc_process_setup+0x470>)
   81d1c:	7920      	ldrb	r0, [r4, #4]
   81d1e:	4b16      	ldr	r3, [pc, #88]	; (81d78 <udc_process_setup+0x4ac>)
   81d20:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81d22:	7920      	ldrb	r0, [r4, #4]
   81d24:	4b15      	ldr	r3, [pc, #84]	; (81d7c <udc_process_setup+0x4b0>)
   81d26:	4798      	blx	r3
   81d28:	4603      	mov	r3, r0
   81d2a:	e02a      	b.n	81d82 <udc_process_setup+0x4b6>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   81d2c:	2300      	movs	r3, #0
   81d2e:	e028      	b.n	81d82 <udc_process_setup+0x4b6>
				break;
			}
		}
#endif
	}
	return false;
   81d30:	2300      	movs	r3, #0
   81d32:	e026      	b.n	81d82 <udc_process_setup+0x4b6>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
   81d34:	2300      	movs	r3, #0
   81d36:	e024      	b.n	81d82 <udc_process_setup+0x4b6>
		break;
#endif
	default:
		break;
	}
	return false;
   81d38:	2300      	movs	r3, #0
   81d3a:	e022      	b.n	81d82 <udc_process_setup+0x4b6>
   81d3c:	20071684 	.word	0x20071684
   81d40:	2007134a 	.word	0x2007134a
   81d44:	00082c39 	.word	0x00082c39
   81d48:	00081849 	.word	0x00081849
   81d4c:	00083285 	.word	0x00083285
   81d50:	000832a1 	.word	0x000832a1
   81d54:	000832bd 	.word	0x000832bd
   81d58:	000832d1 	.word	0x000832d1
   81d5c:	00082c75 	.word	0x00082c75
   81d60:	200701ec 	.word	0x200701ec
   81d64:	2007134c 	.word	0x2007134c
   81d68:	20071344 	.word	0x20071344
   81d6c:	000817e1 	.word	0x000817e1
   81d70:	00081779 	.word	0x00081779
   81d74:	00082e21 	.word	0x00082e21
   81d78:	00083209 	.word	0x00083209
   81d7c:	00082d21 	.word	0x00082d21
				break;
			}
		}
#endif
	}
	return false;
   81d80:	2300      	movs	r3, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   81d82:	2b00      	cmp	r3, #0
   81d84:	d161      	bne.n	81e4a <udc_process_setup+0x57e>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   81d86:	4b32      	ldr	r3, [pc, #200]	; (81e50 <udc_process_setup+0x584>)
   81d88:	781b      	ldrb	r3, [r3, #0]
   81d8a:	f003 031f 	and.w	r3, r3, #31
   81d8e:	2b01      	cmp	r3, #1
   81d90:	d11f      	bne.n	81dd2 <udc_process_setup+0x506>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   81d92:	4b30      	ldr	r3, [pc, #192]	; (81e54 <udc_process_setup+0x588>)
   81d94:	781b      	ldrb	r3, [r3, #0]
   81d96:	2b00      	cmp	r3, #0
   81d98:	d048      	beq.n	81e2c <udc_process_setup+0x560>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81d9a:	4b2d      	ldr	r3, [pc, #180]	; (81e50 <udc_process_setup+0x584>)
   81d9c:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81d9e:	4b2e      	ldr	r3, [pc, #184]	; (81e58 <udc_process_setup+0x58c>)
   81da0:	681d      	ldr	r5, [r3, #0]
   81da2:	682b      	ldr	r3, [r5, #0]
   81da4:	791b      	ldrb	r3, [r3, #4]
   81da6:	42a3      	cmp	r3, r4
   81da8:	d942      	bls.n	81e30 <udc_process_setup+0x564>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   81daa:	2100      	movs	r1, #0
   81dac:	4620      	mov	r0, r4
   81dae:	4b2b      	ldr	r3, [pc, #172]	; (81e5c <udc_process_setup+0x590>)
   81db0:	4798      	blx	r3
   81db2:	b170      	cbz	r0, 81dd2 <udc_process_setup+0x506>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81db4:	686b      	ldr	r3, [r5, #4]
   81db6:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81dba:	68eb      	ldr	r3, [r5, #12]
   81dbc:	4798      	blx	r3
   81dbe:	4601      	mov	r1, r0
   81dc0:	4620      	mov	r0, r4
   81dc2:	4b26      	ldr	r3, [pc, #152]	; (81e5c <udc_process_setup+0x590>)
   81dc4:	4798      	blx	r3
   81dc6:	b120      	cbz	r0, 81dd2 <udc_process_setup+0x506>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   81dc8:	68ab      	ldr	r3, [r5, #8]
   81dca:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   81dcc:	4603      	mov	r3, r0
   81dce:	2800      	cmp	r0, #0
   81dd0:	d13b      	bne.n	81e4a <udc_process_setup+0x57e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   81dd2:	4b1f      	ldr	r3, [pc, #124]	; (81e50 <udc_process_setup+0x584>)
   81dd4:	781b      	ldrb	r3, [r3, #0]
   81dd6:	f003 031f 	and.w	r3, r3, #31
   81dda:	2b02      	cmp	r3, #2
   81ddc:	d12a      	bne.n	81e34 <udc_process_setup+0x568>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   81dde:	4b1d      	ldr	r3, [pc, #116]	; (81e54 <udc_process_setup+0x588>)
   81de0:	781b      	ldrb	r3, [r3, #0]
   81de2:	b1eb      	cbz	r3, 81e20 <udc_process_setup+0x554>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81de4:	4b1c      	ldr	r3, [pc, #112]	; (81e58 <udc_process_setup+0x58c>)
   81de6:	681a      	ldr	r2, [r3, #0]
   81de8:	6813      	ldr	r3, [r2, #0]
   81dea:	791b      	ldrb	r3, [r3, #4]
   81dec:	b1d3      	cbz	r3, 81e24 <udc_process_setup+0x558>
   81dee:	2400      	movs	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81df0:	4e1a      	ldr	r6, [pc, #104]	; (81e5c <udc_process_setup+0x590>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81df2:	4f19      	ldr	r7, [pc, #100]	; (81e58 <udc_process_setup+0x58c>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   81df4:	6853      	ldr	r3, [r2, #4]
   81df6:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81dfa:	68eb      	ldr	r3, [r5, #12]
   81dfc:	4798      	blx	r3
   81dfe:	4601      	mov	r1, r0
   81e00:	4620      	mov	r0, r4
   81e02:	47b0      	blx	r6
   81e04:	4603      	mov	r3, r0
   81e06:	b300      	cbz	r0, 81e4a <udc_process_setup+0x57e>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   81e08:	68ab      	ldr	r3, [r5, #8]
   81e0a:	4798      	blx	r3
   81e0c:	4603      	mov	r3, r0
   81e0e:	b9e0      	cbnz	r0, 81e4a <udc_process_setup+0x57e>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   81e10:	3401      	adds	r4, #1
   81e12:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81e14:	683a      	ldr	r2, [r7, #0]
   81e16:	6811      	ldr	r1, [r2, #0]
   81e18:	7909      	ldrb	r1, [r1, #4]
   81e1a:	42a1      	cmp	r1, r4
   81e1c:	d8ea      	bhi.n	81df4 <udc_process_setup+0x528>
   81e1e:	e014      	b.n	81e4a <udc_process_setup+0x57e>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   81e20:	2300      	movs	r3, #0
   81e22:	e012      	b.n	81e4a <udc_process_setup+0x57e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   81e24:	2300      	movs	r3, #0
   81e26:	e010      	b.n	81e4a <udc_process_setup+0x57e>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   81e28:	2300      	movs	r3, #0
   81e2a:	e00e      	b.n	81e4a <udc_process_setup+0x57e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   81e2c:	2300      	movs	r3, #0
   81e2e:	e00c      	b.n	81e4a <udc_process_setup+0x57e>
   81e30:	2300      	movs	r3, #0
   81e32:	e00a      	b.n	81e4a <udc_process_setup+0x57e>
   81e34:	2300      	movs	r3, #0
   81e36:	e008      	b.n	81e4a <udc_process_setup+0x57e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   81e38:	f013 0f60 	tst.w	r3, #96	; 0x60
   81e3c:	d1a3      	bne.n	81d86 <udc_process_setup+0x4ba>
   81e3e:	e65b      	b.n	81af8 <udc_process_setup+0x22c>
   81e40:	f013 0f60 	tst.w	r3, #96	; 0x60
   81e44:	d19f      	bne.n	81d86 <udc_process_setup+0x4ba>
   81e46:	e552      	b.n	818ee <udc_process_setup+0x22>
		if (udc_reqstd()) {
			return true;
   81e48:	2301      	movs	r3, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
   81e4a:	4618      	mov	r0, r3
   81e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81e4e:	bf00      	nop
   81e50:	20071684 	.word	0x20071684
   81e54:	2007134c 	.word	0x2007134c
   81e58:	20071344 	.word	0x20071344
   81e5c:	0008170d 	.word	0x0008170d

00081e60 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81e64:	4604      	mov	r4, r0
   81e66:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81e68:	4b0e      	ldr	r3, [pc, #56]	; (81ea4 <pio_handler_process+0x44>)
   81e6a:	4798      	blx	r3
   81e6c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81e6e:	4620      	mov	r0, r4
   81e70:	4b0d      	ldr	r3, [pc, #52]	; (81ea8 <pio_handler_process+0x48>)
   81e72:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81e74:	4005      	ands	r5, r0
   81e76:	d013      	beq.n	81ea0 <pio_handler_process+0x40>
   81e78:	4c0c      	ldr	r4, [pc, #48]	; (81eac <pio_handler_process+0x4c>)
   81e7a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81e7e:	6823      	ldr	r3, [r4, #0]
   81e80:	4543      	cmp	r3, r8
   81e82:	d108      	bne.n	81e96 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81e84:	6861      	ldr	r1, [r4, #4]
   81e86:	4229      	tst	r1, r5
   81e88:	d005      	beq.n	81e96 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81e8a:	68e3      	ldr	r3, [r4, #12]
   81e8c:	4640      	mov	r0, r8
   81e8e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81e90:	6863      	ldr	r3, [r4, #4]
   81e92:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81e96:	42b4      	cmp	r4, r6
   81e98:	d002      	beq.n	81ea0 <pio_handler_process+0x40>
   81e9a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81e9c:	2d00      	cmp	r5, #0
   81e9e:	d1ee      	bne.n	81e7e <pio_handler_process+0x1e>
   81ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ea4:	000835cd 	.word	0x000835cd
   81ea8:	000835d1 	.word	0x000835d1
   81eac:	20071358 	.word	0x20071358

00081eb0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81eb0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81eb2:	210b      	movs	r1, #11
   81eb4:	4801      	ldr	r0, [pc, #4]	; (81ebc <PIOA_Handler+0xc>)
   81eb6:	4b02      	ldr	r3, [pc, #8]	; (81ec0 <PIOA_Handler+0x10>)
   81eb8:	4798      	blx	r3
   81eba:	bd08      	pop	{r3, pc}
   81ebc:	400e0e00 	.word	0x400e0e00
   81ec0:	00081e61 	.word	0x00081e61

00081ec4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81ec4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81ec6:	210c      	movs	r1, #12
   81ec8:	4801      	ldr	r0, [pc, #4]	; (81ed0 <PIOB_Handler+0xc>)
   81eca:	4b02      	ldr	r3, [pc, #8]	; (81ed4 <PIOB_Handler+0x10>)
   81ecc:	4798      	blx	r3
   81ece:	bd08      	pop	{r3, pc}
   81ed0:	400e1000 	.word	0x400e1000
   81ed4:	00081e61 	.word	0x00081e61

00081ed8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81ed8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81eda:	210d      	movs	r1, #13
   81edc:	4801      	ldr	r0, [pc, #4]	; (81ee4 <PIOC_Handler+0xc>)
   81ede:	4b02      	ldr	r3, [pc, #8]	; (81ee8 <PIOC_Handler+0x10>)
   81ee0:	4798      	blx	r3
   81ee2:	bd08      	pop	{r3, pc}
   81ee4:	400e1200 	.word	0x400e1200
   81ee8:	00081e61 	.word	0x00081e61

00081eec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81eec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81eee:	210e      	movs	r1, #14
   81ef0:	4801      	ldr	r0, [pc, #4]	; (81ef8 <PIOD_Handler+0xc>)
   81ef2:	4b02      	ldr	r3, [pc, #8]	; (81efc <PIOD_Handler+0x10>)
   81ef4:	4798      	blx	r3
   81ef6:	bd08      	pop	{r3, pc}
   81ef8:	400e1400 	.word	0x400e1400
   81efc:	00081e61 	.word	0x00081e61

00081f00 <udd_ctrl_init>:
	udd_enable_endpoint_interrupt(0);
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
   81f00:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81f02:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81f06:	fab3 f383 	clz	r3, r3
   81f0a:	095b      	lsrs	r3, r3, #5
   81f0c:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81f0e:	b672      	cpsid	i
   81f10:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81f14:	2200      	movs	r2, #0
   81f16:	4b0c      	ldr	r3, [pc, #48]	; (81f48 <udd_ctrl_init+0x48>)
   81f18:	701a      	strb	r2, [r3, #0]
	return flags;
   81f1a:	9b01      	ldr	r3, [sp, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   81f1c:	2101      	movs	r1, #1
   81f1e:	4a0b      	ldr	r2, [pc, #44]	; (81f4c <udd_ctrl_init+0x4c>)
   81f20:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81f22:	b123      	cbz	r3, 81f2e <udd_ctrl_init+0x2e>
		cpu_irq_enable();
   81f24:	4b08      	ldr	r3, [pc, #32]	; (81f48 <udd_ctrl_init+0x48>)
   81f26:	7019      	strb	r1, [r3, #0]
   81f28:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81f2c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   81f2e:	2202      	movs	r2, #2
   81f30:	4b07      	ldr	r3, [pc, #28]	; (81f50 <udd_ctrl_init+0x50>)
   81f32:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
   81f34:	4a07      	ldr	r2, [pc, #28]	; (81f54 <udd_ctrl_init+0x54>)
   81f36:	2300      	movs	r3, #0
   81f38:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   81f3a:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   81f3c:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   81f3e:	4a06      	ldr	r2, [pc, #24]	; (81f58 <udd_ctrl_init+0x58>)
   81f40:	7013      	strb	r3, [r2, #0]
}
   81f42:	b002      	add	sp, #8
   81f44:	4770      	bx	lr
   81f46:	bf00      	nop
   81f48:	20070277 	.word	0x20070277
   81f4c:	400ac220 	.word	0x400ac220
   81f50:	400ac160 	.word	0x400ac160
   81f54:	20071684 	.word	0x20071684
   81f58:	20071418 	.word	0x20071418

00081f5c <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   81f5c:	2205      	movs	r2, #5
   81f5e:	4b03      	ldr	r3, [pc, #12]	; (81f6c <udd_ctrl_stall_data+0x10>)
   81f60:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   81f62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81f66:	4b02      	ldr	r3, [pc, #8]	; (81f70 <udd_ctrl_stall_data+0x14>)
   81f68:	601a      	str	r2, [r3, #0]
   81f6a:	4770      	bx	lr
   81f6c:	20071418 	.word	0x20071418
   81f70:	400ac1f0 	.word	0x400ac1f0

00081f74 <udd_ctrl_send_zlp_in>:
}


static void udd_ctrl_send_zlp_in(void)
{
   81f74:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   81f76:	2203      	movs	r2, #3
   81f78:	4b0f      	ldr	r3, [pc, #60]	; (81fb8 <udd_ctrl_send_zlp_in+0x44>)
   81f7a:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81f7c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81f80:	fab3 f383 	clz	r3, r3
   81f84:	095b      	lsrs	r3, r3, #5
   81f86:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81f88:	b672      	cpsid	i
   81f8a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81f8e:	2200      	movs	r2, #0
   81f90:	4b0a      	ldr	r3, [pc, #40]	; (81fbc <udd_ctrl_send_zlp_in+0x48>)
   81f92:	701a      	strb	r2, [r3, #0]
	return flags;
   81f94:	9801      	ldr	r0, [sp, #4]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   81f96:	490a      	ldr	r1, [pc, #40]	; (81fc0 <udd_ctrl_send_zlp_in+0x4c>)
   81f98:	2201      	movs	r2, #1
   81f9a:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
   81f9c:	4b09      	ldr	r3, [pc, #36]	; (81fc4 <udd_ctrl_send_zlp_in+0x50>)
   81f9e:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   81fa0:	2208      	movs	r2, #8
   81fa2:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
   81fa4:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81fa6:	b128      	cbz	r0, 81fb4 <udd_ctrl_send_zlp_in+0x40>
		cpu_irq_enable();
   81fa8:	2201      	movs	r2, #1
   81faa:	4b04      	ldr	r3, [pc, #16]	; (81fbc <udd_ctrl_send_zlp_in+0x48>)
   81fac:	701a      	strb	r2, [r3, #0]
   81fae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81fb2:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   81fb4:	b002      	add	sp, #8
   81fb6:	4770      	bx	lr
   81fb8:	20071418 	.word	0x20071418
   81fbc:	20070277 	.word	0x20070277
   81fc0:	400ac160 	.word	0x400ac160
   81fc4:	400ac1f0 	.word	0x400ac1f0

00081fc8 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   81fc8:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   81fca:	4b02      	ldr	r3, [pc, #8]	; (81fd4 <udd_ctrl_endofrequest+0xc>)
   81fcc:	691b      	ldr	r3, [r3, #16]
   81fce:	b103      	cbz	r3, 81fd2 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   81fd0:	4798      	blx	r3
   81fd2:	bd08      	pop	{r3, pc}
   81fd4:	20071684 	.word	0x20071684

00081fd8 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   81fd8:	b510      	push	{r4, lr}
   81fda:	b084      	sub	sp, #16
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81fdc:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81fe0:	fab3 f383 	clz	r3, r3
   81fe4:	095b      	lsrs	r3, r3, #5
   81fe6:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81fe8:	b672      	cpsid	i
   81fea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81fee:	2200      	movs	r2, #0
   81ff0:	4b4c      	ldr	r3, [pc, #304]	; (82124 <udd_ctrl_in_sent+0x14c>)
   81ff2:	701a      	strb	r2, [r3, #0]
	return flags;
   81ff4:	9b01      	ldr	r3, [sp, #4]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   81ff6:	2101      	movs	r1, #1
   81ff8:	4a4b      	ldr	r2, [pc, #300]	; (82128 <udd_ctrl_in_sent+0x150>)
   81ffa:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81ffc:	b123      	cbz	r3, 82008 <udd_ctrl_in_sent+0x30>
		cpu_irq_enable();
   81ffe:	4b49      	ldr	r3, [pc, #292]	; (82124 <udd_ctrl_in_sent+0x14c>)
   82000:	7019      	strb	r1, [r3, #0]
   82002:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82006:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82008:	4b48      	ldr	r3, [pc, #288]	; (8212c <udd_ctrl_in_sent+0x154>)
   8200a:	781b      	ldrb	r3, [r3, #0]
   8200c:	2b03      	cmp	r3, #3
   8200e:	d104      	bne.n	8201a <udd_ctrl_in_sent+0x42>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   82010:	4b47      	ldr	r3, [pc, #284]	; (82130 <udd_ctrl_in_sent+0x158>)
   82012:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   82014:	4b47      	ldr	r3, [pc, #284]	; (82134 <udd_ctrl_in_sent+0x15c>)
   82016:	4798      	blx	r3
		return;
   82018:	e081      	b.n	8211e <udd_ctrl_in_sent+0x146>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8201a:	4b47      	ldr	r3, [pc, #284]	; (82138 <udd_ctrl_in_sent+0x160>)
   8201c:	881a      	ldrh	r2, [r3, #0]
   8201e:	4b47      	ldr	r3, [pc, #284]	; (8213c <udd_ctrl_in_sent+0x164>)
   82020:	899c      	ldrh	r4, [r3, #12]
   82022:	1aa4      	subs	r4, r4, r2
   82024:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   82026:	2c00      	cmp	r4, #0
   82028:	d133      	bne.n	82092 <udd_ctrl_in_sent+0xba>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8202a:	4945      	ldr	r1, [pc, #276]	; (82140 <udd_ctrl_in_sent+0x168>)
   8202c:	880b      	ldrh	r3, [r1, #0]
   8202e:	4413      	add	r3, r2
   82030:	b29b      	uxth	r3, r3
   82032:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   82034:	4a41      	ldr	r2, [pc, #260]	; (8213c <udd_ctrl_in_sent+0x164>)
   82036:	88d2      	ldrh	r2, [r2, #6]
   82038:	429a      	cmp	r2, r3
   8203a:	d002      	beq.n	82042 <udd_ctrl_in_sent+0x6a>
					|| b_shortpacket) {
   8203c:	4b41      	ldr	r3, [pc, #260]	; (82144 <udd_ctrl_in_sent+0x16c>)
   8203e:	781b      	ldrb	r3, [r3, #0]
   82040:	b1eb      	cbz	r3, 8207e <udd_ctrl_in_sent+0xa6>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   82042:	2204      	movs	r2, #4
   82044:	4b39      	ldr	r3, [pc, #228]	; (8212c <udd_ctrl_in_sent+0x154>)
   82046:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82048:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8204c:	fab3 f383 	clz	r3, r3
   82050:	095b      	lsrs	r3, r3, #5
   82052:	9303      	str	r3, [sp, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   82054:	b672      	cpsid	i
   82056:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8205a:	2200      	movs	r2, #0
   8205c:	4b31      	ldr	r3, [pc, #196]	; (82124 <udd_ctrl_in_sent+0x14c>)
   8205e:	701a      	strb	r2, [r3, #0]
	return flags;
   82060:	9a03      	ldr	r2, [sp, #12]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   82062:	2310      	movs	r3, #16
   82064:	4938      	ldr	r1, [pc, #224]	; (82148 <udd_ctrl_in_sent+0x170>)
   82066:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   82068:	3190      	adds	r1, #144	; 0x90
   8206a:	600b      	str	r3, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8206c:	2a00      	cmp	r2, #0
   8206e:	d056      	beq.n	8211e <udd_ctrl_in_sent+0x146>
		cpu_irq_enable();
   82070:	2201      	movs	r2, #1
   82072:	4b2c      	ldr	r3, [pc, #176]	; (82124 <udd_ctrl_in_sent+0x14c>)
   82074:	701a      	strb	r2, [r3, #0]
   82076:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8207a:	b662      	cpsie	i
   8207c:	e04f      	b.n	8211e <udd_ctrl_in_sent+0x146>
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   8207e:	4b2f      	ldr	r3, [pc, #188]	; (8213c <udd_ctrl_in_sent+0x164>)
   82080:	695b      	ldr	r3, [r3, #20]
   82082:	b16b      	cbz	r3, 820a0 <udd_ctrl_in_sent+0xc8>
				|| (!udd_g_ctrlreq.over_under_run())) {
   82084:	4798      	blx	r3
   82086:	b158      	cbz	r0, 820a0 <udd_ctrl_in_sent+0xc8>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   82088:	2200      	movs	r2, #0
   8208a:	4b2b      	ldr	r3, [pc, #172]	; (82138 <udd_ctrl_in_sent+0x160>)
   8208c:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   8208e:	4b2b      	ldr	r3, [pc, #172]	; (8213c <udd_ctrl_in_sent+0x164>)
   82090:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   82092:	2c3f      	cmp	r4, #63	; 0x3f
   82094:	d904      	bls.n	820a0 <udd_ctrl_in_sent+0xc8>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   82096:	2200      	movs	r2, #0
   82098:	4b2a      	ldr	r3, [pc, #168]	; (82144 <udd_ctrl_in_sent+0x16c>)
   8209a:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   8209c:	2440      	movs	r4, #64	; 0x40
   8209e:	e002      	b.n	820a6 <udd_ctrl_in_sent+0xce>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   820a0:	2201      	movs	r2, #1
   820a2:	4b28      	ldr	r3, [pc, #160]	; (82144 <udd_ctrl_in_sent+0x16c>)
   820a4:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   820a6:	4b25      	ldr	r3, [pc, #148]	; (8213c <udd_ctrl_in_sent+0x164>)
   820a8:	689a      	ldr	r2, [r3, #8]
   820aa:	4b23      	ldr	r3, [pc, #140]	; (82138 <udd_ctrl_in_sent+0x160>)
   820ac:	881b      	ldrh	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   820ae:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   820b2:	fab1 f181 	clz	r1, r1
   820b6:	0949      	lsrs	r1, r1, #5
   820b8:	9102      	str	r1, [sp, #8]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   820ba:	b672      	cpsid	i
   820bc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   820c0:	2000      	movs	r0, #0
   820c2:	4918      	ldr	r1, [pc, #96]	; (82124 <udd_ctrl_in_sent+0x14c>)
   820c4:	7008      	strb	r0, [r1, #0]
	return flags;
   820c6:	9802      	ldr	r0, [sp, #8]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   820c8:	4920      	ldr	r1, [pc, #128]	; (8214c <udd_ctrl_in_sent+0x174>)
   820ca:	6809      	ldr	r1, [r1, #0]
   820cc:	f011 0f02 	tst.w	r1, #2
   820d0:	d101      	bne.n	820d6 <udd_ctrl_in_sent+0xfe>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   820d2:	b95c      	cbnz	r4, 820ec <udd_ctrl_in_sent+0x114>
   820d4:	e013      	b.n	820fe <udd_ctrl_in_sent+0x126>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   820d6:	b128      	cbz	r0, 820e4 <udd_ctrl_in_sent+0x10c>
		cpu_irq_enable();
   820d8:	2201      	movs	r2, #1
   820da:	4b12      	ldr	r3, [pc, #72]	; (82124 <udd_ctrl_in_sent+0x14c>)
   820dc:	701a      	strb	r2, [r3, #0]
   820de:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   820e2:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   820e4:	2204      	movs	r2, #4
   820e6:	4b11      	ldr	r3, [pc, #68]	; (8212c <udd_ctrl_in_sent+0x154>)
   820e8:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   820ea:	e018      	b.n	8211e <udd_ctrl_in_sent+0x146>
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   820ec:	441a      	add	r2, r3
   820ee:	4b18      	ldr	r3, [pc, #96]	; (82150 <udd_ctrl_in_sent+0x178>)
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   820f0:	f812 1b01 	ldrb.w	r1, [r2], #1
   820f4:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   820f8:	b2d9      	uxtb	r1, r3
   820fa:	42a1      	cmp	r1, r4
   820fc:	d3f8      	bcc.n	820f0 <udd_ctrl_in_sent+0x118>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   820fe:	4a0e      	ldr	r2, [pc, #56]	; (82138 <udd_ctrl_in_sent+0x160>)
   82100:	8813      	ldrh	r3, [r2, #0]
   82102:	441c      	add	r4, r3
   82104:	8014      	strh	r4, [r2, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   82106:	2301      	movs	r3, #1
   82108:	4a0f      	ldr	r2, [pc, #60]	; (82148 <udd_ctrl_in_sent+0x170>)
   8210a:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
   8210c:	3290      	adds	r2, #144	; 0x90
   8210e:	6013      	str	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82110:	b128      	cbz	r0, 8211e <udd_ctrl_in_sent+0x146>
		cpu_irq_enable();
   82112:	461a      	mov	r2, r3
   82114:	4b03      	ldr	r3, [pc, #12]	; (82124 <udd_ctrl_in_sent+0x14c>)
   82116:	701a      	strb	r2, [r3, #0]
   82118:	f3bf 8f5f 	dmb	sy
   8211c:	b662      	cpsie	i
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
   8211e:	b004      	add	sp, #16
   82120:	bd10      	pop	{r4, pc}
   82122:	bf00      	nop
   82124:	20070277 	.word	0x20070277
   82128:	400ac220 	.word	0x400ac220
   8212c:	20071418 	.word	0x20071418
   82130:	00081fc9 	.word	0x00081fc9
   82134:	00081f01 	.word	0x00081f01
   82138:	2007141a 	.word	0x2007141a
   8213c:	20071684 	.word	0x20071684
   82140:	200713ca 	.word	0x200713ca
   82144:	2007141c 	.word	0x2007141c
   82148:	400ac160 	.word	0x400ac160
   8214c:	400ac130 	.word	0x400ac130
   82150:	20180000 	.word	0x20180000

00082154 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
   82154:	7d03      	ldrb	r3, [r0, #20]
   82156:	f013 0f01 	tst.w	r3, #1
   8215a:	d013      	beq.n	82184 <udd_ep_finish_job+0x30>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   8215c:	b510      	push	{r4, lr}
   8215e:	460c      	mov	r4, r1
	if (ptr_job->busy == false) {
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   82160:	7d03      	ldrb	r3, [r0, #20]
   82162:	f36f 0300 	bfc	r3, #0, #1
   82166:	7503      	strb	r3, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   82168:	6803      	ldr	r3, [r0, #0]
   8216a:	b153      	cbz	r3, 82182 <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   8216c:	4906      	ldr	r1, [pc, #24]	; (82188 <udd_ep_finish_job+0x34>)
   8216e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   82172:	f411 7f80 	tst.w	r1, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   82176:	bf18      	it	ne
   82178:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   8217c:	6881      	ldr	r1, [r0, #8]
   8217e:	4620      	mov	r0, r4
   82180:	4798      	blx	r3
   82182:	bd10      	pop	{r4, pc}
   82184:	4770      	bx	lr
   82186:	bf00      	nop
   82188:	400ac100 	.word	0x400ac100

0008218c <udd_ep_trans_done>:
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8218c:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   8218e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   82192:	4a5e      	ldr	r2, [pc, #376]	; (8230c <udd_ep_trans_done+0x180>)
   82194:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   82198:	7d12      	ldrb	r2, [r2, #20]
   8219a:	f012 0f01 	tst.w	r2, #1
   8219e:	f000 80b4 	beq.w	8230a <udd_ep_trans_done+0x17e>
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   821a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   821a4:	b083      	sub	sp, #12

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   821a6:	460a      	mov	r2, r1
   821a8:	4958      	ldr	r1, [pc, #352]	; (8230c <udd_ep_trans_done+0x180>)
   821aa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   821ae:	68d1      	ldr	r1, [r2, #12]
   821b0:	6892      	ldr	r2, [r2, #8]
   821b2:	4291      	cmp	r1, r2
   821b4:	d076      	beq.n	822a4 <udd_ep_trans_done+0x118>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   821b6:	1a52      	subs	r2, r2, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   821b8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   821bc:	bf92      	itee	ls
   821be:	0417      	lslls	r7, r2, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   821c0:	f44f 3280 	movhi.w	r2, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   821c4:	2700      	movhi	r7, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   821c6:	4c52      	ldr	r4, [pc, #328]	; (82310 <udd_ep_trans_done+0x184>)
   821c8:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   821cc:	f415 7f80 	tst.w	r5, #256	; 0x100
   821d0:	d014      	beq.n	821fc <udd_ep_trans_done+0x70>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   821d2:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   821d6:	f3c4 1502 	ubfx	r5, r4, #4, #3
   821da:	2408      	movs	r4, #8
   821dc:	40ac      	lsls	r4, r5
   821de:	3c01      	subs	r4, #1
   821e0:	4214      	tst	r4, r2
   821e2:	d01b      	beq.n	8221c <udd_ep_trans_done+0x90>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   821e4:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   821e8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   821ec:	4d47      	ldr	r5, [pc, #284]	; (8230c <udd_ep_trans_done+0x180>)
   821ee:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   821f2:	7d25      	ldrb	r5, [r4, #20]
   821f4:	f36f 0541 	bfc	r5, #1, #1
   821f8:	7525      	strb	r5, [r4, #20]
   821fa:	e00f      	b.n	8221c <udd_ep_trans_done+0x90>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   821fc:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   82200:	f3c5 25c1 	ubfx	r5, r5, #11, #2
   82204:	2d01      	cmp	r5, #1
   82206:	d107      	bne.n	82218 <udd_ep_trans_done+0x8c>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   82208:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   8220c:	f3c4 1502 	ubfx	r5, r4, #4, #3
   82210:	2408      	movs	r4, #8
   82212:	40ac      	lsls	r4, r5
   82214:	42a2      	cmp	r2, r4
   82216:	d801      	bhi.n	8221c <udd_ep_trans_done+0x90>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   82218:	f047 0714 	orr.w	r7, r7, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8221c:	4c3d      	ldr	r4, [pc, #244]	; (82314 <udd_ep_trans_done+0x188>)
   8221e:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   82222:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   82226:	4e39      	ldr	r6, [pc, #228]	; (8230c <udd_ep_trans_done+0x180>)
   82228:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   8222c:	686d      	ldr	r5, [r5, #4]
   8222e:	4429      	add	r1, r5
   82230:	6061      	str	r1, [r4, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82232:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82236:	fab1 f181 	clz	r1, r1
   8223a:	0949      	lsrs	r1, r1, #5
   8223c:	9101      	str	r1, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8223e:	b672      	cpsid	i
   82240:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82244:	2500      	movs	r5, #0
   82246:	4934      	ldr	r1, [pc, #208]	; (82318 <udd_ep_trans_done+0x18c>)
   82248:	700d      	strb	r5, [r1, #0]
	return flags;
   8224a:	9d01      	ldr	r5, [sp, #4]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   8224c:	68e1      	ldr	r1, [r4, #12]
   8224e:	f011 0f10 	tst.w	r1, #16
   82252:	d119      	bne.n	82288 <udd_ep_trans_done+0xfc>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   82254:	f047 0721 	orr.w	r7, r7, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   82258:	60a7      	str	r7, [r4, #8]
			ptr_job->buf_cnt += next_trans;
   8225a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   8225e:	eb06 01c0 	add.w	r1, r6, r0, lsl #3
   82262:	68c8      	ldr	r0, [r1, #12]
   82264:	4410      	add	r0, r2
   82266:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
   82268:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   8226a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   8226e:	fa00 f303 	lsl.w	r3, r0, r3
   82272:	4a2a      	ldr	r2, [pc, #168]	; (8231c <udd_ep_trans_done+0x190>)
   82274:	6193      	str	r3, [r2, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82276:	2d00      	cmp	r5, #0
   82278:	d045      	beq.n	82306 <udd_ep_trans_done+0x17a>
		cpu_irq_enable();
   8227a:	2201      	movs	r2, #1
   8227c:	4b26      	ldr	r3, [pc, #152]	; (82318 <udd_ep_trans_done+0x18c>)
   8227e:	701a      	strb	r2, [r3, #0]
   82280:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82284:	b662      	cpsie	i
   82286:	e03e      	b.n	82306 <udd_ep_trans_done+0x17a>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82288:	b12d      	cbz	r5, 82296 <udd_ep_trans_done+0x10a>
		cpu_irq_enable();
   8228a:	2101      	movs	r1, #1
   8228c:	4a22      	ldr	r2, [pc, #136]	; (82318 <udd_ep_trans_done+0x18c>)
   8228e:	7011      	strb	r1, [r2, #0]
   82290:	f3bf 8f5f 	dmb	sy
   82294:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   82296:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   8229a:	491c      	ldr	r1, [pc, #112]	; (8230c <udd_ep_trans_done+0x180>)
   8229c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   822a0:	68d1      	ldr	r1, [r2, #12]
   822a2:	6091      	str	r1, [r2, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   822a4:	4a1a      	ldr	r2, [pc, #104]	; (82310 <udd_ep_trans_done+0x184>)
   822a6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   822aa:	f412 7f80 	tst.w	r2, #256	; 0x100
   822ae:	d021      	beq.n	822f4 <udd_ep_trans_done+0x168>
		if (ptr_job->b_shortpacket) {
   822b0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   822b4:	4915      	ldr	r1, [pc, #84]	; (8230c <udd_ep_trans_done+0x180>)
   822b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   822ba:	7d12      	ldrb	r2, [r2, #20]
   822bc:	f012 0f02 	tst.w	r2, #2
   822c0:	d018      	beq.n	822f4 <udd_ep_trans_done+0x168>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   822c2:	2201      	movs	r2, #1
   822c4:	4b16      	ldr	r3, [pc, #88]	; (82320 <udd_ep_trans_done+0x194>)
   822c6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   822ca:	3b30      	subs	r3, #48	; 0x30
   822cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   822d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   822d4:	bf1c      	itt	ne
   822d6:	4b13      	ldrne	r3, [pc, #76]	; (82324 <udd_ep_trans_done+0x198>)
   822d8:	f843 2020 	strne.w	r2, [r3, r0, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   822dc:	2201      	movs	r2, #1
   822de:	4b12      	ldr	r3, [pc, #72]	; (82328 <udd_ep_trans_done+0x19c>)
   822e0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   822e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   822e8:	fa02 f000 	lsl.w	r0, r2, r0
   822ec:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
   822f0:	6198      	str	r0, [r3, #24]
			return;
   822f2:	e008      	b.n	82306 <udd_ep_trans_done+0x17a>
   822f4:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   822f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			return;
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   822fa:	2100      	movs	r1, #0
   822fc:	4803      	ldr	r0, [pc, #12]	; (8230c <udd_ep_trans_done+0x180>)
   822fe:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   82302:	4b0a      	ldr	r3, [pc, #40]	; (8232c <udd_ep_trans_done+0x1a0>)
   82304:	4798      	blx	r3
}
   82306:	b003      	add	sp, #12
   82308:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8230a:	4770      	bx	lr
   8230c:	200713d0 	.word	0x200713d0
   82310:	400ac100 	.word	0x400ac100
   82314:	400ac300 	.word	0x400ac300
   82318:	20070277 	.word	0x20070277
   8231c:	400ac000 	.word	0x400ac000
   82320:	400ac160 	.word	0x400ac160
   82324:	400ac190 	.word	0x400ac190
   82328:	400ac1f0 	.word	0x400ac1f0
   8232c:	00082155 	.word	0x00082155

00082330 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   82330:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
   82332:	4601      	mov	r1, r0
   82334:	2800      	cmp	r0, #0
   82336:	d140      	bne.n	823ba <udd_sleep_mode+0x8a>
   82338:	4b23      	ldr	r3, [pc, #140]	; (823c8 <udd_sleep_mode+0x98>)
   8233a:	781b      	ldrb	r3, [r3, #0]
   8233c:	2b00      	cmp	r3, #0
   8233e:	d039      	beq.n	823b4 <udd_sleep_mode+0x84>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   82340:	4b22      	ldr	r3, [pc, #136]	; (823cc <udd_sleep_mode+0x9c>)
   82342:	789b      	ldrb	r3, [r3, #2]
   82344:	b903      	cbnz	r3, 82348 <udd_sleep_mode+0x18>
   82346:	e7fe      	b.n	82346 <udd_sleep_mode+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82348:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8234c:	fab3 f383 	clz	r3, r3
   82350:	095b      	lsrs	r3, r3, #5
   82352:	9300      	str	r3, [sp, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   82354:	b672      	cpsid	i
   82356:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8235a:	2200      	movs	r2, #0
   8235c:	4b1c      	ldr	r3, [pc, #112]	; (823d0 <udd_sleep_mode+0xa0>)
   8235e:	701a      	strb	r2, [r3, #0]
	return flags;
   82360:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   82362:	4a1a      	ldr	r2, [pc, #104]	; (823cc <udd_sleep_mode+0x9c>)
   82364:	7893      	ldrb	r3, [r2, #2]
   82366:	3b01      	subs	r3, #1
   82368:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8236a:	b318      	cbz	r0, 823b4 <udd_sleep_mode+0x84>
		cpu_irq_enable();
   8236c:	2201      	movs	r2, #1
   8236e:	4b18      	ldr	r3, [pc, #96]	; (823d0 <udd_sleep_mode+0xa0>)
   82370:	701a      	strb	r2, [r3, #0]
   82372:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82376:	b662      	cpsie	i
   82378:	e01c      	b.n	823b4 <udd_sleep_mode+0x84>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   8237a:	4b14      	ldr	r3, [pc, #80]	; (823cc <udd_sleep_mode+0x9c>)
   8237c:	789b      	ldrb	r3, [r3, #2]
   8237e:	2bff      	cmp	r3, #255	; 0xff
   82380:	d100      	bne.n	82384 <udd_sleep_mode+0x54>
   82382:	e7fe      	b.n	82382 <udd_sleep_mode+0x52>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82384:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82388:	fab3 f383 	clz	r3, r3
   8238c:	095b      	lsrs	r3, r3, #5
   8238e:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   82390:	b672      	cpsid	i
   82392:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82396:	2200      	movs	r2, #0
   82398:	4b0d      	ldr	r3, [pc, #52]	; (823d0 <udd_sleep_mode+0xa0>)
   8239a:	701a      	strb	r2, [r3, #0]
	return flags;
   8239c:	9801      	ldr	r0, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   8239e:	4a0b      	ldr	r2, [pc, #44]	; (823cc <udd_sleep_mode+0x9c>)
   823a0:	7893      	ldrb	r3, [r2, #2]
   823a2:	3301      	adds	r3, #1
   823a4:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   823a6:	b128      	cbz	r0, 823b4 <udd_sleep_mode+0x84>
		cpu_irq_enable();
   823a8:	2201      	movs	r2, #1
   823aa:	4b09      	ldr	r3, [pc, #36]	; (823d0 <udd_sleep_mode+0xa0>)
   823ac:	701a      	strb	r2, [r3, #0]
   823ae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   823b2:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   823b4:	4b04      	ldr	r3, [pc, #16]	; (823c8 <udd_sleep_mode+0x98>)
   823b6:	7019      	strb	r1, [r3, #0]
}
   823b8:	e004      	b.n	823c4 <udd_sleep_mode+0x94>
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   823ba:	4b03      	ldr	r3, [pc, #12]	; (823c8 <udd_sleep_mode+0x98>)
   823bc:	781b      	ldrb	r3, [r3, #0]
   823be:	2b00      	cmp	r3, #0
   823c0:	d1f8      	bne.n	823b4 <udd_sleep_mode+0x84>
   823c2:	e7da      	b.n	8237a <udd_sleep_mode+0x4a>
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
}
   823c4:	b002      	add	sp, #8
   823c6:	4770      	bx	lr
   823c8:	200713cc 	.word	0x200713cc
   823cc:	2007167c 	.word	0x2007167c
   823d0:	20070277 	.word	0x20070277

000823d4 <udd_enable>:
	return true;
}


void udd_enable(void)
{
   823d4:	b510      	push	{r4, lr}
   823d6:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   823d8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   823dc:	fab3 f383 	clz	r3, r3
   823e0:	095b      	lsrs	r3, r3, #5
   823e2:	9300      	str	r3, [sp, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   823e4:	b672      	cpsid	i
   823e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   823ea:	2200      	movs	r2, #0
   823ec:	4b54      	ldr	r3, [pc, #336]	; (82540 <udd_enable+0x16c>)
   823ee:	701a      	strb	r2, [r3, #0]
	return flags;
   823f0:	9c00      	ldr	r4, [sp, #0]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   823f2:	2028      	movs	r0, #40	; 0x28
   823f4:	4b53      	ldr	r3, [pc, #332]	; (82544 <udd_enable+0x170>)
   823f6:	4798      	blx	r3
	sysclk_enable_usb();
   823f8:	4b53      	ldr	r3, [pc, #332]	; (82548 <udd_enable+0x174>)
   823fa:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   823fc:	4b53      	ldr	r3, [pc, #332]	; (8254c <udd_enable+0x178>)
   823fe:	2250      	movs	r2, #80	; 0x50
   82400:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82404:	f44f 7280 	mov.w	r2, #256	; 0x100
   82408:	605a      	str	r2, [r3, #4]
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   8240a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8240e:	4b50      	ldr	r3, [pc, #320]	; (82550 <udd_enable+0x17c>)
   82410:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   82412:	4b50      	ldr	r3, [pc, #320]	; (82554 <udd_enable+0x180>)
   82414:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82418:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   8241c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_force_device_mode();
   82420:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82424:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   82428:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   8242c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82430:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   82434:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   82438:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8243c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   82440:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
   82444:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   8244c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   82450:	681a      	ldr	r2, [r3, #0]
   82452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   82456:	601a      	str	r2, [r3, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   82458:	681a      	ldr	r2, [r3, #0]
   8245a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
   8245e:	601a      	str	r2, [r3, #0]
	udd_high_speed_disable();
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   82460:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82464:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   82468:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   8246c:	461a      	mov	r2, r3
   8246e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   82472:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   82476:	d0fa      	beq.n	8246e <udd_enable+0x9a>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   82478:	4b37      	ldr	r3, [pc, #220]	; (82558 <udd_enable+0x184>)
   8247a:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
   8247c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   82480:	f36f 0282 	bfc	r2, #2, #1
   82484:	751a      	strb	r2, [r3, #20]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   82486:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   8248a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   8248e:	f36f 0282 	bfc	r2, #2, #1
   82492:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   82496:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
		udd_ep_job[i].stall_requested = false;
   8249a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   8249e:	f36f 0282 	bfc	r2, #2, #1
   824a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	otg_ack_vbus_transition();
   824a6:	4b2b      	ldr	r3, [pc, #172]	; (82554 <udd_enable+0x180>)
   824a8:	2202      	movs	r2, #2
   824aa:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   824ae:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   824b2:	f413 6f00 	tst.w	r3, #2048	; 0x800
		otg_raise_vbus_transition();
   824b6:	bf1c      	itt	ne
   824b8:	4b26      	ldrne	r3, [pc, #152]	; (82554 <udd_enable+0x180>)
   824ba:	f8c3 280c 	strne.w	r2, [r3, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   824be:	4b25      	ldr	r3, [pc, #148]	; (82554 <udd_enable+0x180>)
   824c0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   824c4:	f042 0202 	orr.w	r2, r2, #2
   824c8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_freeze_clock();
   824cc:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   824d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   824d4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   824d8:	4b20      	ldr	r3, [pc, #128]	; (8255c <udd_enable+0x188>)
   824da:	781b      	ldrb	r3, [r3, #0]
   824dc:	bb1b      	cbnz	r3, 82526 <udd_enable+0x152>
		udd_b_sleep_initialized = true;
   824de:	2201      	movs	r2, #1
   824e0:	4b1e      	ldr	r3, [pc, #120]	; (8255c <udd_enable+0x188>)
   824e2:	701a      	strb	r2, [r3, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   824e4:	2200      	movs	r2, #0
   824e6:	4b1e      	ldr	r3, [pc, #120]	; (82560 <udd_enable+0x18c>)
   824e8:	701a      	strb	r2, [r3, #0]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   824ea:	4b1e      	ldr	r3, [pc, #120]	; (82564 <udd_enable+0x190>)
   824ec:	78db      	ldrb	r3, [r3, #3]
   824ee:	2bff      	cmp	r3, #255	; 0xff
   824f0:	d100      	bne.n	824f4 <udd_enable+0x120>
   824f2:	e7fe      	b.n	824f2 <udd_enable+0x11e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   824f4:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   824f8:	fab3 f383 	clz	r3, r3
   824fc:	095b      	lsrs	r3, r3, #5
   824fe:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   82500:	b672      	cpsid	i
   82502:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82506:	2200      	movs	r2, #0
   82508:	4b0d      	ldr	r3, [pc, #52]	; (82540 <udd_enable+0x16c>)
   8250a:	701a      	strb	r2, [r3, #0]
	return flags;
   8250c:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   8250e:	4a15      	ldr	r2, [pc, #84]	; (82564 <udd_enable+0x190>)
   82510:	78d3      	ldrb	r3, [r2, #3]
   82512:	3301      	adds	r3, #1
   82514:	70d3      	strb	r3, [r2, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82516:	b149      	cbz	r1, 8252c <udd_enable+0x158>
		cpu_irq_enable();
   82518:	2201      	movs	r2, #1
   8251a:	4b09      	ldr	r3, [pc, #36]	; (82540 <udd_enable+0x16c>)
   8251c:	701a      	strb	r2, [r3, #0]
   8251e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82522:	b662      	cpsie	i
   82524:	e002      	b.n	8252c <udd_enable+0x158>
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
	} else {
		udd_sleep_mode(false); // Enter idle mode
   82526:	2000      	movs	r0, #0
   82528:	4b0f      	ldr	r3, [pc, #60]	; (82568 <udd_enable+0x194>)
   8252a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8252c:	b12c      	cbz	r4, 8253a <udd_enable+0x166>
		cpu_irq_enable();
   8252e:	2201      	movs	r2, #1
   82530:	4b03      	ldr	r3, [pc, #12]	; (82540 <udd_enable+0x16c>)
   82532:	701a      	strb	r2, [r3, #0]
   82534:	f3bf 8f5f 	dmb	sy
   82538:	b662      	cpsie	i
	}
#endif

	cpu_irq_restore(flags);
}
   8253a:	b002      	add	sp, #8
   8253c:	bd10      	pop	{r4, pc}
   8253e:	bf00      	nop
   82540:	20070277 	.word	0x20070277
   82544:	000837ad 	.word	0x000837ad
   82548:	000834ad 	.word	0x000834ad
   8254c:	e000e100 	.word	0xe000e100
   82550:	00083821 	.word	0x00083821
   82554:	400ac000 	.word	0x400ac000
   82558:	200713d0 	.word	0x200713d0
   8255c:	200713c8 	.word	0x200713c8
   82560:	200713cc 	.word	0x200713cc
   82564:	2007167c 	.word	0x2007167c
   82568:	00082331 	.word	0x00082331

0008256c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   8256c:	b570      	push	{r4, r5, r6, lr}
   8256e:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82570:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82574:	fab3 f383 	clz	r3, r3
   82578:	095b      	lsrs	r3, r3, #5
   8257a:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8257c:	b672      	cpsid	i
   8257e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82582:	2200      	movs	r2, #0
   82584:	4b19      	ldr	r3, [pc, #100]	; (825ec <udd_attach+0x80>)
   82586:	701a      	strb	r2, [r3, #0]
	return flags;
   82588:	9c01      	ldr	r4, [sp, #4]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   8258a:	2001      	movs	r0, #1
   8258c:	4b18      	ldr	r3, [pc, #96]	; (825f0 <udd_attach+0x84>)
   8258e:	4798      	blx	r3
	otg_unfreeze_clock();
   82590:	4a18      	ldr	r2, [pc, #96]	; (825f4 <udd_attach+0x88>)
   82592:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   82596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   8259a:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   8259e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   825a2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   825a6:	d0fa      	beq.n	8259e <udd_attach+0x32>

	// Authorize attach if Vbus is present
	udd_attach_device();
   825a8:	4b12      	ldr	r3, [pc, #72]	; (825f4 <udd_attach+0x88>)
   825aa:	681a      	ldr	r2, [r3, #0]
   825ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   825b0:	601a      	str	r2, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   825b2:	2608      	movs	r6, #8
   825b4:	619e      	str	r6, [r3, #24]
	udd_enable_suspend_interrupt();
   825b6:	2101      	movs	r1, #1
   825b8:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   825ba:	2210      	movs	r2, #16
   825bc:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   825be:	2504      	movs	r5, #4
   825c0:	619d      	str	r5, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   825c2:	2002      	movs	r0, #2
   825c4:	6198      	str	r0, [r3, #24]
#endif
	// Reset following interupts flag
	udd_ack_reset();
   825c6:	609e      	str	r6, [r3, #8]
	udd_ack_sof();
   825c8:	609d      	str	r5, [r3, #8]
	udd_ack_msof();
   825ca:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   825cc:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   825ce:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   825d0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   825d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   825d8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   825dc:	b124      	cbz	r4, 825e8 <udd_attach+0x7c>
		cpu_irq_enable();
   825de:	4b03      	ldr	r3, [pc, #12]	; (825ec <udd_attach+0x80>)
   825e0:	7019      	strb	r1, [r3, #0]
   825e2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   825e6:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   825e8:	b002      	add	sp, #8
   825ea:	bd70      	pop	{r4, r5, r6, pc}
   825ec:	20070277 	.word	0x20070277
   825f0:	00082331 	.word	0x00082331
   825f4:	400ac000 	.word	0x400ac000

000825f8 <udd_detach>:


void udd_detach(void)
{
   825f8:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   825fa:	4b0a      	ldr	r3, [pc, #40]	; (82624 <udd_detach+0x2c>)
   825fc:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82600:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   82604:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   82608:	681a      	ldr	r2, [r3, #0]
   8260a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8260e:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   82610:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   82618:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   8261c:	2000      	movs	r0, #0
   8261e:	4b02      	ldr	r3, [pc, #8]	; (82628 <udd_detach+0x30>)
   82620:	4798      	blx	r3
   82622:	bd08      	pop	{r3, pc}
   82624:	400ac000 	.word	0x400ac000
   82628:	00082331 	.word	0x00082331

0008262c <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   8262c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82630:	b084      	sub	sp, #16
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   82632:	4b87      	ldr	r3, [pc, #540]	; (82850 <UOTGHS_Handler+0x224>)
   82634:	4798      	blx	r3
   82636:	b958      	cbnz	r0, 82650 <UOTGHS_Handler+0x24>
   82638:	4b86      	ldr	r3, [pc, #536]	; (82854 <UOTGHS_Handler+0x228>)
   8263a:	685b      	ldr	r3, [r3, #4]
   8263c:	f013 0f01 	tst.w	r3, #1
   82640:	d106      	bne.n	82650 <UOTGHS_Handler+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   82642:	b672      	cpsid	i
   82644:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   82648:	2200      	movs	r2, #0
   8264a:	4b83      	ldr	r3, [pc, #524]	; (82858 <UOTGHS_Handler+0x22c>)
   8264c:	701a      	strb	r2, [r3, #0]
		return;
   8264e:	e2e4      	b.n	82c1a <UOTGHS_Handler+0x5ee>
	}

	if (Is_udd_sof()) {
   82650:	4b80      	ldr	r3, [pc, #512]	; (82854 <UOTGHS_Handler+0x228>)
   82652:	685b      	ldr	r3, [r3, #4]
   82654:	f013 0f04 	tst.w	r3, #4
   82658:	d00c      	beq.n	82674 <UOTGHS_Handler+0x48>
		udd_ack_sof();
   8265a:	4b7e      	ldr	r3, [pc, #504]	; (82854 <UOTGHS_Handler+0x228>)
   8265c:	2204      	movs	r2, #4
   8265e:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
   82660:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   82664:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   82668:	d101      	bne.n	8266e <UOTGHS_Handler+0x42>
			udc_sof_notify();
   8266a:	4b7c      	ldr	r3, [pc, #496]	; (8285c <UOTGHS_Handler+0x230>)
   8266c:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   8266e:	4b7c      	ldr	r3, [pc, #496]	; (82860 <UOTGHS_Handler+0x234>)
   82670:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   82672:	e2d2      	b.n	82c1a <UOTGHS_Handler+0x5ee>
	}

	if (Is_udd_msof()) {
   82674:	4b77      	ldr	r3, [pc, #476]	; (82854 <UOTGHS_Handler+0x228>)
   82676:	685b      	ldr	r3, [r3, #4]
   82678:	f013 0f02 	tst.w	r3, #2
   8267c:	d005      	beq.n	8268a <UOTGHS_Handler+0x5e>
		udd_ack_msof();
   8267e:	2202      	movs	r2, #2
   82680:	4b74      	ldr	r3, [pc, #464]	; (82854 <UOTGHS_Handler+0x228>)
   82682:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
   82684:	4b75      	ldr	r3, [pc, #468]	; (8285c <UOTGHS_Handler+0x230>)
   82686:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   82688:	e2c7      	b.n	82c1a <UOTGHS_Handler+0x5ee>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   8268a:	4b72      	ldr	r3, [pc, #456]	; (82854 <UOTGHS_Handler+0x228>)
   8268c:	685b      	ldr	r3, [r3, #4]
   8268e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   82692:	f000 82b3 	beq.w	82bfc <UOTGHS_Handler+0x5d0>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   82696:	4b73      	ldr	r3, [pc, #460]	; (82864 <UOTGHS_Handler+0x238>)
   82698:	2210      	movs	r2, #16
   8269a:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
   8269c:	2208      	movs	r2, #8
   8269e:	601a      	str	r2, [r3, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   826a0:	3bf0      	subs	r3, #240	; 0xf0
   826a2:	681b      	ldr	r3, [r3, #0]
   826a4:	f013 0f04 	tst.w	r3, #4
   826a8:	d060      	beq.n	8276c <UOTGHS_Handler+0x140>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   826aa:	4b6f      	ldr	r3, [pc, #444]	; (82868 <UOTGHS_Handler+0x23c>)
   826ac:	781b      	ldrb	r3, [r3, #0]
   826ae:	b11b      	cbz	r3, 826b8 <UOTGHS_Handler+0x8c>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   826b0:	4b6e      	ldr	r3, [pc, #440]	; (8286c <UOTGHS_Handler+0x240>)
   826b2:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   826b4:	4b6e      	ldr	r3, [pc, #440]	; (82870 <UOTGHS_Handler+0x244>)
   826b6:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   826b8:	4b6e      	ldr	r3, [pc, #440]	; (82874 <UOTGHS_Handler+0x248>)
   826ba:	681b      	ldr	r3, [r3, #0]
   826bc:	f3c3 530a 	ubfx	r3, r3, #20, #11
   826c0:	2b08      	cmp	r3, #8
   826c2:	d005      	beq.n	826d0 <UOTGHS_Handler+0xa4>
		udd_ctrl_stall_data();
   826c4:	4b6c      	ldr	r3, [pc, #432]	; (82878 <UOTGHS_Handler+0x24c>)
   826c6:	4798      	blx	r3
		udd_ack_setup_received(0);
   826c8:	2204      	movs	r2, #4
   826ca:	4b6c      	ldr	r3, [pc, #432]	; (8287c <UOTGHS_Handler+0x250>)
   826cc:	601a      	str	r2, [r3, #0]
   826ce:	e2a4      	b.n	82c1a <UOTGHS_Handler+0x5ee>
   826d0:	4a6b      	ldr	r2, [pc, #428]	; (82880 <UOTGHS_Handler+0x254>)

		// Reinitializes control endpoint management
		udd_ctrl_init();
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   826d2:	4b6c      	ldr	r3, [pc, #432]	; (82884 <UOTGHS_Handler+0x258>)
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
   826d4:	486c      	ldr	r0, [pc, #432]	; (82888 <UOTGHS_Handler+0x25c>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   826d6:	f813 1b01 	ldrb.w	r1, [r3], #1
   826da:	f802 1f01 	strb.w	r1, [r2, #1]!
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
   826de:	4283      	cmp	r3, r0
   826e0:	d1f9      	bne.n	826d6 <UOTGHS_Handler+0xaa>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   826e2:	4b6a      	ldr	r3, [pc, #424]	; (8288c <UOTGHS_Handler+0x260>)
   826e4:	4798      	blx	r3
   826e6:	b928      	cbnz	r0, 826f4 <UOTGHS_Handler+0xc8>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   826e8:	4b63      	ldr	r3, [pc, #396]	; (82878 <UOTGHS_Handler+0x24c>)
   826ea:	4798      	blx	r3
		udd_ack_setup_received(0);
   826ec:	2204      	movs	r2, #4
   826ee:	4b63      	ldr	r3, [pc, #396]	; (8287c <UOTGHS_Handler+0x250>)
   826f0:	601a      	str	r2, [r3, #0]
   826f2:	e292      	b.n	82c1a <UOTGHS_Handler+0x5ee>
		return;
	}
	udd_ack_setup_received(0);
   826f4:	2204      	movs	r2, #4
   826f6:	4b61      	ldr	r3, [pc, #388]	; (8287c <UOTGHS_Handler+0x250>)
   826f8:	601a      	str	r2, [r3, #0]

	if (Udd_setup_is_in()) {
   826fa:	4b65      	ldr	r3, [pc, #404]	; (82890 <UOTGHS_Handler+0x264>)
   826fc:	f993 3000 	ldrsb.w	r3, [r3]
   82700:	2b00      	cmp	r3, #0
   82702:	da0a      	bge.n	8271a <UOTGHS_Handler+0xee>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   82704:	2300      	movs	r3, #0
   82706:	4a63      	ldr	r2, [pc, #396]	; (82894 <UOTGHS_Handler+0x268>)
   82708:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8270a:	4a63      	ldr	r2, [pc, #396]	; (82898 <UOTGHS_Handler+0x26c>)
   8270c:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   8270e:	2202      	movs	r2, #2
   82710:	4b55      	ldr	r3, [pc, #340]	; (82868 <UOTGHS_Handler+0x23c>)
   82712:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   82714:	4b61      	ldr	r3, [pc, #388]	; (8289c <UOTGHS_Handler+0x270>)
   82716:	4798      	blx	r3
   82718:	e27f      	b.n	82c1a <UOTGHS_Handler+0x5ee>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   8271a:	4b5d      	ldr	r3, [pc, #372]	; (82890 <UOTGHS_Handler+0x264>)
   8271c:	88db      	ldrh	r3, [r3, #6]
   8271e:	b913      	cbnz	r3, 82726 <UOTGHS_Handler+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   82720:	4b5f      	ldr	r3, [pc, #380]	; (828a0 <UOTGHS_Handler+0x274>)
   82722:	4798      	blx	r3
   82724:	e279      	b.n	82c1a <UOTGHS_Handler+0x5ee>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   82726:	2200      	movs	r2, #0
   82728:	4b5a      	ldr	r3, [pc, #360]	; (82894 <UOTGHS_Handler+0x268>)
   8272a:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8272c:	4b5a      	ldr	r3, [pc, #360]	; (82898 <UOTGHS_Handler+0x26c>)
   8272e:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   82730:	2101      	movs	r1, #1
   82732:	4b4d      	ldr	r3, [pc, #308]	; (82868 <UOTGHS_Handler+0x23c>)
   82734:	7019      	strb	r1, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   82736:	2110      	movs	r1, #16
   82738:	4b50      	ldr	r3, [pc, #320]	; (8287c <UOTGHS_Handler+0x250>)
   8273a:	6019      	str	r1, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8273c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82740:	fab3 f383 	clz	r3, r3
   82744:	095b      	lsrs	r3, r3, #5
   82746:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   82748:	b672      	cpsid	i
   8274a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8274e:	4b42      	ldr	r3, [pc, #264]	; (82858 <UOTGHS_Handler+0x22c>)
   82750:	701a      	strb	r2, [r3, #0]
	return flags;
   82752:	9b01      	ldr	r3, [sp, #4]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   82754:	4a53      	ldr	r2, [pc, #332]	; (828a4 <UOTGHS_Handler+0x278>)
   82756:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82758:	2b00      	cmp	r3, #0
   8275a:	f000 825e 	beq.w	82c1a <UOTGHS_Handler+0x5ee>
		cpu_irq_enable();
   8275e:	2201      	movs	r2, #1
   82760:	4b3d      	ldr	r3, [pc, #244]	; (82858 <UOTGHS_Handler+0x22c>)
   82762:	701a      	strb	r2, [r3, #0]
   82764:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82768:	b662      	cpsie	i
   8276a:	e256      	b.n	82c1a <UOTGHS_Handler+0x5ee>
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   8276c:	4b41      	ldr	r3, [pc, #260]	; (82874 <UOTGHS_Handler+0x248>)
   8276e:	681b      	ldr	r3, [r3, #0]
   82770:	f013 0f01 	tst.w	r3, #1
   82774:	d007      	beq.n	82786 <UOTGHS_Handler+0x15a>
   82776:	4b4c      	ldr	r3, [pc, #304]	; (828a8 <UOTGHS_Handler+0x27c>)
   82778:	681b      	ldr	r3, [r3, #0]
   8277a:	f013 0f01 	tst.w	r3, #1
   8277e:	d002      	beq.n	82786 <UOTGHS_Handler+0x15a>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   82780:	4b46      	ldr	r3, [pc, #280]	; (8289c <UOTGHS_Handler+0x270>)
   82782:	4798      	blx	r3
   82784:	e249      	b.n	82c1a <UOTGHS_Handler+0x5ee>
		return true;
	}
	if (Is_udd_out_received(0)) {
   82786:	4b3b      	ldr	r3, [pc, #236]	; (82874 <UOTGHS_Handler+0x248>)
   82788:	681b      	ldr	r3, [r3, #0]
   8278a:	f013 0f02 	tst.w	r3, #2
   8278e:	f000 80b3 	beq.w	828f8 <UOTGHS_Handler+0x2cc>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   82792:	4b35      	ldr	r3, [pc, #212]	; (82868 <UOTGHS_Handler+0x23c>)
   82794:	781b      	ldrb	r3, [r3, #0]
   82796:	2b01      	cmp	r3, #1
   82798:	d00b      	beq.n	827b2 <UOTGHS_Handler+0x186>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   8279a:	2b02      	cmp	r3, #2
   8279c:	d001      	beq.n	827a2 <UOTGHS_Handler+0x176>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   8279e:	2b04      	cmp	r3, #4
   827a0:	d102      	bne.n	827a8 <UOTGHS_Handler+0x17c>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   827a2:	4b32      	ldr	r3, [pc, #200]	; (8286c <UOTGHS_Handler+0x240>)
   827a4:	4798      	blx	r3
   827a6:	e001      	b.n	827ac <UOTGHS_Handler+0x180>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   827a8:	4b33      	ldr	r3, [pc, #204]	; (82878 <UOTGHS_Handler+0x24c>)
   827aa:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   827ac:	4b30      	ldr	r3, [pc, #192]	; (82870 <UOTGHS_Handler+0x244>)
   827ae:	4798      	blx	r3
   827b0:	e233      	b.n	82c1a <UOTGHS_Handler+0x5ee>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   827b2:	4b30      	ldr	r3, [pc, #192]	; (82874 <UOTGHS_Handler+0x248>)
   827b4:	6818      	ldr	r0, [r3, #0]
   827b6:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   827ba:	4b35      	ldr	r3, [pc, #212]	; (82890 <UOTGHS_Handler+0x264>)
   827bc:	899b      	ldrh	r3, [r3, #12]
   827be:	4a36      	ldr	r2, [pc, #216]	; (82898 <UOTGHS_Handler+0x26c>)
   827c0:	8814      	ldrh	r4, [r2, #0]
   827c2:	1822      	adds	r2, r4, r0
   827c4:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   827c6:	bfae      	itee	ge
   827c8:	b280      	uxthge	r0, r0
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   827ca:	1b1b      	sublt	r3, r3, r4
   827cc:	b298      	uxthlt	r0, r3
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   827ce:	4b30      	ldr	r3, [pc, #192]	; (82890 <UOTGHS_Handler+0x264>)
   827d0:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
   827d2:	b1b0      	cbz	r0, 82802 <UOTGHS_Handler+0x1d6>
   827d4:	1e63      	subs	r3, r4, #1
   827d6:	441a      	add	r2, r3
   827d8:	4b2a      	ldr	r3, [pc, #168]	; (82884 <UOTGHS_Handler+0x258>)
		*ptr_dest++ = *ptr_src++;
   827da:	f813 1b01 	ldrb.w	r1, [r3], #1
   827de:	f802 1f01 	strb.w	r1, [r2, #1]!
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   827e2:	b2d9      	uxtb	r1, r3
   827e4:	4281      	cmp	r1, r0
   827e6:	d3f8      	bcc.n	827da <UOTGHS_Handler+0x1ae>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   827e8:	4404      	add	r4, r0
   827ea:	b2a4      	uxth	r4, r4
   827ec:	4b2a      	ldr	r3, [pc, #168]	; (82898 <UOTGHS_Handler+0x26c>)
   827ee:	801c      	strh	r4, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   827f0:	2840      	cmp	r0, #64	; 0x40
   827f2:	d106      	bne.n	82802 <UOTGHS_Handler+0x1d6>
			|| (udd_g_ctrlreq.req.wLength <=
   827f4:	4b26      	ldr	r3, [pc, #152]	; (82890 <UOTGHS_Handler+0x264>)
   827f6:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   827f8:	4b26      	ldr	r3, [pc, #152]	; (82894 <UOTGHS_Handler+0x268>)
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   827fa:	881b      	ldrh	r3, [r3, #0]
   827fc:	4423      	add	r3, r4
   827fe:	429a      	cmp	r2, r3
   82800:	dc11      	bgt.n	82826 <UOTGHS_Handler+0x1fa>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   82802:	4b23      	ldr	r3, [pc, #140]	; (82890 <UOTGHS_Handler+0x264>)
   82804:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   82806:	695b      	ldr	r3, [r3, #20]
   82808:	b13b      	cbz	r3, 8281a <UOTGHS_Handler+0x1ee>
			if (!udd_g_ctrlreq.over_under_run()) {
   8280a:	4798      	blx	r3
   8280c:	b928      	cbnz	r0, 8281a <UOTGHS_Handler+0x1ee>
				// Stall ZLP
				udd_ctrl_stall_data();
   8280e:	4b1a      	ldr	r3, [pc, #104]	; (82878 <UOTGHS_Handler+0x24c>)
   82810:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   82812:	2202      	movs	r2, #2
   82814:	4b19      	ldr	r3, [pc, #100]	; (8287c <UOTGHS_Handler+0x250>)
   82816:	601a      	str	r2, [r3, #0]
   82818:	e1ff      	b.n	82c1a <UOTGHS_Handler+0x5ee>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   8281a:	2202      	movs	r2, #2
   8281c:	4b17      	ldr	r3, [pc, #92]	; (8287c <UOTGHS_Handler+0x250>)
   8281e:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
   82820:	4b1f      	ldr	r3, [pc, #124]	; (828a0 <UOTGHS_Handler+0x274>)
   82822:	4798      	blx	r3
   82824:	e1f9      	b.n	82c1a <UOTGHS_Handler+0x5ee>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   82826:	4b1a      	ldr	r3, [pc, #104]	; (82890 <UOTGHS_Handler+0x264>)
   82828:	899b      	ldrh	r3, [r3, #12]
   8282a:	42a3      	cmp	r3, r4
   8282c:	d146      	bne.n	828bc <UOTGHS_Handler+0x290>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   8282e:	4b18      	ldr	r3, [pc, #96]	; (82890 <UOTGHS_Handler+0x264>)
   82830:	695b      	ldr	r3, [r3, #20]
   82832:	b92b      	cbnz	r3, 82840 <UOTGHS_Handler+0x214>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   82834:	4b10      	ldr	r3, [pc, #64]	; (82878 <UOTGHS_Handler+0x24c>)
   82836:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   82838:	2202      	movs	r2, #2
   8283a:	4b10      	ldr	r3, [pc, #64]	; (8287c <UOTGHS_Handler+0x250>)
   8283c:	601a      	str	r2, [r3, #0]
   8283e:	e1ec      	b.n	82c1a <UOTGHS_Handler+0x5ee>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   82840:	4798      	blx	r3
   82842:	bb98      	cbnz	r0, 828ac <UOTGHS_Handler+0x280>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   82844:	4b0c      	ldr	r3, [pc, #48]	; (82878 <UOTGHS_Handler+0x24c>)
   82846:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   82848:	2202      	movs	r2, #2
   8284a:	4b0c      	ldr	r3, [pc, #48]	; (8287c <UOTGHS_Handler+0x250>)
   8284c:	601a      	str	r2, [r3, #0]
   8284e:	e1e4      	b.n	82c1a <UOTGHS_Handler+0x5ee>
   82850:	00083835 	.word	0x00083835
   82854:	400ac000 	.word	0x400ac000
   82858:	20070277 	.word	0x20070277
   8285c:	00081891 	.word	0x00081891
   82860:	00083b1d 	.word	0x00083b1d
   82864:	400ac220 	.word	0x400ac220
   82868:	20071418 	.word	0x20071418
   8286c:	00081fc9 	.word	0x00081fc9
   82870:	00081f01 	.word	0x00081f01
   82874:	400ac130 	.word	0x400ac130
   82878:	00081f5d 	.word	0x00081f5d
   8287c:	400ac160 	.word	0x400ac160
   82880:	20071683 	.word	0x20071683
   82884:	20180000 	.word	0x20180000
   82888:	20180008 	.word	0x20180008
   8288c:	000818cd 	.word	0x000818cd
   82890:	20071684 	.word	0x20071684
   82894:	200713ca 	.word	0x200713ca
   82898:	2007141a 	.word	0x2007141a
   8289c:	00081fd9 	.word	0x00081fd9
   828a0:	00081f75 	.word	0x00081f75
   828a4:	400ac1f0 	.word	0x400ac1f0
   828a8:	400ac1c0 	.word	0x400ac1c0
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   828ac:	49a7      	ldr	r1, [pc, #668]	; (82b4c <UOTGHS_Handler+0x520>)
   828ae:	4aa8      	ldr	r2, [pc, #672]	; (82b50 <UOTGHS_Handler+0x524>)
   828b0:	8808      	ldrh	r0, [r1, #0]
   828b2:	8813      	ldrh	r3, [r2, #0]
   828b4:	4403      	add	r3, r0
   828b6:	800b      	strh	r3, [r1, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   828b8:	2300      	movs	r3, #0
   828ba:	8013      	strh	r3, [r2, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   828bc:	4ba5      	ldr	r3, [pc, #660]	; (82b54 <UOTGHS_Handler+0x528>)
   828be:	2202      	movs	r2, #2
   828c0:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   828c2:	2210      	movs	r2, #16
   828c4:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   828c6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   828ca:	fab3 f383 	clz	r3, r3
   828ce:	095b      	lsrs	r3, r3, #5
   828d0:	9302      	str	r3, [sp, #8]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   828d2:	b672      	cpsid	i
   828d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   828d8:	2100      	movs	r1, #0
   828da:	4b9f      	ldr	r3, [pc, #636]	; (82b58 <UOTGHS_Handler+0x52c>)
   828dc:	7019      	strb	r1, [r3, #0]
	return flags;
   828de:	9b02      	ldr	r3, [sp, #8]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   828e0:	499e      	ldr	r1, [pc, #632]	; (82b5c <UOTGHS_Handler+0x530>)
   828e2:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   828e4:	2b00      	cmp	r3, #0
   828e6:	f000 8198 	beq.w	82c1a <UOTGHS_Handler+0x5ee>
		cpu_irq_enable();
   828ea:	2201      	movs	r2, #1
   828ec:	4b9a      	ldr	r3, [pc, #616]	; (82b58 <UOTGHS_Handler+0x52c>)
   828ee:	701a      	strb	r2, [r3, #0]
   828f0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   828f4:	b662      	cpsie	i
   828f6:	e190      	b.n	82c1a <UOTGHS_Handler+0x5ee>
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   828f8:	4b99      	ldr	r3, [pc, #612]	; (82b60 <UOTGHS_Handler+0x534>)
   828fa:	681b      	ldr	r3, [r3, #0]
   828fc:	f013 0f08 	tst.w	r3, #8
   82900:	d012      	beq.n	82928 <UOTGHS_Handler+0x2fc>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   82902:	2208      	movs	r2, #8
   82904:	4b93      	ldr	r3, [pc, #588]	; (82b54 <UOTGHS_Handler+0x528>)
   82906:	601a      	str	r2, [r3, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   82908:	3b30      	subs	r3, #48	; 0x30
   8290a:	681b      	ldr	r3, [r3, #0]
   8290c:	f013 0f01 	tst.w	r3, #1
   82910:	f040 8183 	bne.w	82c1a <UOTGHS_Handler+0x5ee>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82914:	4b93      	ldr	r3, [pc, #588]	; (82b64 <UOTGHS_Handler+0x538>)
   82916:	781b      	ldrb	r3, [r3, #0]
   82918:	2b03      	cmp	r3, #3
   8291a:	f040 817e 	bne.w	82c1a <UOTGHS_Handler+0x5ee>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   8291e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82922:	4b8e      	ldr	r3, [pc, #568]	; (82b5c <UOTGHS_Handler+0x530>)
   82924:	601a      	str	r2, [r3, #0]
   82926:	e178      	b.n	82c1a <UOTGHS_Handler+0x5ee>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   82928:	4b8d      	ldr	r3, [pc, #564]	; (82b60 <UOTGHS_Handler+0x534>)
   8292a:	681b      	ldr	r3, [r3, #0]
   8292c:	f013 0f10 	tst.w	r3, #16
   82930:	f000 8164 	beq.w	82bfc <UOTGHS_Handler+0x5d0>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   82934:	2210      	movs	r2, #16
   82936:	4b87      	ldr	r3, [pc, #540]	; (82b54 <UOTGHS_Handler+0x528>)
   82938:	601a      	str	r2, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   8293a:	3b30      	subs	r3, #48	; 0x30
   8293c:	681b      	ldr	r3, [r3, #0]
   8293e:	f013 0f02 	tst.w	r3, #2
   82942:	f040 816a 	bne.w	82c1a <UOTGHS_Handler+0x5ee>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   82946:	4b87      	ldr	r3, [pc, #540]	; (82b64 <UOTGHS_Handler+0x538>)
   82948:	781b      	ldrb	r3, [r3, #0]
   8294a:	2b01      	cmp	r3, #1
   8294c:	d102      	bne.n	82954 <UOTGHS_Handler+0x328>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   8294e:	4b86      	ldr	r3, [pc, #536]	; (82b68 <UOTGHS_Handler+0x53c>)
   82950:	4798      	blx	r3
   82952:	e162      	b.n	82c1a <UOTGHS_Handler+0x5ee>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   82954:	2b04      	cmp	r3, #4
   82956:	f040 8160 	bne.w	82c1a <UOTGHS_Handler+0x5ee>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   8295a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8295e:	4b7f      	ldr	r3, [pc, #508]	; (82b5c <UOTGHS_Handler+0x530>)
   82960:	601a      	str	r2, [r3, #0]
   82962:	e15a      	b.n	82c1a <UOTGHS_Handler+0x5ee>
   82964:	b2da      	uxtb	r2, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   82966:	461d      	mov	r5, r3
   82968:	f103 3eff 	add.w	lr, r3, #4294967295

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8296c:	693c      	ldr	r4, [r7, #16]
   8296e:	fa0c f10e 	lsl.w	r1, ip, lr
   82972:	420c      	tst	r4, r1
   82974:	d01e      	beq.n	829b4 <UOTGHS_Handler+0x388>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   82976:	6878      	ldr	r0, [r7, #4]
   82978:	4201      	tst	r1, r0
   8297a:	d01b      	beq.n	829b4 <UOTGHS_Handler+0x388>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   8297c:	487b      	ldr	r0, [pc, #492]	; (82b6c <UOTGHS_Handler+0x540>)
   8297e:	eb00 1302 	add.w	r3, r0, r2, lsl #4
   82982:	68d8      	ldr	r0, [r3, #12]
   82984:	f010 0f01 	tst.w	r0, #1
   82988:	f040 8147 	bne.w	82c1a <UOTGHS_Handler+0x5ee>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   8298c:	4878      	ldr	r0, [pc, #480]	; (82b70 <UOTGHS_Handler+0x544>)
   8298e:	6141      	str	r1, [r0, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   82990:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   82992:	0c18      	lsrs	r0, r3, #16
   82994:	d00a      	beq.n	829ac <UOTGHS_Handler+0x380>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   82996:	4977      	ldr	r1, [pc, #476]	; (82b74 <UOTGHS_Handler+0x548>)
   82998:	ea4f 044e 	mov.w	r4, lr, lsl #1
   8299c:	eb04 050e 	add.w	r5, r4, lr
   829a0:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
   829a4:	68eb      	ldr	r3, [r5, #12]
   829a6:	1a18      	subs	r0, r3, r0
   829a8:	60e8      	str	r0, [r5, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   829aa:	60a8      	str	r0, [r5, #8]
			}
			udd_ep_trans_done(ep);
   829ac:	4610      	mov	r0, r2
   829ae:	4b72      	ldr	r3, [pc, #456]	; (82b78 <UOTGHS_Handler+0x54c>)
   829b0:	4798      	blx	r3
   829b2:	e132      	b.n	82c1a <UOTGHS_Handler+0x5ee>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   829b4:	6939      	ldr	r1, [r7, #16]
   829b6:	fa08 f505 	lsl.w	r5, r8, r5
   829ba:	4229      	tst	r1, r5
   829bc:	d041      	beq.n	82a42 <UOTGHS_Handler+0x416>
   829be:	009c      	lsls	r4, r3, #2
   829c0:	f106 0090 	add.w	r0, r6, #144	; 0x90
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   829c4:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
   829c8:	f011 0f01 	tst.w	r1, #1
   829cc:	d014      	beq.n	829f8 <UOTGHS_Handler+0x3cc>
					&& Is_udd_in_send(ep)) {
   829ce:	6831      	ldr	r1, [r6, #0]
   829d0:	f011 0f01 	tst.w	r1, #1
   829d4:	d010      	beq.n	829f8 <UOTGHS_Handler+0x3cc>
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   829d6:	4b69      	ldr	r3, [pc, #420]	; (82b7c <UOTGHS_Handler+0x550>)
   829d8:	2101      	movs	r1, #1
   829da:	50e1      	str	r1, [r4, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   829dc:	485d      	ldr	r0, [pc, #372]	; (82b54 <UOTGHS_Handler+0x528>)
   829de:	5021      	str	r1, [r4, r0]
				udd_ack_fifocon(ep);
   829e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   829e4:	50e1      	str	r1, [r4, r3]
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   829e6:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
   829ea:	2100      	movs	r1, #0
   829ec:	4861      	ldr	r0, [pc, #388]	; (82b74 <UOTGHS_Handler+0x548>)
   829ee:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   829f2:	4b63      	ldr	r3, [pc, #396]	; (82b80 <UOTGHS_Handler+0x554>)
   829f4:	4798      	blx	r3
   829f6:	e110      	b.n	82c1a <UOTGHS_Handler+0x5ee>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   829f8:	6802      	ldr	r2, [r0, #0]
   829fa:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   829fe:	d020      	beq.n	82a42 <UOTGHS_Handler+0x416>
					&& (0 == udd_nb_busy_bank(ep))) {
   82a00:	6832      	ldr	r2, [r6, #0]
   82a02:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   82a06:	d11c      	bne.n	82a42 <UOTGHS_Handler+0x416>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   82a08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82a0c:	4b5b      	ldr	r3, [pc, #364]	; (82b7c <UOTGHS_Handler+0x550>)
   82a0e:	50e2      	str	r2, [r4, r3]
				udd_disable_endpoint_interrupt(ep);
   82a10:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
   82a14:	615d      	str	r5, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   82a16:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   82a1a:	4a56      	ldr	r2, [pc, #344]	; (82b74 <UOTGHS_Handler+0x548>)
   82a1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   82a20:	7d1a      	ldrb	r2, [r3, #20]
   82a22:	f36f 0282 	bfc	r2, #2, #1
   82a26:	751a      	strb	r2, [r3, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   82a28:	4a56      	ldr	r2, [pc, #344]	; (82b84 <UOTGHS_Handler+0x558>)
   82a2a:	58a3      	ldr	r3, [r4, r2]
   82a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   82a30:	50a3      	str	r3, [r4, r2]
				udd_enable_stall_handshake(ep);
   82a32:	4b4a      	ldr	r3, [pc, #296]	; (82b5c <UOTGHS_Handler+0x530>)
   82a34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82a38:	50e2      	str	r2, [r4, r3]
				udd_reset_data_toggle(ep);
   82a3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   82a3e:	50e2      	str	r2, [r4, r3]
   82a40:	e0eb      	b.n	82c1a <UOTGHS_Handler+0x5ee>
   82a42:	3301      	adds	r3, #1
   82a44:	3604      	adds	r6, #4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   82a46:	2b04      	cmp	r3, #4
   82a48:	d18c      	bne.n	82964 <UOTGHS_Handler+0x338>
   82a4a:	e0df      	b.n	82c0c <UOTGHS_Handler+0x5e0>
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
   82a4c:	2208      	movs	r2, #8
   82a4e:	4b48      	ldr	r3, [pc, #288]	; (82b70 <UOTGHS_Handler+0x544>)
   82a50:	609a      	str	r2, [r3, #8]
   82a52:	4d48      	ldr	r5, [pc, #288]	; (82b74 <UOTGHS_Handler+0x548>)
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   82a54:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   82a56:	2701      	movs	r7, #1
   82a58:	4e49      	ldr	r6, [pc, #292]	; (82b80 <UOTGHS_Handler+0x554>)
   82a5a:	3401      	adds	r4, #1
   82a5c:	b2e4      	uxtb	r4, r4
   82a5e:	4622      	mov	r2, r4
   82a60:	4639      	mov	r1, r7
   82a62:	4628      	mov	r0, r5
   82a64:	47b0      	blx	r6
   82a66:	3518      	adds	r5, #24
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   82a68:	2c03      	cmp	r4, #3
   82a6a:	d1f6      	bne.n	82a5a <UOTGHS_Handler+0x42e>
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   82a6c:	4b46      	ldr	r3, [pc, #280]	; (82b88 <UOTGHS_Handler+0x55c>)
   82a6e:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   82a70:	4b3f      	ldr	r3, [pc, #252]	; (82b70 <UOTGHS_Handler+0x544>)
   82a72:	681a      	ldr	r2, [r3, #0]
   82a74:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82a78:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   82a7a:	681a      	ldr	r2, [r3, #0]
   82a7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82a80:	601a      	str	r2, [r3, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   82a82:	4940      	ldr	r1, [pc, #256]	; (82b84 <UOTGHS_Handler+0x558>)
   82a84:	680a      	ldr	r2, [r1, #0]
   82a86:	f422 52cb 	bic.w	r2, r2, #6496	; 0x1960
   82a8a:	f022 021c 	bic.w	r2, r2, #28
   82a8e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   82a92:	600a      	str	r2, [r1, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   82a94:	680a      	ldr	r2, [r1, #0]
   82a96:	f042 0202 	orr.w	r2, r2, #2
   82a9a:	600a      	str	r2, [r1, #0]
	udd_enable_endpoint(0);
   82a9c:	69da      	ldr	r2, [r3, #28]
   82a9e:	f042 0201 	orr.w	r2, r2, #1
   82aa2:	61da      	str	r2, [r3, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82aa4:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82aa8:	fab2 f282 	clz	r2, r2
   82aac:	0952      	lsrs	r2, r2, #5
   82aae:	9203      	str	r2, [sp, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   82ab0:	b672      	cpsid	i
   82ab2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82ab6:	2100      	movs	r1, #0
   82ab8:	4a27      	ldr	r2, [pc, #156]	; (82b58 <UOTGHS_Handler+0x52c>)
   82aba:	7011      	strb	r1, [r2, #0]
	return flags;
   82abc:	9903      	ldr	r1, [sp, #12]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   82abe:	4a27      	ldr	r2, [pc, #156]	; (82b5c <UOTGHS_Handler+0x530>)
   82ac0:	2004      	movs	r0, #4
   82ac2:	6010      	str	r0, [r2, #0]
	udd_enable_out_received_interrupt(0);
   82ac4:	2002      	movs	r0, #2
   82ac6:	6010      	str	r0, [r2, #0]
	udd_enable_endpoint_interrupt(0);
   82ac8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82acc:	619a      	str	r2, [r3, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82ace:	b129      	cbz	r1, 82adc <UOTGHS_Handler+0x4b0>
		cpu_irq_enable();
   82ad0:	2201      	movs	r2, #1
   82ad2:	4b21      	ldr	r3, [pc, #132]	; (82b58 <UOTGHS_Handler+0x52c>)
   82ad4:	701a      	strb	r2, [r3, #0]
   82ad6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82ada:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   82adc:	4b2b      	ldr	r3, [pc, #172]	; (82b8c <UOTGHS_Handler+0x560>)
   82ade:	4798      	blx	r3
		goto udd_interrupt_end;
   82ae0:	e09b      	b.n	82c1a <UOTGHS_Handler+0x5ee>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   82ae2:	4b23      	ldr	r3, [pc, #140]	; (82b70 <UOTGHS_Handler+0x544>)
   82ae4:	691b      	ldr	r3, [r3, #16]
   82ae6:	f013 0f01 	tst.w	r3, #1
   82aea:	d01b      	beq.n	82b24 <UOTGHS_Handler+0x4f8>
   82aec:	4b20      	ldr	r3, [pc, #128]	; (82b70 <UOTGHS_Handler+0x544>)
   82aee:	685b      	ldr	r3, [r3, #4]
   82af0:	f013 0f01 	tst.w	r3, #1
   82af4:	d016      	beq.n	82b24 <UOTGHS_Handler+0x4f8>
		otg_unfreeze_clock();
   82af6:	4b1e      	ldr	r3, [pc, #120]	; (82b70 <UOTGHS_Handler+0x544>)
   82af8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82afc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   82b00:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   82b04:	2201      	movs	r2, #1
   82b06:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
   82b08:	2210      	movs	r2, #16
   82b0a:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   82b0c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   82b14:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   82b18:	2000      	movs	r0, #0
   82b1a:	4b1d      	ldr	r3, [pc, #116]	; (82b90 <UOTGHS_Handler+0x564>)
   82b1c:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   82b1e:	4b1d      	ldr	r3, [pc, #116]	; (82b94 <UOTGHS_Handler+0x568>)
   82b20:	4798      	blx	r3
#endif
		goto udd_interrupt_end;
   82b22:	e07a      	b.n	82c1a <UOTGHS_Handler+0x5ee>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   82b24:	4b12      	ldr	r3, [pc, #72]	; (82b70 <UOTGHS_Handler+0x544>)
   82b26:	691b      	ldr	r3, [r3, #16]
   82b28:	f013 0f10 	tst.w	r3, #16
   82b2c:	d047      	beq.n	82bbe <UOTGHS_Handler+0x592>
   82b2e:	4b10      	ldr	r3, [pc, #64]	; (82b70 <UOTGHS_Handler+0x544>)
   82b30:	685b      	ldr	r3, [r3, #4]
   82b32:	f013 0f10 	tst.w	r3, #16
   82b36:	d042      	beq.n	82bbe <UOTGHS_Handler+0x592>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   82b38:	4a0d      	ldr	r2, [pc, #52]	; (82b70 <UOTGHS_Handler+0x544>)
   82b3a:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   82b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   82b42:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   82b46:	4613      	mov	r3, r2
   82b48:	e02a      	b.n	82ba0 <UOTGHS_Handler+0x574>
   82b4a:	bf00      	nop
   82b4c:	200713ca 	.word	0x200713ca
   82b50:	2007141a 	.word	0x2007141a
   82b54:	400ac160 	.word	0x400ac160
   82b58:	20070277 	.word	0x20070277
   82b5c:	400ac1f0 	.word	0x400ac1f0
   82b60:	400ac130 	.word	0x400ac130
   82b64:	20071418 	.word	0x20071418
   82b68:	00081f75 	.word	0x00081f75
   82b6c:	400ac300 	.word	0x400ac300
   82b70:	400ac000 	.word	0x400ac000
   82b74:	200713d0 	.word	0x200713d0
   82b78:	0008218d 	.word	0x0008218d
   82b7c:	400ac220 	.word	0x400ac220
   82b80:	00082155 	.word	0x00082155
   82b84:	400ac100 	.word	0x400ac100
   82b88:	00081849 	.word	0x00081849
   82b8c:	00081f01 	.word	0x00081f01
   82b90:	00082331 	.word	0x00082331
   82b94:	00083b25 	.word	0x00083b25
			if (Is_udd_suspend()) {
   82b98:	685a      	ldr	r2, [r3, #4]
   82b9a:	f012 0f01 	tst.w	r2, #1
   82b9e:	d104      	bne.n	82baa <UOTGHS_Handler+0x57e>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   82ba0:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   82ba4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   82ba8:	d0f6      	beq.n	82b98 <UOTGHS_Handler+0x56c>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   82baa:	4b1d      	ldr	r3, [pc, #116]	; (82c20 <UOTGHS_Handler+0x5f4>)
   82bac:	2210      	movs	r2, #16
   82bae:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
   82bb0:	2001      	movs	r0, #1
   82bb2:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   82bb4:	4b1b      	ldr	r3, [pc, #108]	; (82c24 <UOTGHS_Handler+0x5f8>)
   82bb6:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   82bb8:	4b1b      	ldr	r3, [pc, #108]	; (82c28 <UOTGHS_Handler+0x5fc>)
   82bba:	4798      	blx	r3
#endif
		goto udd_interrupt_end;
   82bbc:	e02d      	b.n	82c1a <UOTGHS_Handler+0x5ee>
	}

	if (Is_otg_vbus_transition()) {
   82bbe:	4b18      	ldr	r3, [pc, #96]	; (82c20 <UOTGHS_Handler+0x5f4>)
   82bc0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   82bc4:	f013 0f02 	tst.w	r3, #2
   82bc8:	d027      	beq.n	82c1a <UOTGHS_Handler+0x5ee>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   82bca:	4b15      	ldr	r3, [pc, #84]	; (82c20 <UOTGHS_Handler+0x5f4>)
   82bcc:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82bd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   82bd4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   82bd8:	2202      	movs	r2, #2
   82bda:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
		otg_freeze_clock();
   82bde:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   82be6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   82bea:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   82bee:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   82bf2:	bf14      	ite	ne
   82bf4:	4b0d      	ldrne	r3, [pc, #52]	; (82c2c <UOTGHS_Handler+0x600>)
		} else {
			udd_detach();
   82bf6:	4b0e      	ldreq	r3, [pc, #56]	; (82c30 <UOTGHS_Handler+0x604>)
   82bf8:	4798      	blx	r3
   82bfa:	e00e      	b.n	82c1a <UOTGHS_Handler+0x5ee>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   82bfc:	4e0d      	ldr	r6, [pc, #52]	; (82c34 <UOTGHS_Handler+0x608>)
   82bfe:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   82c00:	4f07      	ldr	r7, [pc, #28]	; (82c20 <UOTGHS_Handler+0x5f4>)
   82c02:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   82c06:	f44f 5880 	mov.w	r8, #4096	; 0x1000
   82c0a:	e6ab      	b.n	82964 <UOTGHS_Handler+0x338>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   82c0c:	4b04      	ldr	r3, [pc, #16]	; (82c20 <UOTGHS_Handler+0x5f4>)
   82c0e:	685b      	ldr	r3, [r3, #4]
   82c10:	f013 0f08 	tst.w	r3, #8
   82c14:	f43f af65 	beq.w	82ae2 <UOTGHS_Handler+0x4b6>
   82c18:	e718      	b.n	82a4c <UOTGHS_Handler+0x420>
	}
udd_interrupt_end:
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
}
   82c1a:	b004      	add	sp, #16
   82c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c20:	400ac000 	.word	0x400ac000
   82c24:	00082331 	.word	0x00082331
   82c28:	00083b29 	.word	0x00083b29
   82c2c:	0008256d 	.word	0x0008256d
   82c30:	000825f9 	.word	0x000825f9
   82c34:	400ac134 	.word	0x400ac134

00082c38 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   82c38:	4b03      	ldr	r3, [pc, #12]	; (82c48 <udd_is_high_speed+0x10>)
   82c3a:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
#else
	return false;
#endif
}
   82c3e:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   82c42:	bf18      	it	ne
   82c44:	2001      	movne	r0, #1
   82c46:	4770      	bx	lr
   82c48:	400ac000 	.word	0x400ac000

00082c4c <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   82c4c:	4b08      	ldr	r3, [pc, #32]	; (82c70 <udd_set_address+0x24>)
   82c4e:	681a      	ldr	r2, [r3, #0]
   82c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   82c54:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   82c56:	681a      	ldr	r2, [r3, #0]
   82c58:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82c5c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82c60:	4310      	orrs	r0, r2
   82c62:	6018      	str	r0, [r3, #0]
	udd_enable_address();
   82c64:	681a      	ldr	r2, [r3, #0]
   82c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82c6a:	601a      	str	r2, [r3, #0]
   82c6c:	4770      	bx	lr
   82c6e:	bf00      	nop
   82c70:	400ac000 	.word	0x400ac000

00082c74 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   82c74:	4b02      	ldr	r3, [pc, #8]	; (82c80 <udd_getaddress+0xc>)
   82c76:	6818      	ldr	r0, [r3, #0]
}
   82c78:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82c7c:	4770      	bx	lr
   82c7e:	bf00      	nop
   82c80:	400ac000 	.word	0x400ac000

00082c84 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   82c84:	4b02      	ldr	r3, [pc, #8]	; (82c90 <udd_get_frame_number+0xc>)
   82c86:	6a18      	ldr	r0, [r3, #32]
}
   82c88:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   82c8c:	4770      	bx	lr
   82c8e:	bf00      	nop
   82c90:	400ac000 	.word	0x400ac000

00082c94 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   82c94:	4b02      	ldr	r3, [pc, #8]	; (82ca0 <udd_get_micro_frame_number+0xc>)
   82c96:	6a18      	ldr	r0, [r3, #32]
}
   82c98:	f3c0 000d 	ubfx	r0, r0, #0, #14
   82c9c:	4770      	bx	lr
   82c9e:	bf00      	nop
   82ca0:	400ac000 	.word	0x400ac000

00082ca4 <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   82ca4:	4b01      	ldr	r3, [pc, #4]	; (82cac <udd_set_setup_payload+0x8>)
   82ca6:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   82ca8:	8199      	strh	r1, [r3, #12]
   82caa:	4770      	bx	lr
   82cac:	20071684 	.word	0x20071684

00082cb0 <udd_ep_free>:
}


void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82cb0:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   82cb4:	2a03      	cmp	r2, #3
   82cb6:	d821      	bhi.n	82cfc <udd_ep_free+0x4c>
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   82cb8:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return;
	}
	udd_disable_endpoint(ep_index);
   82cba:	4811      	ldr	r0, [pc, #68]	; (82d00 <udd_ep_free+0x50>)
   82cbc:	69c3      	ldr	r3, [r0, #28]
   82cbe:	2101      	movs	r1, #1
   82cc0:	fa01 f402 	lsl.w	r4, r1, r2
   82cc4:	ea23 0304 	bic.w	r3, r3, r4
   82cc8:	61c3      	str	r3, [r0, #28]
	udd_unallocate_memory(ep_index);
   82cca:	f500 7080 	add.w	r0, r0, #256	; 0x100
   82cce:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   82cd2:	f023 0302 	bic.w	r3, r3, #2
   82cd6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82cda:	1e55      	subs	r5, r2, #1
   82cdc:	4c09      	ldr	r4, [pc, #36]	; (82d04 <udd_ep_free+0x54>)
   82cde:	fa05 f601 	lsl.w	r6, r5, r1
   82ce2:	1970      	adds	r0, r6, r5
   82ce4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   82ce8:	4b07      	ldr	r3, [pc, #28]	; (82d08 <udd_ep_free+0x58>)
   82cea:	4798      	blx	r3
		return;
	}
	udd_disable_endpoint(ep_index);
	udd_unallocate_memory(ep_index);
	udd_ep_abort_job(ep);
	udd_ep_job[ep_index - 1].stall_requested = false;
   82cec:	4435      	add	r5, r6
   82cee:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   82cf2:	7d23      	ldrb	r3, [r4, #20]
   82cf4:	f36f 0382 	bfc	r3, #2, #1
   82cf8:	7523      	strb	r3, [r4, #20]
   82cfa:	bd70      	pop	{r4, r5, r6, pc}
   82cfc:	4770      	bx	lr
   82cfe:	bf00      	nop
   82d00:	400ac000 	.word	0x400ac000
   82d04:	200713d0 	.word	0x200713d0
   82d08:	00082155 	.word	0x00082155

00082d0c <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   82d0c:	f000 000f 	and.w	r0, r0, #15
   82d10:	4b02      	ldr	r3, [pc, #8]	; (82d1c <udd_ep_is_halted+0x10>)
   82d12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   82d16:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   82d1a:	4770      	bx	lr
   82d1c:	400ac1c0 	.word	0x400ac1c0

00082d20 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82d20:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   82d24:	2b03      	cmp	r3, #3
   82d26:	d85c      	bhi.n	82de2 <udd_ep_set_halt+0xc2>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   82d28:	4a35      	ldr	r2, [pc, #212]	; (82e00 <udd_ep_set_halt+0xe0>)
   82d2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82d2e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
   82d32:	d158      	bne.n	82de6 <udd_ep_set_halt+0xc6>
	return Is_udd_endpoint_stall_requested(ep_index);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   82d34:	b410      	push	{r4}
   82d36:	b083      	sub	sp, #12
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   82d38:	1e59      	subs	r1, r3, #1
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   82d3a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   82d3e:	4a31      	ldr	r2, [pc, #196]	; (82e04 <udd_ep_set_halt+0xe4>)
   82d40:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   82d44:	7d12      	ldrb	r2, [r2, #20]
   82d46:	f012 0f04 	tst.w	r2, #4
   82d4a:	d14e      	bne.n	82dea <udd_ep_set_halt+0xca>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   82d4c:	f012 0f01 	tst.w	r2, #1
   82d50:	d14d      	bne.n	82dee <udd_ep_set_halt+0xce>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82d52:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82d56:	fab2 f282 	clz	r2, r2
   82d5a:	0952      	lsrs	r2, r2, #5
   82d5c:	9201      	str	r2, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   82d5e:	b672      	cpsid	i
   82d60:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82d64:	2400      	movs	r4, #0
   82d66:	4a28      	ldr	r2, [pc, #160]	; (82e08 <udd_ep_set_halt+0xe8>)
   82d68:	7014      	strb	r4, [r2, #0]
	return flags;
   82d6a:	9c01      	ldr	r4, [sp, #4]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   82d6c:	f010 0f80 	tst.w	r0, #128	; 0x80
   82d70:	d01f      	beq.n	82db2 <udd_ep_set_halt+0x92>
   82d72:	4a26      	ldr	r2, [pc, #152]	; (82e0c <udd_ep_set_halt+0xec>)
   82d74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82d78:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   82d7c:	d019      	beq.n	82db2 <udd_ep_set_halt+0x92>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   82d7e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   82d82:	4a20      	ldr	r2, [pc, #128]	; (82e04 <udd_ep_set_halt+0xe4>)
   82d84:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   82d88:	7d0a      	ldrb	r2, [r1, #20]
   82d8a:	f042 0204 	orr.w	r2, r2, #4
   82d8e:	750a      	strb	r2, [r1, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   82d90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82d94:	491e      	ldr	r1, [pc, #120]	; (82e10 <udd_ep_set_halt+0xf0>)
   82d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   82d9a:	fa02 f303 	lsl.w	r3, r2, r3
   82d9e:	4a1d      	ldr	r2, [pc, #116]	; (82e14 <udd_ep_set_halt+0xf4>)
   82da0:	6193      	str	r3, [r2, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82da2:	b334      	cbz	r4, 82df2 <udd_ep_set_halt+0xd2>
		cpu_irq_enable();
   82da4:	2001      	movs	r0, #1
   82da6:	4b18      	ldr	r3, [pc, #96]	; (82e08 <udd_ep_set_halt+0xe8>)
   82da8:	7018      	strb	r0, [r3, #0]
   82daa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82dae:	b662      	cpsie	i
   82db0:	e022      	b.n	82df8 <udd_ep_set_halt+0xd8>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   82db2:	4919      	ldr	r1, [pc, #100]	; (82e18 <udd_ep_set_halt+0xf8>)
   82db4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   82db8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   82dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_ack_stall(ep_index);
   82dc0:	2140      	movs	r1, #64	; 0x40
   82dc2:	4a16      	ldr	r2, [pc, #88]	; (82e1c <udd_ep_set_halt+0xfc>)
   82dc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   82dc8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   82dcc:	3290      	adds	r2, #144	; 0x90
   82dce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82dd2:	b184      	cbz	r4, 82df6 <udd_ep_set_halt+0xd6>
		cpu_irq_enable();
   82dd4:	2001      	movs	r0, #1
   82dd6:	4b0c      	ldr	r3, [pc, #48]	; (82e08 <udd_ep_set_halt+0xe8>)
   82dd8:	7018      	strb	r0, [r3, #0]
   82dda:	f3bf 8f5f 	dmb	sy
   82dde:	b662      	cpsie	i
   82de0:	e00a      	b.n	82df8 <udd_ep_set_halt+0xd8>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   82de2:	2000      	movs	r0, #0
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
}
   82de4:	4770      	bx	lr
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   82de6:	2001      	movs	r0, #1
   82de8:	4770      	bx	lr
   82dea:	2001      	movs	r0, #1
   82dec:	e004      	b.n	82df8 <udd_ep_set_halt+0xd8>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   82dee:	2000      	movs	r0, #0
   82df0:	e002      	b.n	82df8 <udd_ep_set_halt+0xd8>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   82df2:	2001      	movs	r0, #1
   82df4:	e000      	b.n	82df8 <udd_ep_set_halt+0xd8>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   82df6:	2001      	movs	r0, #1
}
   82df8:	b003      	add	sp, #12
   82dfa:	bc10      	pop	{r4}
   82dfc:	4770      	bx	lr
   82dfe:	bf00      	nop
   82e00:	400ac1c0 	.word	0x400ac1c0
   82e04:	200713d0 	.word	0x200713d0
   82e08:	20070277 	.word	0x20070277
   82e0c:	400ac130 	.word	0x400ac130
   82e10:	400ac1f0 	.word	0x400ac1f0
   82e14:	400ac000 	.word	0x400ac000
   82e18:	400ac100 	.word	0x400ac100
   82e1c:	400ac160 	.word	0x400ac160

00082e20 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   82e20:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82e22:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   82e26:	2803      	cmp	r0, #3
   82e28:	d84e      	bhi.n	82ec8 <udd_ep_clear_halt+0xa8>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   82e2a:	1e43      	subs	r3, r0, #1
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   82e2c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   82e30:	4a2c      	ldr	r2, [pc, #176]	; (82ee4 <udd_ep_clear_halt+0xc4>)
   82e32:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   82e36:	7d12      	ldrb	r2, [r2, #20]
   82e38:	f012 0f04 	tst.w	r2, #4
   82e3c:	d048      	beq.n	82ed0 <udd_ep_clear_halt+0xb0>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   82e3e:	460a      	mov	r2, r1
   82e40:	4928      	ldr	r1, [pc, #160]	; (82ee4 <udd_ep_clear_halt+0xc4>)
   82e42:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   82e46:	7d11      	ldrb	r1, [r2, #20]
   82e48:	f36f 0182 	bfc	r1, #2, #1
   82e4c:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
   82e4e:	0082      	lsls	r2, r0, #2
   82e50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82e54:	4c24      	ldr	r4, [pc, #144]	; (82ee8 <udd_ep_clear_halt+0xc8>)
   82e56:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   82e5a:	4081      	lsls	r1, r0
   82e5c:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
   82e60:	6161      	str	r1, [r4, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   82e62:	4922      	ldr	r1, [pc, #136]	; (82eec <udd_ep_clear_halt+0xcc>)
   82e64:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   82e68:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   82e6c:	d014      	beq.n	82e98 <udd_ep_clear_halt+0x78>
		if (Is_udd_stall(ep_index)) {
   82e6e:	4920      	ldr	r1, [pc, #128]	; (82ef0 <udd_ep_clear_halt+0xd0>)
   82e70:	5851      	ldr	r1, [r2, r1]
   82e72:	f011 0f40 	tst.w	r1, #64	; 0x40
   82e76:	d006      	beq.n	82e86 <udd_ep_clear_halt+0x66>
			udd_ack_stall(ep_index);
   82e78:	2040      	movs	r0, #64	; 0x40
   82e7a:	491e      	ldr	r1, [pc, #120]	; (82ef4 <udd_ep_clear_halt+0xd4>)
   82e7c:	5050      	str	r0, [r2, r1]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   82e7e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   82e82:	3190      	adds	r1, #144	; 0x90
   82e84:	5050      	str	r0, [r2, r1]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   82e86:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   82e8a:	4917      	ldr	r1, [pc, #92]	; (82ee8 <udd_ep_clear_halt+0xc8>)
   82e8c:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   82e8e:	481a      	ldr	r0, [pc, #104]	; (82ef8 <udd_ep_clear_halt+0xd8>)
   82e90:	5811      	ldr	r1, [r2, r0]
   82e92:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   82e96:	5011      	str	r1, [r2, r0]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   82e98:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   82e9c:	4911      	ldr	r1, [pc, #68]	; (82ee4 <udd_ep_clear_halt+0xc4>)
   82e9e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   82ea2:	7d12      	ldrb	r2, [r2, #20]
   82ea4:	f012 0f01 	tst.w	r2, #1
   82ea8:	d010      	beq.n	82ecc <udd_ep_clear_halt+0xac>
			ptr_job->busy = false;
   82eaa:	4608      	mov	r0, r1
   82eac:	0059      	lsls	r1, r3, #1
   82eae:	18ca      	adds	r2, r1, r3
   82eb0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   82eb4:	7d14      	ldrb	r4, [r2, #20]
   82eb6:	f36f 0400 	bfc	r4, #0, #1
   82eba:	7514      	strb	r4, [r2, #20]
			ptr_job->call_nohalt();
   82ebc:	440b      	add	r3, r1
   82ebe:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
   82ec2:	4798      	blx	r3
		}
	}
	return true;
   82ec4:	2001      	movs	r0, #1
   82ec6:	bd10      	pop	{r4, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   82ec8:	2000      	movs	r0, #0
   82eca:	bd10      	pop	{r4, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   82ecc:	2001      	movs	r0, #1
   82ece:	bd10      	pop	{r4, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   82ed0:	0082      	lsls	r2, r0, #2
   82ed2:	4906      	ldr	r1, [pc, #24]	; (82eec <udd_ep_clear_halt+0xcc>)
   82ed4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   82ed8:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   82edc:	d1c7      	bne.n	82e6e <udd_ep_clear_halt+0x4e>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   82ede:	2001      	movs	r0, #1
}
   82ee0:	bd10      	pop	{r4, pc}
   82ee2:	bf00      	nop
   82ee4:	200713d0 	.word	0x200713d0
   82ee8:	400ac220 	.word	0x400ac220
   82eec:	400ac1c0 	.word	0x400ac1c0
   82ef0:	400ac130 	.word	0x400ac130
   82ef4:	400ac160 	.word	0x400ac160
   82ef8:	400ac100 	.word	0x400ac100

00082efc <udd_ep_run>:
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   82efc:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   82f00:	2803      	cmp	r0, #3
   82f02:	d866      	bhi.n	82fd2 <udd_ep_run+0xd6>


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   82f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   82f06:	b083      	sub	sp, #12
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   82f08:	4c37      	ldr	r4, [pc, #220]	; (82fe8 <udd_ep_run+0xec>)
   82f0a:	69e5      	ldr	r5, [r4, #28]
   82f0c:	2401      	movs	r4, #1
   82f0e:	4084      	lsls	r4, r0
   82f10:	422c      	tst	r4, r5
   82f12:	d060      	beq.n	82fd6 <udd_ep_run+0xda>
			|| Is_udd_endpoint_stall_requested(ep)
   82f14:	4c35      	ldr	r4, [pc, #212]	; (82fec <udd_ep_run+0xf0>)
   82f16:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   82f1a:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   82f1e:	d15c      	bne.n	82fda <udd_ep_run+0xde>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   82f20:	1e44      	subs	r4, r0, #1

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   82f22:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   82f26:	4d32      	ldr	r5, [pc, #200]	; (82ff0 <udd_ep_run+0xf4>)
   82f28:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   82f2c:	7d2d      	ldrb	r5, [r5, #20]
   82f2e:	f015 0f04 	tst.w	r5, #4
   82f32:	d154      	bne.n	82fde <udd_ep_run+0xe2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82f34:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82f38:	fab5 f585 	clz	r5, r5
   82f3c:	096d      	lsrs	r5, r5, #5
   82f3e:	9501      	str	r5, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   82f40:	b672      	cpsid	i
   82f42:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82f46:	2600      	movs	r6, #0
   82f48:	4d2a      	ldr	r5, [pc, #168]	; (82ff4 <udd_ep_run+0xf8>)
   82f4a:	702e      	strb	r6, [r5, #0]
	return flags;
   82f4c:	9f01      	ldr	r7, [sp, #4]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   82f4e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   82f52:	4e27      	ldr	r6, [pc, #156]	; (82ff0 <udd_ep_run+0xf4>)
   82f54:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   82f58:	7d2d      	ldrb	r5, [r5, #20]
   82f5a:	f015 0f01 	tst.w	r5, #1
   82f5e:	d009      	beq.n	82f74 <udd_ep_run+0x78>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82f60:	2f00      	cmp	r7, #0
   82f62:	d03e      	beq.n	82fe2 <udd_ep_run+0xe6>
		cpu_irq_enable();
   82f64:	2201      	movs	r2, #1
   82f66:	4b23      	ldr	r3, [pc, #140]	; (82ff4 <udd_ep_run+0xf8>)
   82f68:	701a      	strb	r2, [r3, #0]
   82f6a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82f6e:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   82f70:	2000      	movs	r0, #0
   82f72:	e037      	b.n	82fe4 <udd_ep_run+0xe8>
	}
	ptr_job->busy = true;
   82f74:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   82f78:	4e1d      	ldr	r6, [pc, #116]	; (82ff0 <udd_ep_run+0xf4>)
   82f7a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   82f7e:	7d2e      	ldrb	r6, [r5, #20]
   82f80:	f046 0601 	orr.w	r6, r6, #1
   82f84:	752e      	strb	r6, [r5, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82f86:	b12f      	cbz	r7, 82f94 <udd_ep_run+0x98>
		cpu_irq_enable();
   82f88:	2601      	movs	r6, #1
   82f8a:	4d1a      	ldr	r5, [pc, #104]	; (82ff4 <udd_ep_run+0xf8>)
   82f8c:	702e      	strb	r6, [r5, #0]
   82f8e:	f3bf 8f5f 	dmb	sy
   82f92:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   82f94:	4f16      	ldr	r7, [pc, #88]	; (82ff0 <udd_ep_run+0xf4>)
   82f96:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   82f9a:	00ed      	lsls	r5, r5, #3
   82f9c:	197e      	adds	r6, r7, r5
   82f9e:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
   82fa0:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
   82fa2:	2200      	movs	r2, #0
   82fa4:	60f2      	str	r2, [r6, #12]
	ptr_job->buf_load = 0;
   82fa6:	6132      	str	r2, [r6, #16]
	ptr_job->call_trans = callback;
   82fa8:	9a08      	ldr	r2, [sp, #32]
   82faa:	517a      	str	r2, [r7, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   82fac:	b919      	cbnz	r1, 82fb6 <udd_ep_run+0xba>
   82fae:	fab3 f383 	clz	r3, r3
   82fb2:	095b      	lsrs	r3, r3, #5
   82fb4:	e000      	b.n	82fb8 <udd_ep_run+0xbc>
   82fb6:	2301      	movs	r3, #1
   82fb8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   82fbc:	4a0c      	ldr	r2, [pc, #48]	; (82ff0 <udd_ep_run+0xf4>)
   82fbe:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   82fc2:	7d22      	ldrb	r2, [r4, #20]
   82fc4:	f363 0241 	bfi	r2, r3, #1, #1
   82fc8:	7522      	strb	r2, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   82fca:	4b0b      	ldr	r3, [pc, #44]	; (82ff8 <udd_ep_run+0xfc>)
   82fcc:	4798      	blx	r3
	return true;
   82fce:	2001      	movs	r0, #1
   82fd0:	e008      	b.n	82fe4 <udd_ep_run+0xe8>
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   82fd2:	2000      	movs	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   82fd4:	4770      	bx	lr
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   82fd6:	2000      	movs	r0, #0
   82fd8:	e004      	b.n	82fe4 <udd_ep_run+0xe8>
   82fda:	2000      	movs	r0, #0
   82fdc:	e002      	b.n	82fe4 <udd_ep_run+0xe8>
   82fde:	2000      	movs	r0, #0
   82fe0:	e000      	b.n	82fe4 <udd_ep_run+0xe8>
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   82fe2:	2000      	movs	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   82fe4:	b003      	add	sp, #12
   82fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82fe8:	400ac000 	.word	0x400ac000
   82fec:	400ac1c0 	.word	0x400ac1c0
   82ff0:	200713d0 	.word	0x200713d0
   82ff4:	20070277 	.word	0x20070277
   82ff8:	0008218d 	.word	0x0008218d

00082ffc <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   82ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83000:	b082      	sub	sp, #8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   83002:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   83006:	2c03      	cmp	r4, #3
   83008:	f200 80df 	bhi.w	831ca <udd_ep_alloc+0x1ce>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   8300c:	4b78      	ldr	r3, [pc, #480]	; (831f0 <udd_ep_alloc+0x1f4>)
   8300e:	69dd      	ldr	r5, [r3, #28]
   83010:	4626      	mov	r6, r4
   83012:	2301      	movs	r3, #1
   83014:	40a3      	lsls	r3, r4
   83016:	402b      	ands	r3, r5
   83018:	f040 80d9 	bne.w	831ce <udd_ep_alloc+0x1d2>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   8301c:	f011 0503 	ands.w	r5, r1, #3
   83020:	f000 80d7 	beq.w	831d2 <udd_ep_alloc+0x1d6>
   83024:	2d02      	cmp	r5, #2
   83026:	d905      	bls.n	83034 <udd_ep_alloc+0x38>
   83028:	2d03      	cmp	r5, #3
   8302a:	f040 80d2 	bne.w	831d2 <udd_ep_alloc+0x1d6>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   8302e:	f04f 0c00 	mov.w	ip, #0
   83032:	e001      	b.n	83038 <udd_ep_alloc+0x3c>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   83034:	f04f 0c01 	mov.w	ip, #1
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   83038:	ea4f 0e84 	mov.w	lr, r4, lsl #2
   8303c:	4f6d      	ldr	r7, [pc, #436]	; (831f4 <udd_ep_alloc+0x1f8>)
   8303e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   83042:	f425 55cb 	bic.w	r5, r5, #6496	; 0x1960
   83046:	f025 051c 	bic.w	r5, r5, #28
   8304a:	02c9      	lsls	r1, r1, #11
   8304c:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   83050:	f000 0080 	and.w	r0, r0, #128	; 0x80
   83054:	2800      	cmp	r0, #0
   83056:	bf18      	it	ne
   83058:	f44f 7380 	movne.w	r3, #256	; 0x100
   8305c:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
   83060:	b280      	uxth	r0, r0
   83062:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
   83066:	d304      	bcc.n	83072 <udd_ep_alloc+0x76>
   83068:	2a08      	cmp	r2, #8
   8306a:	d905      	bls.n	83078 <udd_ep_alloc+0x7c>
   8306c:	0052      	lsls	r2, r2, #1
   8306e:	3a01      	subs	r2, #1
   83070:	e003      	b.n	8307a <udd_ep_alloc+0x7e>
   83072:	f240 72ff 	movw	r2, #2047	; 0x7ff
   83076:	e000      	b.n	8307a <udd_ep_alloc+0x7e>
   83078:	220f      	movs	r2, #15
   8307a:	fab2 f282 	clz	r2, r2
   8307e:	ea41 0c8c 	orr.w	ip, r1, ip, lsl #2
   83082:	ea4c 0303 	orr.w	r3, ip, r3
   83086:	f1c2 021c 	rsb	r2, r2, #28
   8308a:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
   8308e:	f422 62d0 	bic.w	r2, r2, #1664	; 0x680
   83092:	f022 0203 	bic.w	r2, r2, #3
   83096:	04d2      	lsls	r2, r2, #19
   83098:	0cd2      	lsrs	r2, r2, #19
   8309a:	432a      	orrs	r2, r5
   8309c:	f84e 2007 	str.w	r2, [lr, r7]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   830a0:	2301      	movs	r3, #1
   830a2:	fa03 f606 	lsl.w	r6, r3, r6
   830a6:	b2b6      	uxth	r6, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   830a8:	2c02      	cmp	r4, #2
   830aa:	f200 8098 	bhi.w	831de <udd_ep_alloc+0x1e2>
   830ae:	4a52      	ldr	r2, [pc, #328]	; (831f8 <udd_ep_alloc+0x1fc>)
   830b0:	2303      	movs	r3, #3
		if (Is_udd_endpoint_enabled(i)) {
   830b2:	484f      	ldr	r0, [pc, #316]	; (831f0 <udd_ep_alloc+0x1f4>)
   830b4:	2701      	movs	r7, #1
   830b6:	69c5      	ldr	r5, [r0, #28]
   830b8:	fa07 f103 	lsl.w	r1, r7, r3
   830bc:	420d      	tst	r5, r1
   830be:	d009      	beq.n	830d4 <udd_ep_alloc+0xd8>
			ep_allocated |= 1 << i;
   830c0:	430e      	orrs	r6, r1
   830c2:	b2b6      	uxth	r6, r6
			udd_disable_endpoint(i);
   830c4:	69c5      	ldr	r5, [r0, #28]
   830c6:	ea25 0101 	bic.w	r1, r5, r1
   830ca:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
   830cc:	6811      	ldr	r1, [r2, #0]
   830ce:	f021 0102 	bic.w	r1, r1, #2
   830d2:	6011      	str	r1, [r2, #0]
   830d4:	3b01      	subs	r3, #1
   830d6:	3a04      	subs	r2, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   830d8:	b2d9      	uxtb	r1, r3
   830da:	42a1      	cmp	r1, r4
   830dc:	d8eb      	bhi.n	830b6 <udd_ep_alloc+0xba>
   830de:	e07e      	b.n	831de <udd_ep_alloc+0x1e2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   830e0:	fa46 f304 	asr.w	r3, r6, r4
   830e4:	f013 0f01 	tst.w	r3, #1
   830e8:	d069      	beq.n	831be <udd_ep_alloc+0x1c2>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   830ea:	f104 3eff 	add.w	lr, r4, #4294967295
			bool b_restart = ptr_job->busy;
   830ee:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   830f2:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   830f6:	7d1a      	ldrb	r2, [r3, #20]
   830f8:	f002 0101 	and.w	r1, r2, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   830fc:	f36f 0200 	bfc	r2, #0, #1
   83100:	751a      	strb	r2, [r3, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   83102:	00a0      	lsls	r0, r4, #2
   83104:	eb00 0c05 	add.w	ip, r0, r5
   83108:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   8310c:	f043 0302 	orr.w	r3, r3, #2
   83110:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
			udd_enable_endpoint(i);
   83114:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 831f0 <udd_ep_alloc+0x1f4>
   83118:	f8d9 201c 	ldr.w	r2, [r9, #28]
   8311c:	2301      	movs	r3, #1
   8311e:	40a3      	lsls	r3, r4
   83120:	4313      	orrs	r3, r2
   83122:	f8c9 301c 	str.w	r3, [r9, #28]
			if (!Is_udd_endpoint_configured(i)) {
   83126:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   8312a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   8312e:	d119      	bne.n	83164 <udd_ep_alloc+0x168>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   83130:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   83134:	4a31      	ldr	r2, [pc, #196]	; (831fc <udd_ep_alloc+0x200>)
   83136:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
   8313a:	2d00      	cmp	r5, #0
   8313c:	d04b      	beq.n	831d6 <udd_ep_alloc+0x1da>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   8313e:	f8dc 3000 	ldr.w	r3, [ip]
   83142:	f413 7f80 	tst.w	r3, #256	; 0x100
					i |= USB_EP_DIR_IN;
   83146:	bf18      	it	ne
   83148:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8314c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   83150:	4b2a      	ldr	r3, [pc, #168]	; (831fc <udd_ep_alloc+0x200>)
   83152:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   83156:	4622      	mov	r2, r4
   83158:	f8de 100c 	ldr.w	r1, [lr, #12]
   8315c:	2001      	movs	r0, #1
   8315e:	47a8      	blx	r5
						ptr_job->buf_cnt, i);
				return false;
   83160:	2000      	movs	r0, #0
   83162:	e041      	b.n	831e8 <udd_ep_alloc+0x1ec>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   83164:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   83168:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8316c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
			if (b_restart) {
   83170:	b329      	cbz	r1, 831be <udd_ep_alloc+0x1c2>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   83172:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
   83176:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   8317a:	68ca      	ldr	r2, [r1, #12]
   8317c:	690b      	ldr	r3, [r1, #16]
   8317e:	1ad2      	subs	r2, r2, r3
   83180:	60ca      	str	r2, [r1, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   83182:	5943      	ldr	r3, [r0, r5]
   83184:	f413 7f80 	tst.w	r3, #256	; 0x100
   83188:	bf14      	ite	ne
   8318a:	f044 0a80 	orrne.w	sl, r4, #128	; 0x80
   8318e:	46a2      	moveq	sl, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
   83190:	ea4f 0c4e 	mov.w	ip, lr, lsl #1
   83194:	eb0c 010e 	add.w	r1, ip, lr
   83198:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8319c:	688b      	ldr	r3, [r1, #8]
   8319e:	f8d1 9004 	ldr.w	r9, [r1, #4]
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   831a2:	7d09      	ldrb	r1, [r1, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   831a4:	44e6      	add	lr, ip
   831a6:	f857 003e 	ldr.w	r0, [r7, lr, lsl #3]
   831aa:	9000      	str	r0, [sp, #0]
   831ac:	1a9b      	subs	r3, r3, r2
   831ae:	444a      	add	r2, r9
   831b0:	f3c1 0140 	ubfx	r1, r1, #1, #1
   831b4:	4650      	mov	r0, sl
   831b6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 83200 <udd_ep_alloc+0x204>
   831ba:	47c8      	blx	r9
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   831bc:	b168      	cbz	r0, 831da <udd_ep_alloc+0x1de>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   831be:	3401      	adds	r4, #1
   831c0:	b2e4      	uxtb	r4, r4
   831c2:	2c04      	cmp	r4, #4
   831c4:	d18c      	bne.n	830e0 <udd_ep_alloc+0xe4>
					return false;
				}
			}
		}
	}
	return true;
   831c6:	2001      	movs	r0, #1
   831c8:	e00e      	b.n	831e8 <udd_ep_alloc+0x1ec>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   831ca:	2000      	movs	r0, #0
   831cc:	e00c      	b.n	831e8 <udd_ep_alloc+0x1ec>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   831ce:	2000      	movs	r0, #0
   831d0:	e00a      	b.n	831e8 <udd_ep_alloc+0x1ec>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   831d2:	2000      	movs	r0, #0
   831d4:	e008      	b.n	831e8 <udd_ep_alloc+0x1ec>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   831d6:	2000      	movs	r0, #0
   831d8:	e006      	b.n	831e8 <udd_ep_alloc+0x1ec>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   831da:	2000      	movs	r0, #0
   831dc:	e004      	b.n	831e8 <udd_ep_alloc+0x1ec>

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
			bool b_restart = ptr_job->busy;
   831de:	4f07      	ldr	r7, [pc, #28]	; (831fc <udd_ep_alloc+0x200>)
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   831e0:	4d04      	ldr	r5, [pc, #16]	; (831f4 <udd_ep_alloc+0x1f8>)
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
   831e2:	f8df 8020 	ldr.w	r8, [pc, #32]	; 83204 <udd_ep_alloc+0x208>
   831e6:	e77b      	b.n	830e0 <udd_ep_alloc+0xe4>
				}
			}
		}
	}
	return true;
}
   831e8:	b002      	add	sp, #8
   831ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   831ee:	bf00      	nop
   831f0:	400ac000 	.word	0x400ac000
   831f4:	400ac100 	.word	0x400ac100
   831f8:	400ac10c 	.word	0x400ac10c
   831fc:	200713d0 	.word	0x200713d0
   83200:	00082efd 	.word	0x00082efd
   83204:	400ac130 	.word	0x400ac130

00083208 <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   83208:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8320a:	f000 020f 	and.w	r2, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   8320e:	1e54      	subs	r4, r2, #1
   83210:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   83214:	40a3      	lsls	r3, r4
   83216:	4915      	ldr	r1, [pc, #84]	; (8326c <udd_ep_abort+0x64>)
   83218:	614b      	str	r3, [r1, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   8321a:	4b15      	ldr	r3, [pc, #84]	; (83270 <udd_ep_abort+0x68>)
   8321c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   83220:	2500      	movs	r5, #0
   83222:	609d      	str	r5, [r3, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   83224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83228:	4093      	lsls	r3, r2
   8322a:	614b      	str	r3, [r1, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   8322c:	f010 0f80 	tst.w	r0, #128	; 0x80
   83230:	d013      	beq.n	8325a <udd_ep_abort+0x52>
		while(udd_nb_busy_bank(ep_index)) {
   83232:	0093      	lsls	r3, r2, #2
   83234:	480f      	ldr	r0, [pc, #60]	; (83274 <udd_ep_abort+0x6c>)
   83236:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
   83238:	4d0f      	ldr	r5, [pc, #60]	; (83278 <udd_ep_abort+0x70>)
   8323a:	441d      	add	r5, r3
   8323c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   83240:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   83244:	4419      	add	r1, r3
   83246:	e004      	b.n	83252 <udd_ep_abort+0x4a>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   83248:	602e      	str	r6, [r5, #0]
			while(Is_udd_kill_last(ep_index));
   8324a:	680b      	ldr	r3, [r1, #0]
   8324c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   83250:	d1fb      	bne.n	8324a <udd_ep_abort+0x42>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   83252:	6803      	ldr	r3, [r0, #0]
   83254:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   83258:	d1f6      	bne.n	83248 <udd_ep_abort+0x40>
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8325a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   8325e:	2101      	movs	r1, #1
   83260:	4806      	ldr	r0, [pc, #24]	; (8327c <udd_ep_abort+0x74>)
   83262:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   83266:	4b06      	ldr	r3, [pc, #24]	; (83280 <udd_ep_abort+0x78>)
   83268:	4798      	blx	r3
   8326a:	bd70      	pop	{r4, r5, r6, pc}
   8326c:	400ac000 	.word	0x400ac000
   83270:	400ac300 	.word	0x400ac300
   83274:	400ac130 	.word	0x400ac130
   83278:	400ac1f0 	.word	0x400ac1f0
   8327c:	200713d0 	.word	0x200713d0
   83280:	00082155 	.word	0x00082155

00083284 <udd_test_mode_j>:

#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
	udd_enable_hs_test_mode();
   83284:	4a05      	ldr	r2, [pc, #20]	; (8329c <udd_test_mode_j+0x18>)
   83286:	6813      	ldr	r3, [r2, #0]
   83288:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   8328c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83290:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_j();
   83292:	6813      	ldr	r3, [r2, #0]
   83294:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83298:	6013      	str	r3, [r2, #0]
   8329a:	4770      	bx	lr
   8329c:	400ac000 	.word	0x400ac000

000832a0 <udd_test_mode_k>:
}


void udd_test_mode_k(void)
{
	udd_enable_hs_test_mode();
   832a0:	4a05      	ldr	r2, [pc, #20]	; (832b8 <udd_test_mode_k+0x18>)
   832a2:	6813      	ldr	r3, [r2, #0]
   832a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   832a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   832ac:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_k();
   832ae:	6813      	ldr	r3, [r2, #0]
   832b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   832b4:	6013      	str	r3, [r2, #0]
   832b6:	4770      	bx	lr
   832b8:	400ac000 	.word	0x400ac000

000832bc <udd_test_mode_se0_nak>:
}


void udd_test_mode_se0_nak(void)
{
	udd_enable_hs_test_mode();
   832bc:	4a03      	ldr	r2, [pc, #12]	; (832cc <udd_test_mode_se0_nak+0x10>)
   832be:	6813      	ldr	r3, [r2, #0]
   832c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   832c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   832c8:	6013      	str	r3, [r2, #0]
   832ca:	4770      	bx	lr
   832cc:	400ac000 	.word	0x400ac000

000832d0 <udd_test_mode_packet>:
}


void udd_test_mode_packet(void)
{
   832d0:	b4f0      	push	{r4, r5, r6, r7}
   832d2:	b08e      	sub	sp, #56	; 0x38
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   832d4:	4c22      	ldr	r4, [pc, #136]	; (83360 <udd_test_mode_packet+0x90>)
   832d6:	466e      	mov	r6, sp
   832d8:	f104 0730 	add.w	r7, r4, #48	; 0x30
   832dc:	4635      	mov	r5, r6
   832de:	6820      	ldr	r0, [r4, #0]
   832e0:	6861      	ldr	r1, [r4, #4]
   832e2:	68a2      	ldr	r2, [r4, #8]
   832e4:	68e3      	ldr	r3, [r4, #12]
   832e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   832e8:	3410      	adds	r4, #16
   832ea:	462e      	mov	r6, r5
   832ec:	42bc      	cmp	r4, r7
   832ee:	d1f5      	bne.n	832dc <udd_test_mode_packet+0xc>
   832f0:	6820      	ldr	r0, [r4, #0]
   832f2:	6028      	str	r0, [r5, #0]
   832f4:	7923      	ldrb	r3, [r4, #4]
   832f6:	712b      	strb	r3, [r5, #4]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   832f8:	4a1a      	ldr	r2, [pc, #104]	; (83364 <udd_test_mode_packet+0x94>)
   832fa:	69d3      	ldr	r3, [r2, #28]
   832fc:	f023 0301 	bic.w	r3, r3, #1
   83300:	61d3      	str	r3, [r2, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   83302:	4919      	ldr	r1, [pc, #100]	; (83368 <udd_test_mode_packet+0x98>)
   83304:	680b      	ldr	r3, [r1, #0]
   83306:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
   8330a:	f023 031c 	bic.w	r3, r3, #28
   8330e:	f443 5389 	orr.w	r3, r3, #4384	; 0x1120
   83312:	f043 0310 	orr.w	r3, r3, #16
   83316:	600b      	str	r3, [r1, #0]
			64, UOTGHS_DEVEPTCFG_EPBK_1_BANK);
	udd_allocate_memory(0);
   83318:	680b      	ldr	r3, [r1, #0]
   8331a:	f043 0302 	orr.w	r3, r3, #2
   8331e:	600b      	str	r3, [r1, #0]
	udd_enable_endpoint(0);
   83320:	69d3      	ldr	r3, [r2, #28]
   83322:	f043 0301 	orr.w	r3, r3, #1
   83326:	61d3      	str	r3, [r2, #28]

	udd_enable_hs_test_mode();
   83328:	6813      	ldr	r3, [r2, #0]
   8332a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   8332e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83332:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_packet();
   83334:	6813      	ldr	r3, [r2, #0]
   83336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   8333a:	6013      	str	r3, [r2, #0]
   8333c:	4a0b      	ldr	r2, [pc, #44]	; (8336c <udd_test_mode_packet+0x9c>)

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;
   8333e:	466b      	mov	r3, sp

	for (i = 0; i < sizeof(test_packet); i++) {
   83340:	f10d 0035 	add.w	r0, sp, #53	; 0x35
		*ptr_dest++ = *ptr_src++;
   83344:	f813 1b01 	ldrb.w	r1, [r3], #1
   83348:	f802 1f01 	strb.w	r1, [r2, #1]!

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   8334c:	4283      	cmp	r3, r0
   8334e:	d1f9      	bne.n	83344 <udd_test_mode_packet+0x74>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ack_fifocon(0);
   83350:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83354:	4b06      	ldr	r3, [pc, #24]	; (83370 <udd_test_mode_packet+0xa0>)
   83356:	601a      	str	r2, [r3, #0]
}
   83358:	b00e      	add	sp, #56	; 0x38
   8335a:	bcf0      	pop	{r4, r5, r6, r7}
   8335c:	4770      	bx	lr
   8335e:	bf00      	nop
   83360:	00083fc4 	.word	0x00083fc4
   83364:	400ac000 	.word	0x400ac000
   83368:	400ac100 	.word	0x400ac100
   8336c:	2017ffff 	.word	0x2017ffff
   83370:	400ac220 	.word	0x400ac220

00083374 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   83374:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   83376:	010c      	lsls	r4, r1, #4
   83378:	4294      	cmp	r4, r2
   8337a:	d90f      	bls.n	8339c <usart_set_async_baudrate+0x28>
   8337c:	e01a      	b.n	833b4 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   8337e:	6841      	ldr	r1, [r0, #4]
   83380:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   83384:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   83386:	0412      	lsls	r2, r2, #16
   83388:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   8338c:	431a      	orrs	r2, r3
   8338e:	6202      	str	r2, [r0, #32]

	return 0;
   83390:	2000      	movs	r0, #0
   83392:	e01c      	b.n	833ce <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   83394:	2001      	movs	r0, #1
   83396:	e01a      	b.n	833ce <usart_set_async_baudrate+0x5a>
   83398:	2001      	movs	r0, #1
   8339a:	e018      	b.n	833ce <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8339c:	0863      	lsrs	r3, r4, #1
   8339e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   833a2:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
   833a6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   833a8:	1e5c      	subs	r4, r3, #1
   833aa:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   833ae:	428c      	cmp	r4, r1
   833b0:	d9e9      	bls.n	83386 <usart_set_async_baudrate+0x12>
   833b2:	e7ef      	b.n	83394 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   833b4:	00c9      	lsls	r1, r1, #3
   833b6:	084b      	lsrs	r3, r1, #1
   833b8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   833bc:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   833c0:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   833c2:	1e5c      	subs	r4, r3, #1
   833c4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   833c8:	428c      	cmp	r4, r1
   833ca:	d8e5      	bhi.n	83398 <usart_set_async_baudrate+0x24>
   833cc:	e7d7      	b.n	8337e <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   833ce:	bc10      	pop	{r4}
   833d0:	4770      	bx	lr
   833d2:	bf00      	nop

000833d4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   833d4:	4b08      	ldr	r3, [pc, #32]	; (833f8 <usart_reset+0x24>)
   833d6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   833da:	2300      	movs	r3, #0
   833dc:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   833de:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   833e0:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   833e2:	2388      	movs	r3, #136	; 0x88
   833e4:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   833e6:	2324      	movs	r3, #36	; 0x24
   833e8:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   833ea:	f44f 7380 	mov.w	r3, #256	; 0x100
   833ee:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   833f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   833f4:	6003      	str	r3, [r0, #0]
   833f6:	4770      	bx	lr
   833f8:	55534100 	.word	0x55534100

000833fc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   833fc:	b570      	push	{r4, r5, r6, lr}
   833fe:	4605      	mov	r5, r0
   83400:	460c      	mov	r4, r1
   83402:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   83404:	4b0f      	ldr	r3, [pc, #60]	; (83444 <usart_init_rs232+0x48>)
   83406:	4798      	blx	r3

	ul_reg_val = 0;
   83408:	2200      	movs	r2, #0
   8340a:	4b0f      	ldr	r3, [pc, #60]	; (83448 <usart_init_rs232+0x4c>)
   8340c:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8340e:	b19c      	cbz	r4, 83438 <usart_init_rs232+0x3c>
   83410:	4632      	mov	r2, r6
   83412:	6821      	ldr	r1, [r4, #0]
   83414:	4628      	mov	r0, r5
   83416:	4b0d      	ldr	r3, [pc, #52]	; (8344c <usart_init_rs232+0x50>)
   83418:	4798      	blx	r3
   8341a:	4602      	mov	r2, r0
   8341c:	b970      	cbnz	r0, 8343c <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8341e:	6861      	ldr	r1, [r4, #4]
   83420:	68a3      	ldr	r3, [r4, #8]
   83422:	4319      	orrs	r1, r3
   83424:	6923      	ldr	r3, [r4, #16]
   83426:	4319      	orrs	r1, r3
   83428:	68e3      	ldr	r3, [r4, #12]
   8342a:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8342c:	4906      	ldr	r1, [pc, #24]	; (83448 <usart_init_rs232+0x4c>)
   8342e:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   83430:	6869      	ldr	r1, [r5, #4]
   83432:	430b      	orrs	r3, r1
   83434:	606b      	str	r3, [r5, #4]

	return 0;
   83436:	e002      	b.n	8343e <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   83438:	2201      	movs	r2, #1
   8343a:	e000      	b.n	8343e <usart_init_rs232+0x42>
   8343c:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   8343e:	4610      	mov	r0, r2
   83440:	bd70      	pop	{r4, r5, r6, pc}
   83442:	bf00      	nop
   83444:	000833d5 	.word	0x000833d5
   83448:	20071420 	.word	0x20071420
   8344c:	00083375 	.word	0x00083375

00083450 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   83450:	2340      	movs	r3, #64	; 0x40
   83452:	6003      	str	r3, [r0, #0]
   83454:	4770      	bx	lr
   83456:	bf00      	nop

00083458 <usart_disable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXDIS;
   83458:	2380      	movs	r3, #128	; 0x80
   8345a:	6003      	str	r3, [r0, #0]
   8345c:	4770      	bx	lr
   8345e:	bf00      	nop

00083460 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
   83460:	2310      	movs	r3, #16
   83462:	6003      	str	r3, [r0, #0]
   83464:	4770      	bx	lr
   83466:	bf00      	nop

00083468 <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   83468:	2324      	movs	r3, #36	; 0x24
   8346a:	6003      	str	r3, [r0, #0]
   8346c:	4770      	bx	lr
   8346e:	bf00      	nop

00083470 <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
   83470:	6081      	str	r1, [r0, #8]
   83472:	4770      	bx	lr

00083474 <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
   83474:	60c1      	str	r1, [r0, #12]
   83476:	4770      	bx	lr

00083478 <usart_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
	return p_usart->US_IMR;
   83478:	6900      	ldr	r0, [r0, #16]
}
   8347a:	4770      	bx	lr

0008347c <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
   8347c:	6940      	ldr	r0, [r0, #20]
}
   8347e:	4770      	bx	lr

00083480 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   83480:	6943      	ldr	r3, [r0, #20]
   83482:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   83486:	bf1d      	ittte	ne
   83488:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8348c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8348e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   83490:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   83492:	4770      	bx	lr

00083494 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   83494:	6943      	ldr	r3, [r0, #20]
   83496:	f013 0f01 	tst.w	r3, #1
   8349a:	d005      	beq.n	834a8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8349c:	6983      	ldr	r3, [r0, #24]
   8349e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   834a2:	600b      	str	r3, [r1, #0]

	return 0;
   834a4:	2000      	movs	r0, #0
   834a6:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   834a8:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   834aa:	4770      	bx	lr

000834ac <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   834ac:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   834ae:	4b04      	ldr	r3, [pc, #16]	; (834c0 <sysclk_enable_usb+0x14>)
   834b0:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   834b2:	2000      	movs	r0, #0
   834b4:	4b03      	ldr	r3, [pc, #12]	; (834c4 <sysclk_enable_usb+0x18>)
   834b6:	4798      	blx	r3
		pmc_enable_udpck();
   834b8:	4b03      	ldr	r3, [pc, #12]	; (834c8 <sysclk_enable_usb+0x1c>)
   834ba:	4798      	blx	r3
   834bc:	bd08      	pop	{r3, pc}
   834be:	bf00      	nop
   834c0:	00083795 	.word	0x00083795
   834c4:	00083801 	.word	0x00083801
   834c8:	00083815 	.word	0x00083815

000834cc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   834cc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   834ce:	480e      	ldr	r0, [pc, #56]	; (83508 <sysclk_init+0x3c>)
   834d0:	4b0e      	ldr	r3, [pc, #56]	; (8350c <sysclk_init+0x40>)
   834d2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   834d4:	213e      	movs	r1, #62	; 0x3e
   834d6:	2000      	movs	r0, #0
   834d8:	4b0d      	ldr	r3, [pc, #52]	; (83510 <sysclk_init+0x44>)
   834da:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   834dc:	4c0d      	ldr	r4, [pc, #52]	; (83514 <sysclk_init+0x48>)
   834de:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   834e0:	2800      	cmp	r0, #0
   834e2:	d0fc      	beq.n	834de <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   834e4:	4b0c      	ldr	r3, [pc, #48]	; (83518 <sysclk_init+0x4c>)
   834e6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   834e8:	4a0c      	ldr	r2, [pc, #48]	; (8351c <sysclk_init+0x50>)
   834ea:	4b0d      	ldr	r3, [pc, #52]	; (83520 <sysclk_init+0x54>)
   834ec:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   834ee:	4c0d      	ldr	r4, [pc, #52]	; (83524 <sysclk_init+0x58>)
   834f0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   834f2:	2800      	cmp	r0, #0
   834f4:	d0fc      	beq.n	834f0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   834f6:	2010      	movs	r0, #16
   834f8:	4b0b      	ldr	r3, [pc, #44]	; (83528 <sysclk_init+0x5c>)
   834fa:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   834fc:	4b0b      	ldr	r3, [pc, #44]	; (8352c <sysclk_init+0x60>)
   834fe:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83500:	4801      	ldr	r0, [pc, #4]	; (83508 <sysclk_init+0x3c>)
   83502:	4b02      	ldr	r3, [pc, #8]	; (8350c <sysclk_init+0x40>)
   83504:	4798      	blx	r3
   83506:	bd10      	pop	{r4, pc}
   83508:	0501bd00 	.word	0x0501bd00
   8350c:	200700b1 	.word	0x200700b1
   83510:	00083711 	.word	0x00083711
   83514:	00083765 	.word	0x00083765
   83518:	00083775 	.word	0x00083775
   8351c:	200d3f01 	.word	0x200d3f01
   83520:	400e0600 	.word	0x400e0600
   83524:	00083785 	.word	0x00083785
   83528:	000836a9 	.word	0x000836a9
   8352c:	00083995 	.word	0x00083995

00083530 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   83530:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   83532:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   83536:	d016      	beq.n	83566 <pio_set_peripheral+0x36>
   83538:	d804      	bhi.n	83544 <pio_set_peripheral+0x14>
   8353a:	b1c1      	cbz	r1, 8356e <pio_set_peripheral+0x3e>
   8353c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   83540:	d00a      	beq.n	83558 <pio_set_peripheral+0x28>
   83542:	e013      	b.n	8356c <pio_set_peripheral+0x3c>
   83544:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   83548:	d011      	beq.n	8356e <pio_set_peripheral+0x3e>
   8354a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8354e:	d00e      	beq.n	8356e <pio_set_peripheral+0x3e>
   83550:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   83554:	d10a      	bne.n	8356c <pio_set_peripheral+0x3c>
   83556:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   83558:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8355a:	6f03      	ldr	r3, [r0, #112]	; 0x70
   8355c:	400b      	ands	r3, r1
   8355e:	ea23 0302 	bic.w	r3, r3, r2
   83562:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   83564:	e002      	b.n	8356c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   83566:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83568:	4313      	orrs	r3, r2
   8356a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8356c:	6042      	str	r2, [r0, #4]
   8356e:	4770      	bx	lr

00083570 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   83570:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   83572:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   83576:	bf14      	ite	ne
   83578:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8357a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8357c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   83580:	bf14      	ite	ne
   83582:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   83584:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   83586:	f012 0f02 	tst.w	r2, #2
   8358a:	d002      	beq.n	83592 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8358c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   83590:	e004      	b.n	8359c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   83592:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   83596:	bf18      	it	ne
   83598:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8359c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8359e:	6001      	str	r1, [r0, #0]
   835a0:	4770      	bx	lr
   835a2:	bf00      	nop

000835a4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   835a4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   835a6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   835a8:	9c01      	ldr	r4, [sp, #4]
   835aa:	b10c      	cbz	r4, 835b0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   835ac:	6641      	str	r1, [r0, #100]	; 0x64
   835ae:	e000      	b.n	835b2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   835b0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   835b2:	b10b      	cbz	r3, 835b8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   835b4:	6501      	str	r1, [r0, #80]	; 0x50
   835b6:	e000      	b.n	835ba <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   835b8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   835ba:	b10a      	cbz	r2, 835c0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   835bc:	6301      	str	r1, [r0, #48]	; 0x30
   835be:	e000      	b.n	835c2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   835c0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   835c2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   835c4:	6001      	str	r1, [r0, #0]
}
   835c6:	bc10      	pop	{r4}
   835c8:	4770      	bx	lr
   835ca:	bf00      	nop

000835cc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   835cc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   835ce:	4770      	bx	lr

000835d0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   835d0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   835d2:	4770      	bx	lr

000835d4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   835d4:	b570      	push	{r4, r5, r6, lr}
   835d6:	b082      	sub	sp, #8
   835d8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   835da:	0943      	lsrs	r3, r0, #5
   835dc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   835e0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   835e4:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   835e6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   835ea:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   835ee:	d030      	beq.n	83652 <pio_configure_pin+0x7e>
   835f0:	d806      	bhi.n	83600 <pio_configure_pin+0x2c>
   835f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   835f6:	d00a      	beq.n	8360e <pio_configure_pin+0x3a>
   835f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   835fc:	d018      	beq.n	83630 <pio_configure_pin+0x5c>
   835fe:	e049      	b.n	83694 <pio_configure_pin+0xc0>
   83600:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83604:	d030      	beq.n	83668 <pio_configure_pin+0x94>
   83606:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8360a:	d02d      	beq.n	83668 <pio_configure_pin+0x94>
   8360c:	e042      	b.n	83694 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8360e:	f000 001f 	and.w	r0, r0, #31
   83612:	2601      	movs	r6, #1
   83614:	4086      	lsls	r6, r0
   83616:	4632      	mov	r2, r6
   83618:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8361c:	4620      	mov	r0, r4
   8361e:	4b1f      	ldr	r3, [pc, #124]	; (8369c <pio_configure_pin+0xc8>)
   83620:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   83622:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   83626:	bf14      	ite	ne
   83628:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8362a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8362c:	2001      	movs	r0, #1
   8362e:	e032      	b.n	83696 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   83630:	f000 001f 	and.w	r0, r0, #31
   83634:	2601      	movs	r6, #1
   83636:	4086      	lsls	r6, r0
   83638:	4632      	mov	r2, r6
   8363a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8363e:	4620      	mov	r0, r4
   83640:	4b16      	ldr	r3, [pc, #88]	; (8369c <pio_configure_pin+0xc8>)
   83642:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   83644:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   83648:	bf14      	ite	ne
   8364a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8364c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8364e:	2001      	movs	r0, #1
   83650:	e021      	b.n	83696 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83652:	f000 011f 	and.w	r1, r0, #31
   83656:	2601      	movs	r6, #1
   83658:	462a      	mov	r2, r5
   8365a:	fa06 f101 	lsl.w	r1, r6, r1
   8365e:	4620      	mov	r0, r4
   83660:	4b0f      	ldr	r3, [pc, #60]	; (836a0 <pio_configure_pin+0xcc>)
   83662:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83664:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   83666:	e016      	b.n	83696 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83668:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   8366c:	f000 011f 	and.w	r1, r0, #31
   83670:	2601      	movs	r6, #1
   83672:	ea05 0306 	and.w	r3, r5, r6
   83676:	9300      	str	r3, [sp, #0]
   83678:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8367c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83680:	bf14      	ite	ne
   83682:	2200      	movne	r2, #0
   83684:	2201      	moveq	r2, #1
   83686:	fa06 f101 	lsl.w	r1, r6, r1
   8368a:	4620      	mov	r0, r4
   8368c:	4c05      	ldr	r4, [pc, #20]	; (836a4 <pio_configure_pin+0xd0>)
   8368e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   83690:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83692:	e000      	b.n	83696 <pio_configure_pin+0xc2>

	default:
		return 0;
   83694:	2000      	movs	r0, #0
	}

	return 1;
}
   83696:	b002      	add	sp, #8
   83698:	bd70      	pop	{r4, r5, r6, pc}
   8369a:	bf00      	nop
   8369c:	00083531 	.word	0x00083531
   836a0:	00083571 	.word	0x00083571
   836a4:	000835a5 	.word	0x000835a5

000836a8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   836a8:	4a18      	ldr	r2, [pc, #96]	; (8370c <pmc_switch_mck_to_pllack+0x64>)
   836aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   836ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   836b0:	4318      	orrs	r0, r3
   836b2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   836b6:	f013 0f08 	tst.w	r3, #8
   836ba:	d003      	beq.n	836c4 <pmc_switch_mck_to_pllack+0x1c>
   836bc:	e009      	b.n	836d2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   836be:	3b01      	subs	r3, #1
   836c0:	d103      	bne.n	836ca <pmc_switch_mck_to_pllack+0x22>
   836c2:	e01e      	b.n	83702 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   836c8:	4910      	ldr	r1, [pc, #64]	; (8370c <pmc_switch_mck_to_pllack+0x64>)
   836ca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   836cc:	f012 0f08 	tst.w	r2, #8
   836d0:	d0f5      	beq.n	836be <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   836d2:	4a0e      	ldr	r2, [pc, #56]	; (8370c <pmc_switch_mck_to_pllack+0x64>)
   836d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   836d6:	f023 0303 	bic.w	r3, r3, #3
   836da:	f043 0302 	orr.w	r3, r3, #2
   836de:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836e0:	6e90      	ldr	r0, [r2, #104]	; 0x68
   836e2:	f010 0008 	ands.w	r0, r0, #8
   836e6:	d004      	beq.n	836f2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   836e8:	2000      	movs	r0, #0
   836ea:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   836ec:	3b01      	subs	r3, #1
   836ee:	d103      	bne.n	836f8 <pmc_switch_mck_to_pllack+0x50>
   836f0:	e009      	b.n	83706 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   836f6:	4905      	ldr	r1, [pc, #20]	; (8370c <pmc_switch_mck_to_pllack+0x64>)
   836f8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   836fa:	f012 0f08 	tst.w	r2, #8
   836fe:	d0f5      	beq.n	836ec <pmc_switch_mck_to_pllack+0x44>
   83700:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   83702:	2001      	movs	r0, #1
   83704:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   83706:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   83708:	4770      	bx	lr
   8370a:	bf00      	nop
   8370c:	400e0600 	.word	0x400e0600

00083710 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83710:	b138      	cbz	r0, 83722 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83712:	4911      	ldr	r1, [pc, #68]	; (83758 <pmc_switch_mainck_to_xtal+0x48>)
   83714:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83716:	4a11      	ldr	r2, [pc, #68]	; (8375c <pmc_switch_mainck_to_xtal+0x4c>)
   83718:	401a      	ands	r2, r3
   8371a:	4b11      	ldr	r3, [pc, #68]	; (83760 <pmc_switch_mainck_to_xtal+0x50>)
   8371c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8371e:	620b      	str	r3, [r1, #32]
   83720:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83722:	480d      	ldr	r0, [pc, #52]	; (83758 <pmc_switch_mainck_to_xtal+0x48>)
   83724:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83726:	0209      	lsls	r1, r1, #8
   83728:	b289      	uxth	r1, r1
   8372a:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   8372e:	f023 0303 	bic.w	r3, r3, #3
   83732:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83736:	f043 0301 	orr.w	r3, r3, #1
   8373a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8373c:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8373e:	4602      	mov	r2, r0
   83740:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83742:	f013 0f01 	tst.w	r3, #1
   83746:	d0fb      	beq.n	83740 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83748:	4a03      	ldr	r2, [pc, #12]	; (83758 <pmc_switch_mainck_to_xtal+0x48>)
   8374a:	6a13      	ldr	r3, [r2, #32]
   8374c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83754:	6213      	str	r3, [r2, #32]
   83756:	4770      	bx	lr
   83758:	400e0600 	.word	0x400e0600
   8375c:	fec8fffc 	.word	0xfec8fffc
   83760:	01370002 	.word	0x01370002

00083764 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83764:	4b02      	ldr	r3, [pc, #8]	; (83770 <pmc_osc_is_ready_mainck+0xc>)
   83766:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83768:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8376c:	4770      	bx	lr
   8376e:	bf00      	nop
   83770:	400e0600 	.word	0x400e0600

00083774 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83774:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83778:	4b01      	ldr	r3, [pc, #4]	; (83780 <pmc_disable_pllack+0xc>)
   8377a:	629a      	str	r2, [r3, #40]	; 0x28
   8377c:	4770      	bx	lr
   8377e:	bf00      	nop
   83780:	400e0600 	.word	0x400e0600

00083784 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83784:	4b02      	ldr	r3, [pc, #8]	; (83790 <pmc_is_locked_pllack+0xc>)
   83786:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83788:	f000 0002 	and.w	r0, r0, #2
   8378c:	4770      	bx	lr
   8378e:	bf00      	nop
   83790:	400e0600 	.word	0x400e0600

00083794 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   83794:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   83798:	4b03      	ldr	r3, [pc, #12]	; (837a8 <pmc_enable_upll_clock+0x14>)
   8379a:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   8379c:	461a      	mov	r2, r3
   8379e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   837a0:	f013 0f40 	tst.w	r3, #64	; 0x40
   837a4:	d0fb      	beq.n	8379e <pmc_enable_upll_clock+0xa>
}
   837a6:	4770      	bx	lr
   837a8:	400e0600 	.word	0x400e0600

000837ac <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   837ac:	282c      	cmp	r0, #44	; 0x2c
   837ae:	d81e      	bhi.n	837ee <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   837b0:	281f      	cmp	r0, #31
   837b2:	d80c      	bhi.n	837ce <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   837b4:	4b11      	ldr	r3, [pc, #68]	; (837fc <pmc_enable_periph_clk+0x50>)
   837b6:	699a      	ldr	r2, [r3, #24]
   837b8:	2301      	movs	r3, #1
   837ba:	4083      	lsls	r3, r0
   837bc:	4393      	bics	r3, r2
   837be:	d018      	beq.n	837f2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   837c0:	2301      	movs	r3, #1
   837c2:	fa03 f000 	lsl.w	r0, r3, r0
   837c6:	4b0d      	ldr	r3, [pc, #52]	; (837fc <pmc_enable_periph_clk+0x50>)
   837c8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   837ca:	2000      	movs	r0, #0
   837cc:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   837ce:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   837d0:	4b0a      	ldr	r3, [pc, #40]	; (837fc <pmc_enable_periph_clk+0x50>)
   837d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   837d6:	2301      	movs	r3, #1
   837d8:	4083      	lsls	r3, r0
   837da:	4393      	bics	r3, r2
   837dc:	d00b      	beq.n	837f6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   837de:	2301      	movs	r3, #1
   837e0:	fa03 f000 	lsl.w	r0, r3, r0
   837e4:	4b05      	ldr	r3, [pc, #20]	; (837fc <pmc_enable_periph_clk+0x50>)
   837e6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   837ea:	2000      	movs	r0, #0
   837ec:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   837ee:	2001      	movs	r0, #1
   837f0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   837f2:	2000      	movs	r0, #0
   837f4:	4770      	bx	lr
   837f6:	2000      	movs	r0, #0
}
   837f8:	4770      	bx	lr
   837fa:	bf00      	nop
   837fc:	400e0600 	.word	0x400e0600

00083800 <pmc_switch_udpck_to_upllck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   83800:	0200      	lsls	r0, r0, #8
   83802:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
   83806:	f040 0001 	orr.w	r0, r0, #1
   8380a:	4b01      	ldr	r3, [pc, #4]	; (83810 <pmc_switch_udpck_to_upllck+0x10>)
   8380c:	6398      	str	r0, [r3, #56]	; 0x38
   8380e:	4770      	bx	lr
   83810:	400e0600 	.word	0x400e0600

00083814 <pmc_enable_udpck>:
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
#else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   83814:	2220      	movs	r2, #32
   83816:	4b01      	ldr	r3, [pc, #4]	; (8381c <pmc_enable_udpck+0x8>)
   83818:	601a      	str	r2, [r3, #0]
   8381a:	4770      	bx	lr
   8381c:	400e0600 	.word	0x400e0600

00083820 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   83820:	4a03      	ldr	r2, [pc, #12]	; (83830 <pmc_set_fast_startup_input+0x10>)
   83822:	6f13      	ldr	r3, [r2, #112]	; 0x70
   83824:	f3c0 0012 	ubfx	r0, r0, #0, #19
   83828:	4303      	orrs	r3, r0
   8382a:	6713      	str	r3, [r2, #112]	; 0x70
   8382c:	4770      	bx	lr
   8382e:	bf00      	nop
   83830:	400e0600 	.word	0x400e0600

00083834 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   83834:	4b02      	ldr	r3, [pc, #8]	; (83840 <pmc_is_wakeup_clocks_restored+0xc>)
   83836:	7818      	ldrb	r0, [r3, #0]
}
   83838:	f080 0001 	eor.w	r0, r0, #1
   8383c:	4770      	bx	lr
   8383e:	bf00      	nop
   83840:	20071424 	.word	0x20071424

00083844 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   83844:	b510      	push	{r4, lr}
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83846:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8384a:	4b1f      	ldr	r3, [pc, #124]	; (838c8 <board_init+0x84>)
   8384c:	605a      	str	r2, [r3, #4]
   8384e:	200b      	movs	r0, #11
   83850:	4c1e      	ldr	r4, [pc, #120]	; (838cc <board_init+0x88>)
   83852:	47a0      	blx	r4
   83854:	200c      	movs	r0, #12
   83856:	47a0      	blx	r4
   83858:	200d      	movs	r0, #13
   8385a:	47a0      	blx	r4
   8385c:	200e      	movs	r0, #14
   8385e:	47a0      	blx	r4
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   83860:	4b1b      	ldr	r3, [pc, #108]	; (838d0 <board_init+0x8c>)
   83862:	4a1c      	ldr	r2, [pc, #112]	; (838d4 <board_init+0x90>)
   83864:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   83866:	21f0      	movs	r1, #240	; 0xf0
   83868:	4a1b      	ldr	r2, [pc, #108]	; (838d8 <board_init+0x94>)
   8386a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   8386e:	2200      	movs	r2, #0
   83870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   83872:	2207      	movs	r2, #7
   83874:	601a      	str	r2, [r3, #0]
	ioport_init();
	SysTick_Config(sysclk_get_cpu_hz() / 1000); 
	
	gpio_configure_pin(PIO_PA10_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   83876:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8387a:	200a      	movs	r0, #10
   8387c:	4c17      	ldr	r4, [pc, #92]	; (838dc <board_init+0x98>)
   8387e:	47a0      	blx	r4
	gpio_configure_pin(PIO_PA11_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   83880:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83884:	200b      	movs	r0, #11
   83886:	47a0      	blx	r4
	
	gpio_configure_pin(PIO_PB11_IDX, PIO_PERIPH_A | PIO_PULLUP);
   83888:	4915      	ldr	r1, [pc, #84]	; (838e0 <board_init+0x9c>)
   8388a:	202b      	movs	r0, #43	; 0x2b
   8388c:	47a0      	blx	r4
	gpio_configure_pin(PIO_PB10_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   8388e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83892:	202a      	movs	r0, #42	; 0x2a
   83894:	47a0      	blx	r4

	gpio_configure_pin(PIO_PA25_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   83896:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8389a:	2019      	movs	r0, #25
   8389c:	47a0      	blx	r4
	gpio_configure_pin(PIO_PA26_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   8389e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   838a2:	201a      	movs	r0, #26
   838a4:	47a0      	blx	r4
	gpio_configure_pin(PIO_PA27_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   838a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   838aa:	201b      	movs	r0, #27
   838ac:	47a0      	blx	r4
	gpio_configure_pin(PIO_PA28_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   838ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   838b2:	201c      	movs	r0, #28
   838b4:	47a0      	blx	r4
	
	gpio_configure_pin(PIO_PB12_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   838b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   838ba:	202c      	movs	r0, #44	; 0x2c
   838bc:	47a0      	blx	r4
	gpio_configure_pin(PIO_PB13_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   838be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   838c2:	202d      	movs	r0, #45	; 0x2d
   838c4:	47a0      	blx	r4
   838c6:	bd10      	pop	{r4, pc}
   838c8:	400e1a50 	.word	0x400e1a50
   838cc:	000837ad 	.word	0x000837ad
   838d0:	e000e010 	.word	0xe000e010
   838d4:	0001481f 	.word	0x0001481f
   838d8:	e000ed00 	.word	0xe000ed00
   838dc:	000835d5 	.word	0x000835d5
   838e0:	08000001 	.word	0x08000001

000838e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   838e4:	e7fe      	b.n	838e4 <Dummy_Handler>
   838e6:	bf00      	nop

000838e8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   838e8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   838ea:	4b1e      	ldr	r3, [pc, #120]	; (83964 <Reset_Handler+0x7c>)
   838ec:	4a1e      	ldr	r2, [pc, #120]	; (83968 <Reset_Handler+0x80>)
   838ee:	429a      	cmp	r2, r3
   838f0:	d003      	beq.n	838fa <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   838f2:	4b1e      	ldr	r3, [pc, #120]	; (8396c <Reset_Handler+0x84>)
   838f4:	4a1b      	ldr	r2, [pc, #108]	; (83964 <Reset_Handler+0x7c>)
   838f6:	429a      	cmp	r2, r3
   838f8:	d304      	bcc.n	83904 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   838fa:	4b1d      	ldr	r3, [pc, #116]	; (83970 <Reset_Handler+0x88>)
   838fc:	4a1d      	ldr	r2, [pc, #116]	; (83974 <Reset_Handler+0x8c>)
   838fe:	429a      	cmp	r2, r3
   83900:	d30f      	bcc.n	83922 <Reset_Handler+0x3a>
   83902:	e01a      	b.n	8393a <Reset_Handler+0x52>
   83904:	4917      	ldr	r1, [pc, #92]	; (83964 <Reset_Handler+0x7c>)
   83906:	4b1c      	ldr	r3, [pc, #112]	; (83978 <Reset_Handler+0x90>)
   83908:	1a5b      	subs	r3, r3, r1
   8390a:	f023 0303 	bic.w	r3, r3, #3
   8390e:	3304      	adds	r3, #4
   83910:	4a15      	ldr	r2, [pc, #84]	; (83968 <Reset_Handler+0x80>)
   83912:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   83914:	f852 0b04 	ldr.w	r0, [r2], #4
   83918:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8391c:	429a      	cmp	r2, r3
   8391e:	d1f9      	bne.n	83914 <Reset_Handler+0x2c>
   83920:	e7eb      	b.n	838fa <Reset_Handler+0x12>
   83922:	4b16      	ldr	r3, [pc, #88]	; (8397c <Reset_Handler+0x94>)
   83924:	4a16      	ldr	r2, [pc, #88]	; (83980 <Reset_Handler+0x98>)
   83926:	1ad2      	subs	r2, r2, r3
   83928:	f022 0203 	bic.w	r2, r2, #3
   8392c:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8392e:	3b04      	subs	r3, #4
		*pDest++ = 0;
   83930:	2100      	movs	r1, #0
   83932:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83936:	4293      	cmp	r3, r2
   83938:	d1fb      	bne.n	83932 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8393a:	4b12      	ldr	r3, [pc, #72]	; (83984 <Reset_Handler+0x9c>)
   8393c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   83940:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   83944:	4910      	ldr	r1, [pc, #64]	; (83988 <Reset_Handler+0xa0>)
   83946:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   83948:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8394c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   83950:	d203      	bcs.n	8395a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83952:	688b      	ldr	r3, [r1, #8]
   83954:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83958:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8395a:	4b0c      	ldr	r3, [pc, #48]	; (8398c <Reset_Handler+0xa4>)
   8395c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8395e:	4b0c      	ldr	r3, [pc, #48]	; (83990 <Reset_Handler+0xa8>)
   83960:	4798      	blx	r3
   83962:	e7fe      	b.n	83962 <Reset_Handler+0x7a>
   83964:	20070000 	.word	0x20070000
   83968:	00084028 	.word	0x00084028
   8396c:	200706a8 	.word	0x200706a8
   83970:	2007169c 	.word	0x2007169c
   83974:	200706a8 	.word	0x200706a8
   83978:	200706a7 	.word	0x200706a7
   8397c:	200706ac 	.word	0x200706ac
   83980:	2007169f 	.word	0x2007169f
   83984:	00080000 	.word	0x00080000
   83988:	e000ed00 	.word	0xe000ed00
   8398c:	00083b2d 	.word	0x00083b2d
   83990:	00083ab1 	.word	0x00083ab1

00083994 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83994:	4b3e      	ldr	r3, [pc, #248]	; (83a90 <SystemCoreClockUpdate+0xfc>)
   83996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83998:	f003 0303 	and.w	r3, r3, #3
   8399c:	2b03      	cmp	r3, #3
   8399e:	d85f      	bhi.n	83a60 <SystemCoreClockUpdate+0xcc>
   839a0:	e8df f003 	tbb	[pc, r3]
   839a4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   839a8:	4b3a      	ldr	r3, [pc, #232]	; (83a94 <SystemCoreClockUpdate+0x100>)
   839aa:	695b      	ldr	r3, [r3, #20]
   839ac:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   839b0:	bf14      	ite	ne
   839b2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   839b6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   839ba:	4b37      	ldr	r3, [pc, #220]	; (83a98 <SystemCoreClockUpdate+0x104>)
   839bc:	601a      	str	r2, [r3, #0]
   839be:	e04f      	b.n	83a60 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   839c0:	4b33      	ldr	r3, [pc, #204]	; (83a90 <SystemCoreClockUpdate+0xfc>)
   839c2:	6a1b      	ldr	r3, [r3, #32]
   839c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   839c8:	d003      	beq.n	839d2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   839ca:	4a34      	ldr	r2, [pc, #208]	; (83a9c <SystemCoreClockUpdate+0x108>)
   839cc:	4b32      	ldr	r3, [pc, #200]	; (83a98 <SystemCoreClockUpdate+0x104>)
   839ce:	601a      	str	r2, [r3, #0]
   839d0:	e046      	b.n	83a60 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   839d2:	4a33      	ldr	r2, [pc, #204]	; (83aa0 <SystemCoreClockUpdate+0x10c>)
   839d4:	4b30      	ldr	r3, [pc, #192]	; (83a98 <SystemCoreClockUpdate+0x104>)
   839d6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   839d8:	4b2d      	ldr	r3, [pc, #180]	; (83a90 <SystemCoreClockUpdate+0xfc>)
   839da:	6a1b      	ldr	r3, [r3, #32]
   839dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   839e0:	2b10      	cmp	r3, #16
   839e2:	d002      	beq.n	839ea <SystemCoreClockUpdate+0x56>
   839e4:	2b20      	cmp	r3, #32
   839e6:	d004      	beq.n	839f2 <SystemCoreClockUpdate+0x5e>
   839e8:	e03a      	b.n	83a60 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   839ea:	4a2e      	ldr	r2, [pc, #184]	; (83aa4 <SystemCoreClockUpdate+0x110>)
   839ec:	4b2a      	ldr	r3, [pc, #168]	; (83a98 <SystemCoreClockUpdate+0x104>)
   839ee:	601a      	str	r2, [r3, #0]
				break;
   839f0:	e036      	b.n	83a60 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   839f2:	4a2a      	ldr	r2, [pc, #168]	; (83a9c <SystemCoreClockUpdate+0x108>)
   839f4:	4b28      	ldr	r3, [pc, #160]	; (83a98 <SystemCoreClockUpdate+0x104>)
   839f6:	601a      	str	r2, [r3, #0]
				break;
   839f8:	e032      	b.n	83a60 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   839fa:	4b25      	ldr	r3, [pc, #148]	; (83a90 <SystemCoreClockUpdate+0xfc>)
   839fc:	6a1b      	ldr	r3, [r3, #32]
   839fe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   83a02:	d003      	beq.n	83a0c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83a04:	4a25      	ldr	r2, [pc, #148]	; (83a9c <SystemCoreClockUpdate+0x108>)
   83a06:	4b24      	ldr	r3, [pc, #144]	; (83a98 <SystemCoreClockUpdate+0x104>)
   83a08:	601a      	str	r2, [r3, #0]
   83a0a:	e012      	b.n	83a32 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83a0c:	4a24      	ldr	r2, [pc, #144]	; (83aa0 <SystemCoreClockUpdate+0x10c>)
   83a0e:	4b22      	ldr	r3, [pc, #136]	; (83a98 <SystemCoreClockUpdate+0x104>)
   83a10:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83a12:	4b1f      	ldr	r3, [pc, #124]	; (83a90 <SystemCoreClockUpdate+0xfc>)
   83a14:	6a1b      	ldr	r3, [r3, #32]
   83a16:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83a1a:	2b10      	cmp	r3, #16
   83a1c:	d002      	beq.n	83a24 <SystemCoreClockUpdate+0x90>
   83a1e:	2b20      	cmp	r3, #32
   83a20:	d004      	beq.n	83a2c <SystemCoreClockUpdate+0x98>
   83a22:	e006      	b.n	83a32 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83a24:	4a1f      	ldr	r2, [pc, #124]	; (83aa4 <SystemCoreClockUpdate+0x110>)
   83a26:	4b1c      	ldr	r3, [pc, #112]	; (83a98 <SystemCoreClockUpdate+0x104>)
   83a28:	601a      	str	r2, [r3, #0]
				break;
   83a2a:	e002      	b.n	83a32 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83a2c:	4a1b      	ldr	r2, [pc, #108]	; (83a9c <SystemCoreClockUpdate+0x108>)
   83a2e:	4b1a      	ldr	r3, [pc, #104]	; (83a98 <SystemCoreClockUpdate+0x104>)
   83a30:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83a32:	4b17      	ldr	r3, [pc, #92]	; (83a90 <SystemCoreClockUpdate+0xfc>)
   83a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83a36:	f003 0303 	and.w	r3, r3, #3
   83a3a:	2b02      	cmp	r3, #2
   83a3c:	d10d      	bne.n	83a5a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83a3e:	4a14      	ldr	r2, [pc, #80]	; (83a90 <SystemCoreClockUpdate+0xfc>)
   83a40:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83a42:	6a92      	ldr	r2, [r2, #40]	; 0x28
   83a44:	4814      	ldr	r0, [pc, #80]	; (83a98 <SystemCoreClockUpdate+0x104>)
   83a46:	f3c3 410a 	ubfx	r1, r3, #16, #11
   83a4a:	6803      	ldr	r3, [r0, #0]
   83a4c:	fb01 3303 	mla	r3, r1, r3, r3
   83a50:	b2d2      	uxtb	r2, r2
   83a52:	fbb3 f3f2 	udiv	r3, r3, r2
   83a56:	6003      	str	r3, [r0, #0]
   83a58:	e002      	b.n	83a60 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83a5a:	4a13      	ldr	r2, [pc, #76]	; (83aa8 <SystemCoreClockUpdate+0x114>)
   83a5c:	4b0e      	ldr	r3, [pc, #56]	; (83a98 <SystemCoreClockUpdate+0x104>)
   83a5e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83a60:	4b0b      	ldr	r3, [pc, #44]	; (83a90 <SystemCoreClockUpdate+0xfc>)
   83a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83a64:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83a68:	2b70      	cmp	r3, #112	; 0x70
   83a6a:	d107      	bne.n	83a7c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   83a6c:	4a0a      	ldr	r2, [pc, #40]	; (83a98 <SystemCoreClockUpdate+0x104>)
   83a6e:	6813      	ldr	r3, [r2, #0]
   83a70:	490e      	ldr	r1, [pc, #56]	; (83aac <SystemCoreClockUpdate+0x118>)
   83a72:	fba1 1303 	umull	r1, r3, r1, r3
   83a76:	085b      	lsrs	r3, r3, #1
   83a78:	6013      	str	r3, [r2, #0]
   83a7a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83a7c:	4b04      	ldr	r3, [pc, #16]	; (83a90 <SystemCoreClockUpdate+0xfc>)
   83a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83a80:	4905      	ldr	r1, [pc, #20]	; (83a98 <SystemCoreClockUpdate+0x104>)
   83a82:	f3c3 1202 	ubfx	r2, r3, #4, #3
   83a86:	680b      	ldr	r3, [r1, #0]
   83a88:	40d3      	lsrs	r3, r2
   83a8a:	600b      	str	r3, [r1, #0]
   83a8c:	4770      	bx	lr
   83a8e:	bf00      	nop
   83a90:	400e0600 	.word	0x400e0600
   83a94:	400e1a10 	.word	0x400e1a10
   83a98:	20070278 	.word	0x20070278
   83a9c:	00b71b00 	.word	0x00b71b00
   83aa0:	003d0900 	.word	0x003d0900
   83aa4:	007a1200 	.word	0x007a1200
   83aa8:	0e4e1c00 	.word	0x0e4e1c00
   83aac:	aaaaaaab 	.word	0xaaaaaaab

00083ab0 <main>:
#include "main.h"
#include "iic_sam.h"


int main (void)
{
   83ab0:	b508      	push	{r3, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
   83ab2:	2101      	movs	r1, #1
   83ab4:	4b0b      	ldr	r3, [pc, #44]	; (83ae4 <main+0x34>)
   83ab6:	7019      	strb	r1, [r3, #0]
   83ab8:	f3bf 8f5f 	dmb	sy
   83abc:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   83abe:	4b0a      	ldr	r3, [pc, #40]	; (83ae8 <main+0x38>)
   83ac0:	2200      	movs	r2, #0
   83ac2:	701a      	strb	r2, [r3, #0]
   83ac4:	705a      	strb	r2, [r3, #1]
   83ac6:	709a      	strb	r2, [r3, #2]
   83ac8:	70da      	strb	r2, [r3, #3]
   83aca:	711a      	strb	r2, [r3, #4]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   83acc:	7159      	strb	r1, [r3, #5]
	sleepmgr_init();

	sysclk_init();
   83ace:	4b07      	ldr	r3, [pc, #28]	; (83aec <main+0x3c>)
   83ad0:	4798      	blx	r3
	board_init();
   83ad2:	4b07      	ldr	r3, [pc, #28]	; (83af0 <main+0x40>)
   83ad4:	4798      	blx	r3
	spi_config();
   83ad6:	4b07      	ldr	r3, [pc, #28]	; (83af4 <main+0x44>)
   83ad8:	4798      	blx	r3
	iic_init();
   83ada:	4b07      	ldr	r3, [pc, #28]	; (83af8 <main+0x48>)
   83adc:	4798      	blx	r3
	udc_start();
   83ade:	4b07      	ldr	r3, [pc, #28]	; (83afc <main+0x4c>)
   83ae0:	4798      	blx	r3
   83ae2:	e7fe      	b.n	83ae2 <main+0x32>
   83ae4:	20070277 	.word	0x20070277
   83ae8:	2007167c 	.word	0x2007167c
   83aec:	000834cd 	.word	0x000834cd
   83af0:	00083845 	.word	0x00083845
   83af4:	000808dd 	.word	0x000808dd
   83af8:	00080485 	.word	0x00080485
   83afc:	0008183d 	.word	0x0008183d

00083b00 <cdc_enable>:
	}
}


bool cdc_enable()
{
   83b00:	b508      	push	{r3, lr}
	usart_open();
   83b02:	4b02      	ldr	r3, [pc, #8]	; (83b0c <cdc_enable+0xc>)
   83b04:	4798      	blx	r3
	return true;
}
   83b06:	2001      	movs	r0, #1
   83b08:	bd08      	pop	{r3, pc}
   83b0a:	bf00      	nop
   83b0c:	00080c41 	.word	0x00080c41

00083b10 <cdc_disable>:

void cdc_disable()
{
   83b10:	b508      	push	{r3, lr}
	usart_close();
   83b12:	4b01      	ldr	r3, [pc, #4]	; (83b18 <cdc_disable+0x8>)
   83b14:	4798      	blx	r3
   83b16:	bd08      	pop	{r3, pc}
   83b18:	00080ca1 	.word	0x00080ca1

00083b1c <main_sof_action>:
}

void main_sof_action(void)
{
   83b1c:	4770      	bx	lr
   83b1e:	bf00      	nop

00083b20 <main_cdc_set_dtr>:

}

void main_cdc_set_dtr(bool b_enable)
{
   83b20:	4770      	bx	lr
   83b22:	bf00      	nop

00083b24 <main_suspend_action>:
	
}

void main_suspend_action(void)
{
   83b24:	4770      	bx	lr
   83b26:	bf00      	nop

00083b28 <main_resume_action>:
	
}

void main_resume_action(void)
{
   83b28:	4770      	bx	lr
   83b2a:	bf00      	nop

00083b2c <__libc_init_array>:
   83b2c:	b570      	push	{r4, r5, r6, lr}
   83b2e:	4e0f      	ldr	r6, [pc, #60]	; (83b6c <__libc_init_array+0x40>)
   83b30:	4d0f      	ldr	r5, [pc, #60]	; (83b70 <__libc_init_array+0x44>)
   83b32:	1b76      	subs	r6, r6, r5
   83b34:	10b6      	asrs	r6, r6, #2
   83b36:	bf18      	it	ne
   83b38:	2400      	movne	r4, #0
   83b3a:	d005      	beq.n	83b48 <__libc_init_array+0x1c>
   83b3c:	3401      	adds	r4, #1
   83b3e:	f855 3b04 	ldr.w	r3, [r5], #4
   83b42:	4798      	blx	r3
   83b44:	42a6      	cmp	r6, r4
   83b46:	d1f9      	bne.n	83b3c <__libc_init_array+0x10>
   83b48:	4e0a      	ldr	r6, [pc, #40]	; (83b74 <__libc_init_array+0x48>)
   83b4a:	4d0b      	ldr	r5, [pc, #44]	; (83b78 <__libc_init_array+0x4c>)
   83b4c:	f000 fa5a 	bl	84004 <_init>
   83b50:	1b76      	subs	r6, r6, r5
   83b52:	10b6      	asrs	r6, r6, #2
   83b54:	bf18      	it	ne
   83b56:	2400      	movne	r4, #0
   83b58:	d006      	beq.n	83b68 <__libc_init_array+0x3c>
   83b5a:	3401      	adds	r4, #1
   83b5c:	f855 3b04 	ldr.w	r3, [r5], #4
   83b60:	4798      	blx	r3
   83b62:	42a6      	cmp	r6, r4
   83b64:	d1f9      	bne.n	83b5a <__libc_init_array+0x2e>
   83b66:	bd70      	pop	{r4, r5, r6, pc}
   83b68:	bd70      	pop	{r4, r5, r6, pc}
   83b6a:	bf00      	nop
   83b6c:	00084010 	.word	0x00084010
   83b70:	00084010 	.word	0x00084010
   83b74:	00084018 	.word	0x00084018
   83b78:	00084010 	.word	0x00084010

00083b7c <memcpy>:
   83b7c:	4684      	mov	ip, r0
   83b7e:	ea41 0300 	orr.w	r3, r1, r0
   83b82:	f013 0303 	ands.w	r3, r3, #3
   83b86:	d149      	bne.n	83c1c <memcpy+0xa0>
   83b88:	3a40      	subs	r2, #64	; 0x40
   83b8a:	d323      	bcc.n	83bd4 <memcpy+0x58>
   83b8c:	680b      	ldr	r3, [r1, #0]
   83b8e:	6003      	str	r3, [r0, #0]
   83b90:	684b      	ldr	r3, [r1, #4]
   83b92:	6043      	str	r3, [r0, #4]
   83b94:	688b      	ldr	r3, [r1, #8]
   83b96:	6083      	str	r3, [r0, #8]
   83b98:	68cb      	ldr	r3, [r1, #12]
   83b9a:	60c3      	str	r3, [r0, #12]
   83b9c:	690b      	ldr	r3, [r1, #16]
   83b9e:	6103      	str	r3, [r0, #16]
   83ba0:	694b      	ldr	r3, [r1, #20]
   83ba2:	6143      	str	r3, [r0, #20]
   83ba4:	698b      	ldr	r3, [r1, #24]
   83ba6:	6183      	str	r3, [r0, #24]
   83ba8:	69cb      	ldr	r3, [r1, #28]
   83baa:	61c3      	str	r3, [r0, #28]
   83bac:	6a0b      	ldr	r3, [r1, #32]
   83bae:	6203      	str	r3, [r0, #32]
   83bb0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83bb2:	6243      	str	r3, [r0, #36]	; 0x24
   83bb4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83bb6:	6283      	str	r3, [r0, #40]	; 0x28
   83bb8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83bba:	62c3      	str	r3, [r0, #44]	; 0x2c
   83bbc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83bbe:	6303      	str	r3, [r0, #48]	; 0x30
   83bc0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83bc2:	6343      	str	r3, [r0, #52]	; 0x34
   83bc4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83bc6:	6383      	str	r3, [r0, #56]	; 0x38
   83bc8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83bca:	63c3      	str	r3, [r0, #60]	; 0x3c
   83bcc:	3040      	adds	r0, #64	; 0x40
   83bce:	3140      	adds	r1, #64	; 0x40
   83bd0:	3a40      	subs	r2, #64	; 0x40
   83bd2:	d2db      	bcs.n	83b8c <memcpy+0x10>
   83bd4:	3230      	adds	r2, #48	; 0x30
   83bd6:	d30b      	bcc.n	83bf0 <memcpy+0x74>
   83bd8:	680b      	ldr	r3, [r1, #0]
   83bda:	6003      	str	r3, [r0, #0]
   83bdc:	684b      	ldr	r3, [r1, #4]
   83bde:	6043      	str	r3, [r0, #4]
   83be0:	688b      	ldr	r3, [r1, #8]
   83be2:	6083      	str	r3, [r0, #8]
   83be4:	68cb      	ldr	r3, [r1, #12]
   83be6:	60c3      	str	r3, [r0, #12]
   83be8:	3010      	adds	r0, #16
   83bea:	3110      	adds	r1, #16
   83bec:	3a10      	subs	r2, #16
   83bee:	d2f3      	bcs.n	83bd8 <memcpy+0x5c>
   83bf0:	320c      	adds	r2, #12
   83bf2:	d305      	bcc.n	83c00 <memcpy+0x84>
   83bf4:	f851 3b04 	ldr.w	r3, [r1], #4
   83bf8:	f840 3b04 	str.w	r3, [r0], #4
   83bfc:	3a04      	subs	r2, #4
   83bfe:	d2f9      	bcs.n	83bf4 <memcpy+0x78>
   83c00:	3204      	adds	r2, #4
   83c02:	d008      	beq.n	83c16 <memcpy+0x9a>
   83c04:	07d2      	lsls	r2, r2, #31
   83c06:	bf1c      	itt	ne
   83c08:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83c0c:	f800 3b01 	strbne.w	r3, [r0], #1
   83c10:	d301      	bcc.n	83c16 <memcpy+0x9a>
   83c12:	880b      	ldrh	r3, [r1, #0]
   83c14:	8003      	strh	r3, [r0, #0]
   83c16:	4660      	mov	r0, ip
   83c18:	4770      	bx	lr
   83c1a:	bf00      	nop
   83c1c:	2a08      	cmp	r2, #8
   83c1e:	d313      	bcc.n	83c48 <memcpy+0xcc>
   83c20:	078b      	lsls	r3, r1, #30
   83c22:	d0b1      	beq.n	83b88 <memcpy+0xc>
   83c24:	f010 0303 	ands.w	r3, r0, #3
   83c28:	d0ae      	beq.n	83b88 <memcpy+0xc>
   83c2a:	f1c3 0304 	rsb	r3, r3, #4
   83c2e:	1ad2      	subs	r2, r2, r3
   83c30:	07db      	lsls	r3, r3, #31
   83c32:	bf1c      	itt	ne
   83c34:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83c38:	f800 3b01 	strbne.w	r3, [r0], #1
   83c3c:	d3a4      	bcc.n	83b88 <memcpy+0xc>
   83c3e:	f831 3b02 	ldrh.w	r3, [r1], #2
   83c42:	f820 3b02 	strh.w	r3, [r0], #2
   83c46:	e79f      	b.n	83b88 <memcpy+0xc>
   83c48:	3a04      	subs	r2, #4
   83c4a:	d3d9      	bcc.n	83c00 <memcpy+0x84>
   83c4c:	3a01      	subs	r2, #1
   83c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83c52:	f800 3b01 	strb.w	r3, [r0], #1
   83c56:	d2f9      	bcs.n	83c4c <memcpy+0xd0>
   83c58:	780b      	ldrb	r3, [r1, #0]
   83c5a:	7003      	strb	r3, [r0, #0]
   83c5c:	784b      	ldrb	r3, [r1, #1]
   83c5e:	7043      	strb	r3, [r0, #1]
   83c60:	788b      	ldrb	r3, [r1, #2]
   83c62:	7083      	strb	r3, [r0, #2]
   83c64:	4660      	mov	r0, ip
   83c66:	4770      	bx	lr

00083c68 <memset>:
   83c68:	b470      	push	{r4, r5, r6}
   83c6a:	0784      	lsls	r4, r0, #30
   83c6c:	d046      	beq.n	83cfc <memset+0x94>
   83c6e:	1e54      	subs	r4, r2, #1
   83c70:	2a00      	cmp	r2, #0
   83c72:	d041      	beq.n	83cf8 <memset+0x90>
   83c74:	b2cd      	uxtb	r5, r1
   83c76:	4603      	mov	r3, r0
   83c78:	e002      	b.n	83c80 <memset+0x18>
   83c7a:	1e62      	subs	r2, r4, #1
   83c7c:	b3e4      	cbz	r4, 83cf8 <memset+0x90>
   83c7e:	4614      	mov	r4, r2
   83c80:	f803 5b01 	strb.w	r5, [r3], #1
   83c84:	079a      	lsls	r2, r3, #30
   83c86:	d1f8      	bne.n	83c7a <memset+0x12>
   83c88:	2c03      	cmp	r4, #3
   83c8a:	d92e      	bls.n	83cea <memset+0x82>
   83c8c:	b2cd      	uxtb	r5, r1
   83c8e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83c92:	2c0f      	cmp	r4, #15
   83c94:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83c98:	d919      	bls.n	83cce <memset+0x66>
   83c9a:	4626      	mov	r6, r4
   83c9c:	f103 0210 	add.w	r2, r3, #16
   83ca0:	3e10      	subs	r6, #16
   83ca2:	2e0f      	cmp	r6, #15
   83ca4:	f842 5c10 	str.w	r5, [r2, #-16]
   83ca8:	f842 5c0c 	str.w	r5, [r2, #-12]
   83cac:	f842 5c08 	str.w	r5, [r2, #-8]
   83cb0:	f842 5c04 	str.w	r5, [r2, #-4]
   83cb4:	f102 0210 	add.w	r2, r2, #16
   83cb8:	d8f2      	bhi.n	83ca0 <memset+0x38>
   83cba:	f1a4 0210 	sub.w	r2, r4, #16
   83cbe:	f022 020f 	bic.w	r2, r2, #15
   83cc2:	f004 040f 	and.w	r4, r4, #15
   83cc6:	3210      	adds	r2, #16
   83cc8:	2c03      	cmp	r4, #3
   83cca:	4413      	add	r3, r2
   83ccc:	d90d      	bls.n	83cea <memset+0x82>
   83cce:	461e      	mov	r6, r3
   83cd0:	4622      	mov	r2, r4
   83cd2:	3a04      	subs	r2, #4
   83cd4:	2a03      	cmp	r2, #3
   83cd6:	f846 5b04 	str.w	r5, [r6], #4
   83cda:	d8fa      	bhi.n	83cd2 <memset+0x6a>
   83cdc:	1f22      	subs	r2, r4, #4
   83cde:	f022 0203 	bic.w	r2, r2, #3
   83ce2:	3204      	adds	r2, #4
   83ce4:	4413      	add	r3, r2
   83ce6:	f004 0403 	and.w	r4, r4, #3
   83cea:	b12c      	cbz	r4, 83cf8 <memset+0x90>
   83cec:	b2c9      	uxtb	r1, r1
   83cee:	441c      	add	r4, r3
   83cf0:	f803 1b01 	strb.w	r1, [r3], #1
   83cf4:	42a3      	cmp	r3, r4
   83cf6:	d1fb      	bne.n	83cf0 <memset+0x88>
   83cf8:	bc70      	pop	{r4, r5, r6}
   83cfa:	4770      	bx	lr
   83cfc:	4614      	mov	r4, r2
   83cfe:	4603      	mov	r3, r0
   83d00:	e7c2      	b.n	83c88 <memset+0x20>
   83d02:	bf00      	nop

00083d04 <strcmp>:
   83d04:	ea80 0c01 	eor.w	ip, r0, r1
   83d08:	f01c 0f03 	tst.w	ip, #3
   83d0c:	d137      	bne.n	83d7e <strcmp+0x7a>
   83d0e:	f010 0c03 	ands.w	ip, r0, #3
   83d12:	f020 0003 	bic.w	r0, r0, #3
   83d16:	f021 0103 	bic.w	r1, r1, #3
   83d1a:	f850 2b04 	ldr.w	r2, [r0], #4
   83d1e:	bf08      	it	eq
   83d20:	f851 3b04 	ldreq.w	r3, [r1], #4
   83d24:	d00e      	beq.n	83d44 <strcmp+0x40>
   83d26:	f08c 0c03 	eor.w	ip, ip, #3
   83d2a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   83d2e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83d32:	fa23 fc0c 	lsr.w	ip, r3, ip
   83d36:	f851 3b04 	ldr.w	r3, [r1], #4
   83d3a:	ea42 020c 	orr.w	r2, r2, ip
   83d3e:	ea43 030c 	orr.w	r3, r3, ip
   83d42:	bf00      	nop
   83d44:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
   83d48:	429a      	cmp	r2, r3
   83d4a:	bf01      	itttt	eq
   83d4c:	ea2c 0c02 	biceq.w	ip, ip, r2
   83d50:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
   83d54:	f850 2b04 	ldreq.w	r2, [r0], #4
   83d58:	f851 3b04 	ldreq.w	r3, [r1], #4
   83d5c:	d0f2      	beq.n	83d44 <strcmp+0x40>
   83d5e:	ea4f 6002 	mov.w	r0, r2, lsl #24
   83d62:	ea4f 2212 	mov.w	r2, r2, lsr #8
   83d66:	2801      	cmp	r0, #1
   83d68:	bf28      	it	cs
   83d6a:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
   83d6e:	bf08      	it	eq
   83d70:	0a1b      	lsreq	r3, r3, #8
   83d72:	d0f4      	beq.n	83d5e <strcmp+0x5a>
   83d74:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   83d78:	0e00      	lsrs	r0, r0, #24
   83d7a:	1ac0      	subs	r0, r0, r3
   83d7c:	4770      	bx	lr
   83d7e:	f010 0f03 	tst.w	r0, #3
   83d82:	d00a      	beq.n	83d9a <strcmp+0x96>
   83d84:	f810 2b01 	ldrb.w	r2, [r0], #1
   83d88:	f811 3b01 	ldrb.w	r3, [r1], #1
   83d8c:	2a01      	cmp	r2, #1
   83d8e:	bf28      	it	cs
   83d90:	429a      	cmpcs	r2, r3
   83d92:	d0f4      	beq.n	83d7e <strcmp+0x7a>
   83d94:	eba2 0003 	sub.w	r0, r2, r3
   83d98:	4770      	bx	lr
   83d9a:	f84d 5d04 	str.w	r5, [sp, #-4]!
   83d9e:	f850 2b04 	ldr.w	r2, [r0], #4
   83da2:	f001 0503 	and.w	r5, r1, #3
   83da6:	f021 0103 	bic.w	r1, r1, #3
   83daa:	f851 3b04 	ldr.w	r3, [r1], #4
   83dae:	2d02      	cmp	r5, #2
   83db0:	d026      	beq.n	83e00 <strcmp+0xfc>
   83db2:	d84d      	bhi.n	83e50 <strcmp+0x14c>
   83db4:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
   83db8:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
   83dbc:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
   83dc0:	ea2c 0c02 	bic.w	ip, ip, r2
   83dc4:	d10d      	bne.n	83de2 <strcmp+0xde>
   83dc6:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
   83dca:	bf08      	it	eq
   83dcc:	f851 3b04 	ldreq.w	r3, [r1], #4
   83dd0:	d10a      	bne.n	83de8 <strcmp+0xe4>
   83dd2:	ea85 0502 	eor.w	r5, r5, r2
   83dd6:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
   83dda:	d10c      	bne.n	83df6 <strcmp+0xf2>
   83ddc:	f850 2b04 	ldr.w	r2, [r0], #4
   83de0:	e7e8      	b.n	83db4 <strcmp+0xb0>
   83de2:	ea4f 2313 	mov.w	r3, r3, lsr #8
   83de6:	e05b      	b.n	83ea0 <strcmp+0x19c>
   83de8:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
   83dec:	d154      	bne.n	83e98 <strcmp+0x194>
   83dee:	780b      	ldrb	r3, [r1, #0]
   83df0:	ea4f 6512 	mov.w	r5, r2, lsr #24
   83df4:	e054      	b.n	83ea0 <strcmp+0x19c>
   83df6:	ea4f 6512 	mov.w	r5, r2, lsr #24
   83dfa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   83dfe:	e04f      	b.n	83ea0 <strcmp+0x19c>
   83e00:	ea4f 4502 	mov.w	r5, r2, lsl #16
   83e04:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
   83e08:	ea4f 4515 	mov.w	r5, r5, lsr #16
   83e0c:	ea2c 0c02 	bic.w	ip, ip, r2
   83e10:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
   83e14:	d118      	bne.n	83e48 <strcmp+0x144>
   83e16:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
   83e1a:	bf08      	it	eq
   83e1c:	f851 3b04 	ldreq.w	r3, [r1], #4
   83e20:	d107      	bne.n	83e32 <strcmp+0x12e>
   83e22:	ea85 0502 	eor.w	r5, r5, r2
   83e26:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
   83e2a:	d109      	bne.n	83e40 <strcmp+0x13c>
   83e2c:	f850 2b04 	ldr.w	r2, [r0], #4
   83e30:	e7e6      	b.n	83e00 <strcmp+0xfc>
   83e32:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
   83e36:	d12f      	bne.n	83e98 <strcmp+0x194>
   83e38:	880b      	ldrh	r3, [r1, #0]
   83e3a:	ea4f 4512 	mov.w	r5, r2, lsr #16
   83e3e:	e02f      	b.n	83ea0 <strcmp+0x19c>
   83e40:	ea4f 4303 	mov.w	r3, r3, lsl #16
   83e44:	ea4f 4512 	mov.w	r5, r2, lsr #16
   83e48:	ea4f 4313 	mov.w	r3, r3, lsr #16
   83e4c:	e028      	b.n	83ea0 <strcmp+0x19c>
   83e4e:	bf00      	nop
   83e50:	f002 05ff 	and.w	r5, r2, #255	; 0xff
   83e54:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
   83e58:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
   83e5c:	ea2c 0c02 	bic.w	ip, ip, r2
   83e60:	d10d      	bne.n	83e7e <strcmp+0x17a>
   83e62:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
   83e66:	bf08      	it	eq
   83e68:	f851 3b04 	ldreq.w	r3, [r1], #4
   83e6c:	d10a      	bne.n	83e84 <strcmp+0x180>
   83e6e:	ea85 0502 	eor.w	r5, r5, r2
   83e72:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
   83e76:	d10a      	bne.n	83e8e <strcmp+0x18a>
   83e78:	f850 2b04 	ldr.w	r2, [r0], #4
   83e7c:	e7e8      	b.n	83e50 <strcmp+0x14c>
   83e7e:	ea4f 6313 	mov.w	r3, r3, lsr #24
   83e82:	e00d      	b.n	83ea0 <strcmp+0x19c>
   83e84:	f012 0fff 	tst.w	r2, #255	; 0xff
   83e88:	d006      	beq.n	83e98 <strcmp+0x194>
   83e8a:	f851 3b04 	ldr.w	r3, [r1], #4
   83e8e:	ea4f 2512 	mov.w	r5, r2, lsr #8
   83e92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   83e96:	e003      	b.n	83ea0 <strcmp+0x19c>
   83e98:	f04f 0000 	mov.w	r0, #0
   83e9c:	bc20      	pop	{r5}
   83e9e:	4770      	bx	lr
   83ea0:	f005 02ff 	and.w	r2, r5, #255	; 0xff
   83ea4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   83ea8:	2801      	cmp	r0, #1
   83eaa:	bf28      	it	cs
   83eac:	4290      	cmpcs	r0, r2
   83eae:	bf04      	itt	eq
   83eb0:	0a2d      	lsreq	r5, r5, #8
   83eb2:	0a1b      	lsreq	r3, r3, #8
   83eb4:	d0f4      	beq.n	83ea0 <strcmp+0x19c>
   83eb6:	eba2 0000 	sub.w	r0, r2, r0
   83eba:	bc20      	pop	{r5}
   83ebc:	4770      	bx	lr
   83ebe:	bf00      	nop

00083ec0 <register_fini>:
   83ec0:	4b02      	ldr	r3, [pc, #8]	; (83ecc <register_fini+0xc>)
   83ec2:	b113      	cbz	r3, 83eca <register_fini+0xa>
   83ec4:	4802      	ldr	r0, [pc, #8]	; (83ed0 <register_fini+0x10>)
   83ec6:	f000 b805 	b.w	83ed4 <atexit>
   83eca:	4770      	bx	lr
   83ecc:	00000000 	.word	0x00000000
   83ed0:	00083ee1 	.word	0x00083ee1

00083ed4 <atexit>:
   83ed4:	2300      	movs	r3, #0
   83ed6:	4601      	mov	r1, r0
   83ed8:	461a      	mov	r2, r3
   83eda:	4618      	mov	r0, r3
   83edc:	f000 b814 	b.w	83f08 <__register_exitproc>

00083ee0 <__libc_fini_array>:
   83ee0:	b538      	push	{r3, r4, r5, lr}
   83ee2:	4d07      	ldr	r5, [pc, #28]	; (83f00 <__libc_fini_array+0x20>)
   83ee4:	4c07      	ldr	r4, [pc, #28]	; (83f04 <__libc_fini_array+0x24>)
   83ee6:	1b2c      	subs	r4, r5, r4
   83ee8:	10a4      	asrs	r4, r4, #2
   83eea:	d005      	beq.n	83ef8 <__libc_fini_array+0x18>
   83eec:	3c01      	subs	r4, #1
   83eee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83ef2:	4798      	blx	r3
   83ef4:	2c00      	cmp	r4, #0
   83ef6:	d1f9      	bne.n	83eec <__libc_fini_array+0xc>
   83ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83efc:	f000 b88c 	b.w	84018 <_fini>
   83f00:	00084028 	.word	0x00084028
   83f04:	00084024 	.word	0x00084024

00083f08 <__register_exitproc>:
   83f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83f0c:	4c25      	ldr	r4, [pc, #148]	; (83fa4 <__register_exitproc+0x9c>)
   83f0e:	4606      	mov	r6, r0
   83f10:	6825      	ldr	r5, [r4, #0]
   83f12:	4688      	mov	r8, r1
   83f14:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   83f18:	4692      	mov	sl, r2
   83f1a:	4699      	mov	r9, r3
   83f1c:	b3c4      	cbz	r4, 83f90 <__register_exitproc+0x88>
   83f1e:	6860      	ldr	r0, [r4, #4]
   83f20:	281f      	cmp	r0, #31
   83f22:	dc17      	bgt.n	83f54 <__register_exitproc+0x4c>
   83f24:	1c41      	adds	r1, r0, #1
   83f26:	b176      	cbz	r6, 83f46 <__register_exitproc+0x3e>
   83f28:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   83f2c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   83f30:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   83f34:	2201      	movs	r2, #1
   83f36:	4082      	lsls	r2, r0
   83f38:	4315      	orrs	r5, r2
   83f3a:	2e02      	cmp	r6, #2
   83f3c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   83f40:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   83f44:	d01e      	beq.n	83f84 <__register_exitproc+0x7c>
   83f46:	1c83      	adds	r3, r0, #2
   83f48:	6061      	str	r1, [r4, #4]
   83f4a:	2000      	movs	r0, #0
   83f4c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   83f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83f54:	4b14      	ldr	r3, [pc, #80]	; (83fa8 <__register_exitproc+0xa0>)
   83f56:	b303      	cbz	r3, 83f9a <__register_exitproc+0x92>
   83f58:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83f5c:	f3af 8000 	nop.w
   83f60:	4604      	mov	r4, r0
   83f62:	b1d0      	cbz	r0, 83f9a <__register_exitproc+0x92>
   83f64:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   83f68:	2700      	movs	r7, #0
   83f6a:	e884 0088 	stmia.w	r4, {r3, r7}
   83f6e:	4638      	mov	r0, r7
   83f70:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83f74:	2101      	movs	r1, #1
   83f76:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   83f7a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   83f7e:	2e00      	cmp	r6, #0
   83f80:	d0e1      	beq.n	83f46 <__register_exitproc+0x3e>
   83f82:	e7d1      	b.n	83f28 <__register_exitproc+0x20>
   83f84:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83f88:	431a      	orrs	r2, r3
   83f8a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   83f8e:	e7da      	b.n	83f46 <__register_exitproc+0x3e>
   83f90:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   83f94:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83f98:	e7c1      	b.n	83f1e <__register_exitproc+0x16>
   83f9a:	f04f 30ff 	mov.w	r0, #4294967295
   83f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83fa2:	bf00      	nop
   83fa4:	00084000 	.word	0x00084000
   83fa8:	00000000 	.word	0x00000000
   83fac:	5f434949 	.word	0x5f434949
   83fb0:	00002031 	.word	0x00002031
   83fb4:	5f495053 	.word	0x5f495053
   83fb8:	00002030 	.word	0x00002030
   83fbc:	54524155 	.word	0x54524155
   83fc0:	00002030 	.word	0x00002030
	...
   83fcc:	aaaaaa00 	.word	0xaaaaaa00
   83fd0:	aaaaaaaa 	.word	0xaaaaaaaa
   83fd4:	eeeeeeaa 	.word	0xeeeeeeaa
   83fd8:	eeeeeeee 	.word	0xeeeeeeee
   83fdc:	fffffeee 	.word	0xfffffeee
   83fe0:	ffffffff 	.word	0xffffffff
   83fe4:	ffffffff 	.word	0xffffffff
   83fe8:	dfbf7fff 	.word	0xdfbf7fff
   83fec:	fdfbf7ef 	.word	0xfdfbf7ef
   83ff0:	dfbf7efc 	.word	0xdfbf7efc
   83ff4:	fdfbf7ef 	.word	0xfdfbf7ef
   83ff8:	0000007e 	.word	0x0000007e
   83ffc:	00000043 	.word	0x00000043

00084000 <_global_impure_ptr>:
   84000:	20070280                                ... 

00084004 <_init>:
   84004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84006:	bf00      	nop
   84008:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8400a:	bc08      	pop	{r3}
   8400c:	469e      	mov	lr, r3
   8400e:	4770      	bx	lr

00084010 <__init_array_start>:
   84010:	00083ec1 	.word	0x00083ec1

00084014 <__frame_dummy_init_array_entry>:
   84014:	00080119                                ....

00084018 <_fini>:
   84018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8401a:	bf00      	nop
   8401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8401e:	bc08      	pop	{r3}
   84020:	469e      	mov	lr, r3
   84022:	4770      	bx	lr

00084024 <__fini_array_start>:
   84024:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070278 	.word	0x20070278

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <udi_api_cdc_data>:
20070138:	000812c5 000810a9 00080dad 00080db1     ................
20070148:	00080fb5                                ....

2007014c <udi_api_cdc_comm>:
2007014c:	00080dc9 00080d9d 000810d1 00080db1     ................
2007015c:	00000000                                ....

20070160 <udc_string_product_name>:
20070160:	20434443 74726956 206c6175 006d6f43     CDC Virtual Com.

20070170 <udc_string_manufacturer_name>:
20070170:	454d5441 5341204c 00000046              ATMEL ASF...

2007017c <udc_string_desc>:
2007017c:	00000300 00000000 00000000 00000000     ................
	...

2007019c <udc_string_desc_languageid>:
2007019c:	04090304                                ....

200701a0 <udc_config_hs>:
200701a0:	200701a8 20070210                       ... ... 

200701a8 <udc_desc_hs>:
200701a8:	00430209 c0000102 00040932 02020100     ..C.....2.......
200701b8:	24050001 04011000 05020224 01000624     ...$....$...$...
200701c8:	03012405 83050701 10004003 00010409     .$.......@......
200701d8:	00000a02 81050700 00020002 02020507     ................
200701e8:	00000200                                ....

200701ec <udc_config>:
200701ec:	20070220 20070218 20070220 20070204      .. ...  .. ... 
200701fc:	200701a0 00000000                       ... ....

20070204 <udc_device_qual>:
20070204:	0200060a 40000002 00000001              .......@....

20070210 <udi_apis>:
20070210:	2007014c 20070138                       L.. 8.. 

20070218 <udc_config_fs>:
20070218:	20070234 20070210                       4.. ... 

20070220 <udc_device_desc>:
20070220:	02000112 40000002 240403eb 02010100     .......@...$....
20070230:	00000100                                ....

20070234 <udc_desc_fs>:
20070234:	00430209 c0000102 00040932 02020100     ..C.....2.......
20070244:	24050001 04011000 05020224 01000624     ...$....$...$...
20070254:	03012405 83050701 10004003 00010409     .$.......@......
20070264:	00000a02 81050700 00004002 02020507     .........@......
20070274:	01000040                                         @..

20070277 <g_interrupt_enabled>:
20070277:	3d090001                                         .

20070278 <SystemCoreClock>:
20070278:	003d0900 00000000                       ..=.....

20070280 <impure_data>:
20070280:	00000000 2007056c 200705d4 2007063c     ....l.. ... <.. 
	...
200702b4:	00083ffc 00000000 00000000 00000000     .?..............
	...
20070328:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070338:	0005deec 0000000b 00000000 00000000     ................
	...
